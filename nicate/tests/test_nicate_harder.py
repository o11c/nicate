from nicate.tests.test_nicate import builder, pat, ef


def test_expr_harder(builder):
    b = builder

    tv = b.type_typedef('V')
    tw = b.type_typedef('W')
    xx = b.expr_id('x')
    xy = b.expr_id('y')
    xz = b.expr_id('z')
    xa = b.expr_id('a')
    xb = b.expr_id('b')

    x_index = b.expr_index(xx, xy)
    x_call = b.expr_call(xx, [xy])
    x_direct_member = b.expr_direct_member(xx, 'f')
    x_indirect_member = b.expr_indirect_member(xx, 'g')
    x_post_inc = b.expr_post_inc(xx)
    x_post_dec = b.expr_post_dec(xx)
    x_pre_inc = b.expr_pre_inc(xx)
    x_pre_dec = b.expr_pre_dec(xx)
    x_addressof = b.expr_addressof(xx)
    x_deref = b.expr_deref(xx)
    x_unary_plus = b.expr_unary_plus(xx)
    x_unary_minus = b.expr_unary_minus(xx)
    x_bitwise_not = b.expr_bitwise_not(xx)
    x_logical_not = b.expr_logical_not(xx)
    x_sizeof_expr = b.expr_sizeof_expr(xx)
    x_sizeof_type = b.expr_sizeof_type(tw)
    x_cast = b.expr_cast(tw, xx)
    x_times = b.expr_times(xx, xy)
    x_divide = b.expr_divide(xx, xy)
    x_modulus = b.expr_modulus(xx, xy)
    x_plus = b.expr_plus(xx, xy)
    x_minus = b.expr_minus(xx, xy)
    x_lshift = b.expr_lshift(xx, xy)
    x_rshift = b.expr_rshift(xx, xy)
    x_cmp_lt = b.expr_cmp_lt(xx, xy)
    x_cmp_gt = b.expr_cmp_gt(xx, xy)
    x_cmp_le = b.expr_cmp_le(xx, xy)
    x_cmp_ge = b.expr_cmp_ge(xx, xy)
    x_cmp_eq = b.expr_cmp_eq(xx, xy)
    x_cmp_ne = b.expr_cmp_ne(xx, xy)
    x_bitwise_and = b.expr_bitwise_and(xx, xy)
    x_bitwise_xor = b.expr_bitwise_xor(xx, xy)
    x_bitwise_or = b.expr_bitwise_or(xx, xy)
    x_logical_and = b.expr_logical_and(xx, xy)
    x_logical_or = b.expr_logical_or(xx, xy)
    x_conditional = b.expr_conditional(xx, xy, xz)
    x_assign = b.expr_assign(xx, xy)
    x_assign_times = b.expr_assign_times(xx, xy)
    x_assign_divide = b.expr_assign_divide(xx, xy)
    x_assign_modulus = b.expr_assign_modulus(xx, xy)
    x_assign_plus = b.expr_assign_plus(xx, xy)
    x_assign_minus = b.expr_assign_minus(xx, xy)
    x_assign_lshift = b.expr_assign_lshift(xx, xy)
    x_assign_rshift = b.expr_assign_rshift(xx, xy)
    x_assign_bitwise_and = b.expr_assign_bitwise_and(xx, xy)
    x_assign_bitwise_xor = b.expr_assign_bitwise_xor(xx, xy)
    x_assign_bitwise_or = b.expr_assign_bitwise_or(xx, xy)
    x_comma = b.expr_comma(xx, xy)

    tu = ef(b, b.expr_index(x_index, xa))
    assert tu.emit_to_string() == pat('x[y][a];')
    tu = ef(b, b.expr_call(x_index, [xa]))
    assert tu.emit_to_string() == pat('x[y](a);')
    tu = ef(b, b.expr_direct_member(x_index, 'f'))
    assert tu.emit_to_string() == pat('x[y].f;')
    tu = ef(b, b.expr_indirect_member(x_index, 'g'))
    assert tu.emit_to_string() == pat('x[y]->g;')
    tu = ef(b, b.expr_post_inc(x_index))
    assert tu.emit_to_string() == pat('x[y]++;')
    tu = ef(b, b.expr_post_dec(x_index))
    assert tu.emit_to_string() == pat('x[y]--;')
    tu = ef(b, b.expr_pre_inc(x_index))
    assert tu.emit_to_string() == pat('++x[y];')
    tu = ef(b, b.expr_pre_dec(x_index))
    assert tu.emit_to_string() == pat('--x[y];')
    tu = ef(b, b.expr_addressof(x_index))
    assert tu.emit_to_string() == pat('&x[y];')
    tu = ef(b, b.expr_deref(x_index))
    assert tu.emit_to_string() == pat('*x[y];')
    tu = ef(b, b.expr_unary_plus(x_index))
    assert tu.emit_to_string() == pat('+x[y];')
    tu = ef(b, b.expr_unary_minus(x_index))
    assert tu.emit_to_string() == pat('-x[y];')
    tu = ef(b, b.expr_bitwise_not(x_index))
    assert tu.emit_to_string() == pat('~x[y];')
    tu = ef(b, b.expr_logical_not(x_index))
    assert tu.emit_to_string() == pat('!x[y];')
    tu = ef(b, b.expr_sizeof_expr(x_index))
    assert tu.emit_to_string() == pat('sizeof(x[y]);')
    tu = ef(b, b.expr_cast(tv, x_index))
    assert tu.emit_to_string() == pat('(V)x[y];')
    tu = ef(b, b.expr_times(x_index, xa))
    assert tu.emit_to_string() == pat('x[y] * a;')
    tu = ef(b, b.expr_divide(x_index, xa))
    assert tu.emit_to_string() == pat('x[y] / a;')
    tu = ef(b, b.expr_modulus(x_index, xa))
    assert tu.emit_to_string() == pat('x[y] % a;')
    tu = ef(b, b.expr_plus(x_index, xa))
    assert tu.emit_to_string() == pat('x[y] + a;')
    tu = ef(b, b.expr_minus(x_index, xa))
    assert tu.emit_to_string() == pat('x[y] - a;')
    tu = ef(b, b.expr_lshift(x_index, xa))
    assert tu.emit_to_string() == pat('x[y] << a;')
    tu = ef(b, b.expr_rshift(x_index, xa))
    assert tu.emit_to_string() == pat('x[y] >> a;')
    tu = ef(b, b.expr_cmp_lt(x_index, xa))
    assert tu.emit_to_string() == pat('x[y] < a;')
    tu = ef(b, b.expr_cmp_gt(x_index, xa))
    assert tu.emit_to_string() == pat('x[y] > a;')
    tu = ef(b, b.expr_cmp_le(x_index, xa))
    assert tu.emit_to_string() == pat('x[y] <= a;')
    tu = ef(b, b.expr_cmp_ge(x_index, xa))
    assert tu.emit_to_string() == pat('x[y] >= a;')
    tu = ef(b, b.expr_cmp_eq(x_index, xa))
    assert tu.emit_to_string() == pat('x[y] == a;')
    tu = ef(b, b.expr_cmp_ne(x_index, xa))
    assert tu.emit_to_string() == pat('x[y] != a;')
    tu = ef(b, b.expr_bitwise_and(x_index, xa))
    assert tu.emit_to_string() == pat('x[y] & a;')
    tu = ef(b, b.expr_bitwise_xor(x_index, xa))
    assert tu.emit_to_string() == pat('x[y] ^ a;')
    tu = ef(b, b.expr_bitwise_or(x_index, xa))
    assert tu.emit_to_string() == pat('x[y] | a;')
    tu = ef(b, b.expr_logical_and(x_index, xa))
    assert tu.emit_to_string() == pat('x[y] && a;')
    tu = ef(b, b.expr_logical_or(x_index, xa))
    assert tu.emit_to_string() == pat('x[y] || a;')
    tu = ef(b, b.expr_conditional(x_index, xa, xb))
    assert tu.emit_to_string() == pat('x[y] ? a : b;')
    tu = ef(b, b.expr_assign(x_index, xa))
    assert tu.emit_to_string() == pat('x[y] = a;')
    tu = ef(b, b.expr_assign_times(x_index, xa))
    assert tu.emit_to_string() == pat('x[y] *= a;')
    tu = ef(b, b.expr_assign_divide(x_index, xa))
    assert tu.emit_to_string() == pat('x[y] /= a;')
    tu = ef(b, b.expr_assign_modulus(x_index, xa))
    assert tu.emit_to_string() == pat('x[y] %= a;')
    tu = ef(b, b.expr_assign_plus(x_index, xa))
    assert tu.emit_to_string() == pat('x[y] += a;')
    tu = ef(b, b.expr_assign_minus(x_index, xa))
    assert tu.emit_to_string() == pat('x[y] -= a;')
    tu = ef(b, b.expr_assign_lshift(x_index, xa))
    assert tu.emit_to_string() == pat('x[y] <<= a;')
    tu = ef(b, b.expr_assign_rshift(x_index, xa))
    assert tu.emit_to_string() == pat('x[y] >>= a;')
    tu = ef(b, b.expr_assign_bitwise_and(x_index, xa))
    assert tu.emit_to_string() == pat('x[y] &= a;')
    tu = ef(b, b.expr_assign_bitwise_xor(x_index, xa))
    assert tu.emit_to_string() == pat('x[y] ^= a;')
    tu = ef(b, b.expr_assign_bitwise_or(x_index, xa))
    assert tu.emit_to_string() == pat('x[y] |= a;')
    tu = ef(b, b.expr_comma(x_index, xa))
    assert tu.emit_to_string() == pat('x[y], a;')
    tu = ef(b, b.expr_index(xa, x_index))
    assert tu.emit_to_string() == pat('a[x[y]];')
    tu = ef(b, b.expr_call(xa, [x_index]))
    assert tu.emit_to_string() == pat('a(x[y]);')
    tu = ef(b, b.expr_times(xa, x_index))
    assert tu.emit_to_string() == pat('a * x[y];')
    tu = ef(b, b.expr_divide(xa, x_index))
    assert tu.emit_to_string() == pat('a / x[y];')
    tu = ef(b, b.expr_modulus(xa, x_index))
    assert tu.emit_to_string() == pat('a % x[y];')
    tu = ef(b, b.expr_plus(xa, x_index))
    assert tu.emit_to_string() == pat('a + x[y];')
    tu = ef(b, b.expr_minus(xa, x_index))
    assert tu.emit_to_string() == pat('a - x[y];')
    tu = ef(b, b.expr_lshift(xa, x_index))
    assert tu.emit_to_string() == pat('a << x[y];')
    tu = ef(b, b.expr_rshift(xa, x_index))
    assert tu.emit_to_string() == pat('a >> x[y];')
    tu = ef(b, b.expr_cmp_lt(xa, x_index))
    assert tu.emit_to_string() == pat('a < x[y];')
    tu = ef(b, b.expr_cmp_gt(xa, x_index))
    assert tu.emit_to_string() == pat('a > x[y];')
    tu = ef(b, b.expr_cmp_le(xa, x_index))
    assert tu.emit_to_string() == pat('a <= x[y];')
    tu = ef(b, b.expr_cmp_ge(xa, x_index))
    assert tu.emit_to_string() == pat('a >= x[y];')
    tu = ef(b, b.expr_cmp_eq(xa, x_index))
    assert tu.emit_to_string() == pat('a == x[y];')
    tu = ef(b, b.expr_cmp_ne(xa, x_index))
    assert tu.emit_to_string() == pat('a != x[y];')
    tu = ef(b, b.expr_bitwise_and(xa, x_index))
    assert tu.emit_to_string() == pat('a & x[y];')
    tu = ef(b, b.expr_bitwise_xor(xa, x_index))
    assert tu.emit_to_string() == pat('a ^ x[y];')
    tu = ef(b, b.expr_bitwise_or(xa, x_index))
    assert tu.emit_to_string() == pat('a | x[y];')
    tu = ef(b, b.expr_logical_and(xa, x_index))
    assert tu.emit_to_string() == pat('a && x[y];')
    tu = ef(b, b.expr_logical_or(xa, x_index))
    assert tu.emit_to_string() == pat('a || x[y];')
    tu = ef(b, b.expr_conditional(xa, x_index, xb))
    assert tu.emit_to_string() == pat('a ? x[y] : b;')
    tu = ef(b, b.expr_assign(xa, x_index))
    assert tu.emit_to_string() == pat('a = x[y];')
    tu = ef(b, b.expr_assign_times(xa, x_index))
    assert tu.emit_to_string() == pat('a *= x[y];')
    tu = ef(b, b.expr_assign_divide(xa, x_index))
    assert tu.emit_to_string() == pat('a /= x[y];')
    tu = ef(b, b.expr_assign_modulus(xa, x_index))
    assert tu.emit_to_string() == pat('a %= x[y];')
    tu = ef(b, b.expr_assign_plus(xa, x_index))
    assert tu.emit_to_string() == pat('a += x[y];')
    tu = ef(b, b.expr_assign_minus(xa, x_index))
    assert tu.emit_to_string() == pat('a -= x[y];')
    tu = ef(b, b.expr_assign_lshift(xa, x_index))
    assert tu.emit_to_string() == pat('a <<= x[y];')
    tu = ef(b, b.expr_assign_rshift(xa, x_index))
    assert tu.emit_to_string() == pat('a >>= x[y];')
    tu = ef(b, b.expr_assign_bitwise_and(xa, x_index))
    assert tu.emit_to_string() == pat('a &= x[y];')
    tu = ef(b, b.expr_assign_bitwise_xor(xa, x_index))
    assert tu.emit_to_string() == pat('a ^= x[y];')
    tu = ef(b, b.expr_assign_bitwise_or(xa, x_index))
    assert tu.emit_to_string() == pat('a |= x[y];')
    tu = ef(b, b.expr_comma(xa, x_index))
    assert tu.emit_to_string() == pat('a, x[y];')
    tu = ef(b, b.expr_conditional(xa, xb, x_index))
    assert tu.emit_to_string() == pat('a ? b : x[y];')

    tu = ef(b, b.expr_index(x_call, xa))
    assert tu.emit_to_string() == pat('x(y)[a];')
    tu = ef(b, b.expr_call(x_call, [xa]))
    assert tu.emit_to_string() == pat('x(y)(a);')
    tu = ef(b, b.expr_direct_member(x_call, 'f'))
    assert tu.emit_to_string() == pat('x(y).f;')
    tu = ef(b, b.expr_indirect_member(x_call, 'g'))
    assert tu.emit_to_string() == pat('x(y)->g;')
    tu = ef(b, b.expr_post_inc(x_call))
    assert tu.emit_to_string() == pat('x(y)++;')
    tu = ef(b, b.expr_post_dec(x_call))
    assert tu.emit_to_string() == pat('x(y)--;')
    tu = ef(b, b.expr_pre_inc(x_call))
    assert tu.emit_to_string() == pat('++x(y);')
    tu = ef(b, b.expr_pre_dec(x_call))
    assert tu.emit_to_string() == pat('--x(y);')
    tu = ef(b, b.expr_addressof(x_call))
    assert tu.emit_to_string() == pat('&x(y);')
    tu = ef(b, b.expr_deref(x_call))
    assert tu.emit_to_string() == pat('*x(y);')
    tu = ef(b, b.expr_unary_plus(x_call))
    assert tu.emit_to_string() == pat('+x(y);')
    tu = ef(b, b.expr_unary_minus(x_call))
    assert tu.emit_to_string() == pat('-x(y);')
    tu = ef(b, b.expr_bitwise_not(x_call))
    assert tu.emit_to_string() == pat('~x(y);')
    tu = ef(b, b.expr_logical_not(x_call))
    assert tu.emit_to_string() == pat('!x(y);')
    tu = ef(b, b.expr_sizeof_expr(x_call))
    assert tu.emit_to_string() == pat('sizeof(x(y));')
    tu = ef(b, b.expr_cast(tv, x_call))
    assert tu.emit_to_string() == pat('(V)x(y);')
    tu = ef(b, b.expr_times(x_call, xa))
    assert tu.emit_to_string() == pat('x(y) * a;')
    tu = ef(b, b.expr_divide(x_call, xa))
    assert tu.emit_to_string() == pat('x(y) / a;')
    tu = ef(b, b.expr_modulus(x_call, xa))
    assert tu.emit_to_string() == pat('x(y) % a;')
    tu = ef(b, b.expr_plus(x_call, xa))
    assert tu.emit_to_string() == pat('x(y) + a;')
    tu = ef(b, b.expr_minus(x_call, xa))
    assert tu.emit_to_string() == pat('x(y) - a;')
    tu = ef(b, b.expr_lshift(x_call, xa))
    assert tu.emit_to_string() == pat('x(y) << a;')
    tu = ef(b, b.expr_rshift(x_call, xa))
    assert tu.emit_to_string() == pat('x(y) >> a;')
    tu = ef(b, b.expr_cmp_lt(x_call, xa))
    assert tu.emit_to_string() == pat('x(y) < a;')
    tu = ef(b, b.expr_cmp_gt(x_call, xa))
    assert tu.emit_to_string() == pat('x(y) > a;')
    tu = ef(b, b.expr_cmp_le(x_call, xa))
    assert tu.emit_to_string() == pat('x(y) <= a;')
    tu = ef(b, b.expr_cmp_ge(x_call, xa))
    assert tu.emit_to_string() == pat('x(y) >= a;')
    tu = ef(b, b.expr_cmp_eq(x_call, xa))
    assert tu.emit_to_string() == pat('x(y) == a;')
    tu = ef(b, b.expr_cmp_ne(x_call, xa))
    assert tu.emit_to_string() == pat('x(y) != a;')
    tu = ef(b, b.expr_bitwise_and(x_call, xa))
    assert tu.emit_to_string() == pat('x(y) & a;')
    tu = ef(b, b.expr_bitwise_xor(x_call, xa))
    assert tu.emit_to_string() == pat('x(y) ^ a;')
    tu = ef(b, b.expr_bitwise_or(x_call, xa))
    assert tu.emit_to_string() == pat('x(y) | a;')
    tu = ef(b, b.expr_logical_and(x_call, xa))
    assert tu.emit_to_string() == pat('x(y) && a;')
    tu = ef(b, b.expr_logical_or(x_call, xa))
    assert tu.emit_to_string() == pat('x(y) || a;')
    tu = ef(b, b.expr_conditional(x_call, xa, xb))
    assert tu.emit_to_string() == pat('x(y) ? a : b;')
    tu = ef(b, b.expr_assign(x_call, xa))
    assert tu.emit_to_string() == pat('x(y) = a;')
    tu = ef(b, b.expr_assign_times(x_call, xa))
    assert tu.emit_to_string() == pat('x(y) *= a;')
    tu = ef(b, b.expr_assign_divide(x_call, xa))
    assert tu.emit_to_string() == pat('x(y) /= a;')
    tu = ef(b, b.expr_assign_modulus(x_call, xa))
    assert tu.emit_to_string() == pat('x(y) %= a;')
    tu = ef(b, b.expr_assign_plus(x_call, xa))
    assert tu.emit_to_string() == pat('x(y) += a;')
    tu = ef(b, b.expr_assign_minus(x_call, xa))
    assert tu.emit_to_string() == pat('x(y) -= a;')
    tu = ef(b, b.expr_assign_lshift(x_call, xa))
    assert tu.emit_to_string() == pat('x(y) <<= a;')
    tu = ef(b, b.expr_assign_rshift(x_call, xa))
    assert tu.emit_to_string() == pat('x(y) >>= a;')
    tu = ef(b, b.expr_assign_bitwise_and(x_call, xa))
    assert tu.emit_to_string() == pat('x(y) &= a;')
    tu = ef(b, b.expr_assign_bitwise_xor(x_call, xa))
    assert tu.emit_to_string() == pat('x(y) ^= a;')
    tu = ef(b, b.expr_assign_bitwise_or(x_call, xa))
    assert tu.emit_to_string() == pat('x(y) |= a;')
    tu = ef(b, b.expr_comma(x_call, xa))
    assert tu.emit_to_string() == pat('x(y), a;')
    tu = ef(b, b.expr_index(xa, x_call))
    assert tu.emit_to_string() == pat('a[x(y)];')
    tu = ef(b, b.expr_call(xa, [x_call]))
    assert tu.emit_to_string() == pat('a(x(y));')
    tu = ef(b, b.expr_times(xa, x_call))
    assert tu.emit_to_string() == pat('a * x(y);')
    tu = ef(b, b.expr_divide(xa, x_call))
    assert tu.emit_to_string() == pat('a / x(y);')
    tu = ef(b, b.expr_modulus(xa, x_call))
    assert tu.emit_to_string() == pat('a % x(y);')
    tu = ef(b, b.expr_plus(xa, x_call))
    assert tu.emit_to_string() == pat('a + x(y);')
    tu = ef(b, b.expr_minus(xa, x_call))
    assert tu.emit_to_string() == pat('a - x(y);')
    tu = ef(b, b.expr_lshift(xa, x_call))
    assert tu.emit_to_string() == pat('a << x(y);')
    tu = ef(b, b.expr_rshift(xa, x_call))
    assert tu.emit_to_string() == pat('a >> x(y);')
    tu = ef(b, b.expr_cmp_lt(xa, x_call))
    assert tu.emit_to_string() == pat('a < x(y);')
    tu = ef(b, b.expr_cmp_gt(xa, x_call))
    assert tu.emit_to_string() == pat('a > x(y);')
    tu = ef(b, b.expr_cmp_le(xa, x_call))
    assert tu.emit_to_string() == pat('a <= x(y);')
    tu = ef(b, b.expr_cmp_ge(xa, x_call))
    assert tu.emit_to_string() == pat('a >= x(y);')
    tu = ef(b, b.expr_cmp_eq(xa, x_call))
    assert tu.emit_to_string() == pat('a == x(y);')
    tu = ef(b, b.expr_cmp_ne(xa, x_call))
    assert tu.emit_to_string() == pat('a != x(y);')
    tu = ef(b, b.expr_bitwise_and(xa, x_call))
    assert tu.emit_to_string() == pat('a & x(y);')
    tu = ef(b, b.expr_bitwise_xor(xa, x_call))
    assert tu.emit_to_string() == pat('a ^ x(y);')
    tu = ef(b, b.expr_bitwise_or(xa, x_call))
    assert tu.emit_to_string() == pat('a | x(y);')
    tu = ef(b, b.expr_logical_and(xa, x_call))
    assert tu.emit_to_string() == pat('a && x(y);')
    tu = ef(b, b.expr_logical_or(xa, x_call))
    assert tu.emit_to_string() == pat('a || x(y);')
    tu = ef(b, b.expr_conditional(xa, x_call, xb))
    assert tu.emit_to_string() == pat('a ? x(y) : b;')
    tu = ef(b, b.expr_assign(xa, x_call))
    assert tu.emit_to_string() == pat('a = x(y);')
    tu = ef(b, b.expr_assign_times(xa, x_call))
    assert tu.emit_to_string() == pat('a *= x(y);')
    tu = ef(b, b.expr_assign_divide(xa, x_call))
    assert tu.emit_to_string() == pat('a /= x(y);')
    tu = ef(b, b.expr_assign_modulus(xa, x_call))
    assert tu.emit_to_string() == pat('a %= x(y);')
    tu = ef(b, b.expr_assign_plus(xa, x_call))
    assert tu.emit_to_string() == pat('a += x(y);')
    tu = ef(b, b.expr_assign_minus(xa, x_call))
    assert tu.emit_to_string() == pat('a -= x(y);')
    tu = ef(b, b.expr_assign_lshift(xa, x_call))
    assert tu.emit_to_string() == pat('a <<= x(y);')
    tu = ef(b, b.expr_assign_rshift(xa, x_call))
    assert tu.emit_to_string() == pat('a >>= x(y);')
    tu = ef(b, b.expr_assign_bitwise_and(xa, x_call))
    assert tu.emit_to_string() == pat('a &= x(y);')
    tu = ef(b, b.expr_assign_bitwise_xor(xa, x_call))
    assert tu.emit_to_string() == pat('a ^= x(y);')
    tu = ef(b, b.expr_assign_bitwise_or(xa, x_call))
    assert tu.emit_to_string() == pat('a |= x(y);')
    tu = ef(b, b.expr_comma(xa, x_call))
    assert tu.emit_to_string() == pat('a, x(y);')
    tu = ef(b, b.expr_conditional(xa, xb, x_call))
    assert tu.emit_to_string() == pat('a ? b : x(y);')

    tu = ef(b, b.expr_index(x_direct_member, xa))
    assert tu.emit_to_string() == pat('x.f[a];')
    tu = ef(b, b.expr_call(x_direct_member, [xa]))
    assert tu.emit_to_string() == pat('x.f(a);')
    tu = ef(b, b.expr_direct_member(x_direct_member, 'f'))
    assert tu.emit_to_string() == pat('x.f.f;')
    tu = ef(b, b.expr_indirect_member(x_direct_member, 'g'))
    assert tu.emit_to_string() == pat('x.f->g;')
    tu = ef(b, b.expr_post_inc(x_direct_member))
    assert tu.emit_to_string() == pat('x.f++;')
    tu = ef(b, b.expr_post_dec(x_direct_member))
    assert tu.emit_to_string() == pat('x.f--;')
    tu = ef(b, b.expr_pre_inc(x_direct_member))
    assert tu.emit_to_string() == pat('++x.f;')
    tu = ef(b, b.expr_pre_dec(x_direct_member))
    assert tu.emit_to_string() == pat('--x.f;')
    tu = ef(b, b.expr_addressof(x_direct_member))
    assert tu.emit_to_string() == pat('&x.f;')
    tu = ef(b, b.expr_deref(x_direct_member))
    assert tu.emit_to_string() == pat('*x.f;')
    tu = ef(b, b.expr_unary_plus(x_direct_member))
    assert tu.emit_to_string() == pat('+x.f;')
    tu = ef(b, b.expr_unary_minus(x_direct_member))
    assert tu.emit_to_string() == pat('-x.f;')
    tu = ef(b, b.expr_bitwise_not(x_direct_member))
    assert tu.emit_to_string() == pat('~x.f;')
    tu = ef(b, b.expr_logical_not(x_direct_member))
    assert tu.emit_to_string() == pat('!x.f;')
    tu = ef(b, b.expr_sizeof_expr(x_direct_member))
    assert tu.emit_to_string() == pat('sizeof(x.f);')
    tu = ef(b, b.expr_cast(tv, x_direct_member))
    assert tu.emit_to_string() == pat('(V)x.f;')
    tu = ef(b, b.expr_times(x_direct_member, xa))
    assert tu.emit_to_string() == pat('x.f * a;')
    tu = ef(b, b.expr_divide(x_direct_member, xa))
    assert tu.emit_to_string() == pat('x.f / a;')
    tu = ef(b, b.expr_modulus(x_direct_member, xa))
    assert tu.emit_to_string() == pat('x.f % a;')
    tu = ef(b, b.expr_plus(x_direct_member, xa))
    assert tu.emit_to_string() == pat('x.f + a;')
    tu = ef(b, b.expr_minus(x_direct_member, xa))
    assert tu.emit_to_string() == pat('x.f - a;')
    tu = ef(b, b.expr_lshift(x_direct_member, xa))
    assert tu.emit_to_string() == pat('x.f << a;')
    tu = ef(b, b.expr_rshift(x_direct_member, xa))
    assert tu.emit_to_string() == pat('x.f >> a;')
    tu = ef(b, b.expr_cmp_lt(x_direct_member, xa))
    assert tu.emit_to_string() == pat('x.f < a;')
    tu = ef(b, b.expr_cmp_gt(x_direct_member, xa))
    assert tu.emit_to_string() == pat('x.f > a;')
    tu = ef(b, b.expr_cmp_le(x_direct_member, xa))
    assert tu.emit_to_string() == pat('x.f <= a;')
    tu = ef(b, b.expr_cmp_ge(x_direct_member, xa))
    assert tu.emit_to_string() == pat('x.f >= a;')
    tu = ef(b, b.expr_cmp_eq(x_direct_member, xa))
    assert tu.emit_to_string() == pat('x.f == a;')
    tu = ef(b, b.expr_cmp_ne(x_direct_member, xa))
    assert tu.emit_to_string() == pat('x.f != a;')
    tu = ef(b, b.expr_bitwise_and(x_direct_member, xa))
    assert tu.emit_to_string() == pat('x.f & a;')
    tu = ef(b, b.expr_bitwise_xor(x_direct_member, xa))
    assert tu.emit_to_string() == pat('x.f ^ a;')
    tu = ef(b, b.expr_bitwise_or(x_direct_member, xa))
    assert tu.emit_to_string() == pat('x.f | a;')
    tu = ef(b, b.expr_logical_and(x_direct_member, xa))
    assert tu.emit_to_string() == pat('x.f && a;')
    tu = ef(b, b.expr_logical_or(x_direct_member, xa))
    assert tu.emit_to_string() == pat('x.f || a;')
    tu = ef(b, b.expr_conditional(x_direct_member, xa, xb))
    assert tu.emit_to_string() == pat('x.f ? a : b;')
    tu = ef(b, b.expr_assign(x_direct_member, xa))
    assert tu.emit_to_string() == pat('x.f = a;')
    tu = ef(b, b.expr_assign_times(x_direct_member, xa))
    assert tu.emit_to_string() == pat('x.f *= a;')
    tu = ef(b, b.expr_assign_divide(x_direct_member, xa))
    assert tu.emit_to_string() == pat('x.f /= a;')
    tu = ef(b, b.expr_assign_modulus(x_direct_member, xa))
    assert tu.emit_to_string() == pat('x.f %= a;')
    tu = ef(b, b.expr_assign_plus(x_direct_member, xa))
    assert tu.emit_to_string() == pat('x.f += a;')
    tu = ef(b, b.expr_assign_minus(x_direct_member, xa))
    assert tu.emit_to_string() == pat('x.f -= a;')
    tu = ef(b, b.expr_assign_lshift(x_direct_member, xa))
    assert tu.emit_to_string() == pat('x.f <<= a;')
    tu = ef(b, b.expr_assign_rshift(x_direct_member, xa))
    assert tu.emit_to_string() == pat('x.f >>= a;')
    tu = ef(b, b.expr_assign_bitwise_and(x_direct_member, xa))
    assert tu.emit_to_string() == pat('x.f &= a;')
    tu = ef(b, b.expr_assign_bitwise_xor(x_direct_member, xa))
    assert tu.emit_to_string() == pat('x.f ^= a;')
    tu = ef(b, b.expr_assign_bitwise_or(x_direct_member, xa))
    assert tu.emit_to_string() == pat('x.f |= a;')
    tu = ef(b, b.expr_comma(x_direct_member, xa))
    assert tu.emit_to_string() == pat('x.f, a;')
    tu = ef(b, b.expr_index(xa, x_direct_member))
    assert tu.emit_to_string() == pat('a[x.f];')
    tu = ef(b, b.expr_call(xa, [x_direct_member]))
    assert tu.emit_to_string() == pat('a(x.f);')
    tu = ef(b, b.expr_times(xa, x_direct_member))
    assert tu.emit_to_string() == pat('a * x.f;')
    tu = ef(b, b.expr_divide(xa, x_direct_member))
    assert tu.emit_to_string() == pat('a / x.f;')
    tu = ef(b, b.expr_modulus(xa, x_direct_member))
    assert tu.emit_to_string() == pat('a % x.f;')
    tu = ef(b, b.expr_plus(xa, x_direct_member))
    assert tu.emit_to_string() == pat('a + x.f;')
    tu = ef(b, b.expr_minus(xa, x_direct_member))
    assert tu.emit_to_string() == pat('a - x.f;')
    tu = ef(b, b.expr_lshift(xa, x_direct_member))
    assert tu.emit_to_string() == pat('a << x.f;')
    tu = ef(b, b.expr_rshift(xa, x_direct_member))
    assert tu.emit_to_string() == pat('a >> x.f;')
    tu = ef(b, b.expr_cmp_lt(xa, x_direct_member))
    assert tu.emit_to_string() == pat('a < x.f;')
    tu = ef(b, b.expr_cmp_gt(xa, x_direct_member))
    assert tu.emit_to_string() == pat('a > x.f;')
    tu = ef(b, b.expr_cmp_le(xa, x_direct_member))
    assert tu.emit_to_string() == pat('a <= x.f;')
    tu = ef(b, b.expr_cmp_ge(xa, x_direct_member))
    assert tu.emit_to_string() == pat('a >= x.f;')
    tu = ef(b, b.expr_cmp_eq(xa, x_direct_member))
    assert tu.emit_to_string() == pat('a == x.f;')
    tu = ef(b, b.expr_cmp_ne(xa, x_direct_member))
    assert tu.emit_to_string() == pat('a != x.f;')
    tu = ef(b, b.expr_bitwise_and(xa, x_direct_member))
    assert tu.emit_to_string() == pat('a & x.f;')
    tu = ef(b, b.expr_bitwise_xor(xa, x_direct_member))
    assert tu.emit_to_string() == pat('a ^ x.f;')
    tu = ef(b, b.expr_bitwise_or(xa, x_direct_member))
    assert tu.emit_to_string() == pat('a | x.f;')
    tu = ef(b, b.expr_logical_and(xa, x_direct_member))
    assert tu.emit_to_string() == pat('a && x.f;')
    tu = ef(b, b.expr_logical_or(xa, x_direct_member))
    assert tu.emit_to_string() == pat('a || x.f;')
    tu = ef(b, b.expr_conditional(xa, x_direct_member, xb))
    assert tu.emit_to_string() == pat('a ? x.f : b;')
    tu = ef(b, b.expr_assign(xa, x_direct_member))
    assert tu.emit_to_string() == pat('a = x.f;')
    tu = ef(b, b.expr_assign_times(xa, x_direct_member))
    assert tu.emit_to_string() == pat('a *= x.f;')
    tu = ef(b, b.expr_assign_divide(xa, x_direct_member))
    assert tu.emit_to_string() == pat('a /= x.f;')
    tu = ef(b, b.expr_assign_modulus(xa, x_direct_member))
    assert tu.emit_to_string() == pat('a %= x.f;')
    tu = ef(b, b.expr_assign_plus(xa, x_direct_member))
    assert tu.emit_to_string() == pat('a += x.f;')
    tu = ef(b, b.expr_assign_minus(xa, x_direct_member))
    assert tu.emit_to_string() == pat('a -= x.f;')
    tu = ef(b, b.expr_assign_lshift(xa, x_direct_member))
    assert tu.emit_to_string() == pat('a <<= x.f;')
    tu = ef(b, b.expr_assign_rshift(xa, x_direct_member))
    assert tu.emit_to_string() == pat('a >>= x.f;')
    tu = ef(b, b.expr_assign_bitwise_and(xa, x_direct_member))
    assert tu.emit_to_string() == pat('a &= x.f;')
    tu = ef(b, b.expr_assign_bitwise_xor(xa, x_direct_member))
    assert tu.emit_to_string() == pat('a ^= x.f;')
    tu = ef(b, b.expr_assign_bitwise_or(xa, x_direct_member))
    assert tu.emit_to_string() == pat('a |= x.f;')
    tu = ef(b, b.expr_comma(xa, x_direct_member))
    assert tu.emit_to_string() == pat('a, x.f;')
    tu = ef(b, b.expr_conditional(xa, xb, x_direct_member))
    assert tu.emit_to_string() == pat('a ? b : x.f;')

    tu = ef(b, b.expr_index(x_indirect_member, xa))
    assert tu.emit_to_string() == pat('x->g[a];')
    tu = ef(b, b.expr_call(x_indirect_member, [xa]))
    assert tu.emit_to_string() == pat('x->g(a);')
    tu = ef(b, b.expr_direct_member(x_indirect_member, 'f'))
    assert tu.emit_to_string() == pat('x->g.f;')
    tu = ef(b, b.expr_indirect_member(x_indirect_member, 'g'))
    assert tu.emit_to_string() == pat('x->g->g;')
    tu = ef(b, b.expr_post_inc(x_indirect_member))
    assert tu.emit_to_string() == pat('x->g++;')
    tu = ef(b, b.expr_post_dec(x_indirect_member))
    assert tu.emit_to_string() == pat('x->g--;')
    tu = ef(b, b.expr_pre_inc(x_indirect_member))
    assert tu.emit_to_string() == pat('++x->g;')
    tu = ef(b, b.expr_pre_dec(x_indirect_member))
    assert tu.emit_to_string() == pat('--x->g;')
    tu = ef(b, b.expr_addressof(x_indirect_member))
    assert tu.emit_to_string() == pat('&x->g;')
    tu = ef(b, b.expr_deref(x_indirect_member))
    assert tu.emit_to_string() == pat('*x->g;')
    tu = ef(b, b.expr_unary_plus(x_indirect_member))
    assert tu.emit_to_string() == pat('+x->g;')
    tu = ef(b, b.expr_unary_minus(x_indirect_member))
    assert tu.emit_to_string() == pat('-x->g;')
    tu = ef(b, b.expr_bitwise_not(x_indirect_member))
    assert tu.emit_to_string() == pat('~x->g;')
    tu = ef(b, b.expr_logical_not(x_indirect_member))
    assert tu.emit_to_string() == pat('!x->g;')
    tu = ef(b, b.expr_sizeof_expr(x_indirect_member))
    assert tu.emit_to_string() == pat('sizeof(x->g);')
    tu = ef(b, b.expr_cast(tv, x_indirect_member))
    assert tu.emit_to_string() == pat('(V)x->g;')
    tu = ef(b, b.expr_times(x_indirect_member, xa))
    assert tu.emit_to_string() == pat('x->g * a;')
    tu = ef(b, b.expr_divide(x_indirect_member, xa))
    assert tu.emit_to_string() == pat('x->g / a;')
    tu = ef(b, b.expr_modulus(x_indirect_member, xa))
    assert tu.emit_to_string() == pat('x->g % a;')
    tu = ef(b, b.expr_plus(x_indirect_member, xa))
    assert tu.emit_to_string() == pat('x->g + a;')
    tu = ef(b, b.expr_minus(x_indirect_member, xa))
    assert tu.emit_to_string() == pat('x->g - a;')
    tu = ef(b, b.expr_lshift(x_indirect_member, xa))
    assert tu.emit_to_string() == pat('x->g << a;')
    tu = ef(b, b.expr_rshift(x_indirect_member, xa))
    assert tu.emit_to_string() == pat('x->g >> a;')
    tu = ef(b, b.expr_cmp_lt(x_indirect_member, xa))
    assert tu.emit_to_string() == pat('x->g < a;')
    tu = ef(b, b.expr_cmp_gt(x_indirect_member, xa))
    assert tu.emit_to_string() == pat('x->g > a;')
    tu = ef(b, b.expr_cmp_le(x_indirect_member, xa))
    assert tu.emit_to_string() == pat('x->g <= a;')
    tu = ef(b, b.expr_cmp_ge(x_indirect_member, xa))
    assert tu.emit_to_string() == pat('x->g >= a;')
    tu = ef(b, b.expr_cmp_eq(x_indirect_member, xa))
    assert tu.emit_to_string() == pat('x->g == a;')
    tu = ef(b, b.expr_cmp_ne(x_indirect_member, xa))
    assert tu.emit_to_string() == pat('x->g != a;')
    tu = ef(b, b.expr_bitwise_and(x_indirect_member, xa))
    assert tu.emit_to_string() == pat('x->g & a;')
    tu = ef(b, b.expr_bitwise_xor(x_indirect_member, xa))
    assert tu.emit_to_string() == pat('x->g ^ a;')
    tu = ef(b, b.expr_bitwise_or(x_indirect_member, xa))
    assert tu.emit_to_string() == pat('x->g | a;')
    tu = ef(b, b.expr_logical_and(x_indirect_member, xa))
    assert tu.emit_to_string() == pat('x->g && a;')
    tu = ef(b, b.expr_logical_or(x_indirect_member, xa))
    assert tu.emit_to_string() == pat('x->g || a;')
    tu = ef(b, b.expr_conditional(x_indirect_member, xa, xb))
    assert tu.emit_to_string() == pat('x->g ? a : b;')
    tu = ef(b, b.expr_assign(x_indirect_member, xa))
    assert tu.emit_to_string() == pat('x->g = a;')
    tu = ef(b, b.expr_assign_times(x_indirect_member, xa))
    assert tu.emit_to_string() == pat('x->g *= a;')
    tu = ef(b, b.expr_assign_divide(x_indirect_member, xa))
    assert tu.emit_to_string() == pat('x->g /= a;')
    tu = ef(b, b.expr_assign_modulus(x_indirect_member, xa))
    assert tu.emit_to_string() == pat('x->g %= a;')
    tu = ef(b, b.expr_assign_plus(x_indirect_member, xa))
    assert tu.emit_to_string() == pat('x->g += a;')
    tu = ef(b, b.expr_assign_minus(x_indirect_member, xa))
    assert tu.emit_to_string() == pat('x->g -= a;')
    tu = ef(b, b.expr_assign_lshift(x_indirect_member, xa))
    assert tu.emit_to_string() == pat('x->g <<= a;')
    tu = ef(b, b.expr_assign_rshift(x_indirect_member, xa))
    assert tu.emit_to_string() == pat('x->g >>= a;')
    tu = ef(b, b.expr_assign_bitwise_and(x_indirect_member, xa))
    assert tu.emit_to_string() == pat('x->g &= a;')
    tu = ef(b, b.expr_assign_bitwise_xor(x_indirect_member, xa))
    assert tu.emit_to_string() == pat('x->g ^= a;')
    tu = ef(b, b.expr_assign_bitwise_or(x_indirect_member, xa))
    assert tu.emit_to_string() == pat('x->g |= a;')
    tu = ef(b, b.expr_comma(x_indirect_member, xa))
    assert tu.emit_to_string() == pat('x->g, a;')
    tu = ef(b, b.expr_index(xa, x_indirect_member))
    assert tu.emit_to_string() == pat('a[x->g];')
    tu = ef(b, b.expr_call(xa, [x_indirect_member]))
    assert tu.emit_to_string() == pat('a(x->g);')
    tu = ef(b, b.expr_times(xa, x_indirect_member))
    assert tu.emit_to_string() == pat('a * x->g;')
    tu = ef(b, b.expr_divide(xa, x_indirect_member))
    assert tu.emit_to_string() == pat('a / x->g;')
    tu = ef(b, b.expr_modulus(xa, x_indirect_member))
    assert tu.emit_to_string() == pat('a % x->g;')
    tu = ef(b, b.expr_plus(xa, x_indirect_member))
    assert tu.emit_to_string() == pat('a + x->g;')
    tu = ef(b, b.expr_minus(xa, x_indirect_member))
    assert tu.emit_to_string() == pat('a - x->g;')
    tu = ef(b, b.expr_lshift(xa, x_indirect_member))
    assert tu.emit_to_string() == pat('a << x->g;')
    tu = ef(b, b.expr_rshift(xa, x_indirect_member))
    assert tu.emit_to_string() == pat('a >> x->g;')
    tu = ef(b, b.expr_cmp_lt(xa, x_indirect_member))
    assert tu.emit_to_string() == pat('a < x->g;')
    tu = ef(b, b.expr_cmp_gt(xa, x_indirect_member))
    assert tu.emit_to_string() == pat('a > x->g;')
    tu = ef(b, b.expr_cmp_le(xa, x_indirect_member))
    assert tu.emit_to_string() == pat('a <= x->g;')
    tu = ef(b, b.expr_cmp_ge(xa, x_indirect_member))
    assert tu.emit_to_string() == pat('a >= x->g;')
    tu = ef(b, b.expr_cmp_eq(xa, x_indirect_member))
    assert tu.emit_to_string() == pat('a == x->g;')
    tu = ef(b, b.expr_cmp_ne(xa, x_indirect_member))
    assert tu.emit_to_string() == pat('a != x->g;')
    tu = ef(b, b.expr_bitwise_and(xa, x_indirect_member))
    assert tu.emit_to_string() == pat('a & x->g;')
    tu = ef(b, b.expr_bitwise_xor(xa, x_indirect_member))
    assert tu.emit_to_string() == pat('a ^ x->g;')
    tu = ef(b, b.expr_bitwise_or(xa, x_indirect_member))
    assert tu.emit_to_string() == pat('a | x->g;')
    tu = ef(b, b.expr_logical_and(xa, x_indirect_member))
    assert tu.emit_to_string() == pat('a && x->g;')
    tu = ef(b, b.expr_logical_or(xa, x_indirect_member))
    assert tu.emit_to_string() == pat('a || x->g;')
    tu = ef(b, b.expr_conditional(xa, x_indirect_member, xb))
    assert tu.emit_to_string() == pat('a ? x->g : b;')
    tu = ef(b, b.expr_assign(xa, x_indirect_member))
    assert tu.emit_to_string() == pat('a = x->g;')
    tu = ef(b, b.expr_assign_times(xa, x_indirect_member))
    assert tu.emit_to_string() == pat('a *= x->g;')
    tu = ef(b, b.expr_assign_divide(xa, x_indirect_member))
    assert tu.emit_to_string() == pat('a /= x->g;')
    tu = ef(b, b.expr_assign_modulus(xa, x_indirect_member))
    assert tu.emit_to_string() == pat('a %= x->g;')
    tu = ef(b, b.expr_assign_plus(xa, x_indirect_member))
    assert tu.emit_to_string() == pat('a += x->g;')
    tu = ef(b, b.expr_assign_minus(xa, x_indirect_member))
    assert tu.emit_to_string() == pat('a -= x->g;')
    tu = ef(b, b.expr_assign_lshift(xa, x_indirect_member))
    assert tu.emit_to_string() == pat('a <<= x->g;')
    tu = ef(b, b.expr_assign_rshift(xa, x_indirect_member))
    assert tu.emit_to_string() == pat('a >>= x->g;')
    tu = ef(b, b.expr_assign_bitwise_and(xa, x_indirect_member))
    assert tu.emit_to_string() == pat('a &= x->g;')
    tu = ef(b, b.expr_assign_bitwise_xor(xa, x_indirect_member))
    assert tu.emit_to_string() == pat('a ^= x->g;')
    tu = ef(b, b.expr_assign_bitwise_or(xa, x_indirect_member))
    assert tu.emit_to_string() == pat('a |= x->g;')
    tu = ef(b, b.expr_comma(xa, x_indirect_member))
    assert tu.emit_to_string() == pat('a, x->g;')
    tu = ef(b, b.expr_conditional(xa, xb, x_indirect_member))
    assert tu.emit_to_string() == pat('a ? b : x->g;')

    tu = ef(b, b.expr_index(x_post_inc, xa))
    assert tu.emit_to_string() == pat('x++[a];')
    tu = ef(b, b.expr_call(x_post_inc, [xa]))
    assert tu.emit_to_string() == pat('x++(a);')
    tu = ef(b, b.expr_direct_member(x_post_inc, 'f'))
    assert tu.emit_to_string() == pat('x++.f;')
    tu = ef(b, b.expr_indirect_member(x_post_inc, 'g'))
    assert tu.emit_to_string() == pat('x++->g;')
    tu = ef(b, b.expr_post_inc(x_post_inc))
    assert tu.emit_to_string() == pat('x++++;')
    tu = ef(b, b.expr_post_dec(x_post_inc))
    assert tu.emit_to_string() == pat('x++--;')
    tu = ef(b, b.expr_pre_inc(x_post_inc))
    assert tu.emit_to_string() == pat('++x++;')
    tu = ef(b, b.expr_pre_dec(x_post_inc))
    assert tu.emit_to_string() == pat('--x++;')
    tu = ef(b, b.expr_addressof(x_post_inc))
    assert tu.emit_to_string() == pat('&x++;')
    tu = ef(b, b.expr_deref(x_post_inc))
    assert tu.emit_to_string() == pat('*x++;')
    tu = ef(b, b.expr_unary_plus(x_post_inc))
    assert tu.emit_to_string() == pat('+x++;')
    tu = ef(b, b.expr_unary_minus(x_post_inc))
    assert tu.emit_to_string() == pat('-x++;')
    tu = ef(b, b.expr_bitwise_not(x_post_inc))
    assert tu.emit_to_string() == pat('~x++;')
    tu = ef(b, b.expr_logical_not(x_post_inc))
    assert tu.emit_to_string() == pat('!x++;')
    tu = ef(b, b.expr_sizeof_expr(x_post_inc))
    assert tu.emit_to_string() == pat('sizeof(x++);')
    tu = ef(b, b.expr_cast(tv, x_post_inc))
    assert tu.emit_to_string() == pat('(V)x++;')
    tu = ef(b, b.expr_times(x_post_inc, xa))
    assert tu.emit_to_string() == pat('x++ * a;')
    tu = ef(b, b.expr_divide(x_post_inc, xa))
    assert tu.emit_to_string() == pat('x++ / a;')
    tu = ef(b, b.expr_modulus(x_post_inc, xa))
    assert tu.emit_to_string() == pat('x++ % a;')
    tu = ef(b, b.expr_plus(x_post_inc, xa))
    assert tu.emit_to_string() == pat('x++ + a;')
    tu = ef(b, b.expr_minus(x_post_inc, xa))
    assert tu.emit_to_string() == pat('x++ - a;')
    tu = ef(b, b.expr_lshift(x_post_inc, xa))
    assert tu.emit_to_string() == pat('x++ << a;')
    tu = ef(b, b.expr_rshift(x_post_inc, xa))
    assert tu.emit_to_string() == pat('x++ >> a;')
    tu = ef(b, b.expr_cmp_lt(x_post_inc, xa))
    assert tu.emit_to_string() == pat('x++ < a;')
    tu = ef(b, b.expr_cmp_gt(x_post_inc, xa))
    assert tu.emit_to_string() == pat('x++ > a;')
    tu = ef(b, b.expr_cmp_le(x_post_inc, xa))
    assert tu.emit_to_string() == pat('x++ <= a;')
    tu = ef(b, b.expr_cmp_ge(x_post_inc, xa))
    assert tu.emit_to_string() == pat('x++ >= a;')
    tu = ef(b, b.expr_cmp_eq(x_post_inc, xa))
    assert tu.emit_to_string() == pat('x++ == a;')
    tu = ef(b, b.expr_cmp_ne(x_post_inc, xa))
    assert tu.emit_to_string() == pat('x++ != a;')
    tu = ef(b, b.expr_bitwise_and(x_post_inc, xa))
    assert tu.emit_to_string() == pat('x++ & a;')
    tu = ef(b, b.expr_bitwise_xor(x_post_inc, xa))
    assert tu.emit_to_string() == pat('x++ ^ a;')
    tu = ef(b, b.expr_bitwise_or(x_post_inc, xa))
    assert tu.emit_to_string() == pat('x++ | a;')
    tu = ef(b, b.expr_logical_and(x_post_inc, xa))
    assert tu.emit_to_string() == pat('x++ && a;')
    tu = ef(b, b.expr_logical_or(x_post_inc, xa))
    assert tu.emit_to_string() == pat('x++ || a;')
    tu = ef(b, b.expr_conditional(x_post_inc, xa, xb))
    assert tu.emit_to_string() == pat('x++ ? a : b;')
    tu = ef(b, b.expr_assign(x_post_inc, xa))
    assert tu.emit_to_string() == pat('x++ = a;')
    tu = ef(b, b.expr_assign_times(x_post_inc, xa))
    assert tu.emit_to_string() == pat('x++ *= a;')
    tu = ef(b, b.expr_assign_divide(x_post_inc, xa))
    assert tu.emit_to_string() == pat('x++ /= a;')
    tu = ef(b, b.expr_assign_modulus(x_post_inc, xa))
    assert tu.emit_to_string() == pat('x++ %= a;')
    tu = ef(b, b.expr_assign_plus(x_post_inc, xa))
    assert tu.emit_to_string() == pat('x++ += a;')
    tu = ef(b, b.expr_assign_minus(x_post_inc, xa))
    assert tu.emit_to_string() == pat('x++ -= a;')
    tu = ef(b, b.expr_assign_lshift(x_post_inc, xa))
    assert tu.emit_to_string() == pat('x++ <<= a;')
    tu = ef(b, b.expr_assign_rshift(x_post_inc, xa))
    assert tu.emit_to_string() == pat('x++ >>= a;')
    tu = ef(b, b.expr_assign_bitwise_and(x_post_inc, xa))
    assert tu.emit_to_string() == pat('x++ &= a;')
    tu = ef(b, b.expr_assign_bitwise_xor(x_post_inc, xa))
    assert tu.emit_to_string() == pat('x++ ^= a;')
    tu = ef(b, b.expr_assign_bitwise_or(x_post_inc, xa))
    assert tu.emit_to_string() == pat('x++ |= a;')
    tu = ef(b, b.expr_comma(x_post_inc, xa))
    assert tu.emit_to_string() == pat('x++, a;')
    tu = ef(b, b.expr_index(xa, x_post_inc))
    assert tu.emit_to_string() == pat('a[x++];')
    tu = ef(b, b.expr_call(xa, [x_post_inc]))
    assert tu.emit_to_string() == pat('a(x++);')
    tu = ef(b, b.expr_times(xa, x_post_inc))
    assert tu.emit_to_string() == pat('a * x++;')
    tu = ef(b, b.expr_divide(xa, x_post_inc))
    assert tu.emit_to_string() == pat('a / x++;')
    tu = ef(b, b.expr_modulus(xa, x_post_inc))
    assert tu.emit_to_string() == pat('a % x++;')
    tu = ef(b, b.expr_plus(xa, x_post_inc))
    assert tu.emit_to_string() == pat('a + x++;')
    tu = ef(b, b.expr_minus(xa, x_post_inc))
    assert tu.emit_to_string() == pat('a - x++;')
    tu = ef(b, b.expr_lshift(xa, x_post_inc))
    assert tu.emit_to_string() == pat('a << x++;')
    tu = ef(b, b.expr_rshift(xa, x_post_inc))
    assert tu.emit_to_string() == pat('a >> x++;')
    tu = ef(b, b.expr_cmp_lt(xa, x_post_inc))
    assert tu.emit_to_string() == pat('a < x++;')
    tu = ef(b, b.expr_cmp_gt(xa, x_post_inc))
    assert tu.emit_to_string() == pat('a > x++;')
    tu = ef(b, b.expr_cmp_le(xa, x_post_inc))
    assert tu.emit_to_string() == pat('a <= x++;')
    tu = ef(b, b.expr_cmp_ge(xa, x_post_inc))
    assert tu.emit_to_string() == pat('a >= x++;')
    tu = ef(b, b.expr_cmp_eq(xa, x_post_inc))
    assert tu.emit_to_string() == pat('a == x++;')
    tu = ef(b, b.expr_cmp_ne(xa, x_post_inc))
    assert tu.emit_to_string() == pat('a != x++;')
    tu = ef(b, b.expr_bitwise_and(xa, x_post_inc))
    assert tu.emit_to_string() == pat('a & x++;')
    tu = ef(b, b.expr_bitwise_xor(xa, x_post_inc))
    assert tu.emit_to_string() == pat('a ^ x++;')
    tu = ef(b, b.expr_bitwise_or(xa, x_post_inc))
    assert tu.emit_to_string() == pat('a | x++;')
    tu = ef(b, b.expr_logical_and(xa, x_post_inc))
    assert tu.emit_to_string() == pat('a && x++;')
    tu = ef(b, b.expr_logical_or(xa, x_post_inc))
    assert tu.emit_to_string() == pat('a || x++;')
    tu = ef(b, b.expr_conditional(xa, x_post_inc, xb))
    assert tu.emit_to_string() == pat('a ? x++ : b;')
    tu = ef(b, b.expr_assign(xa, x_post_inc))
    assert tu.emit_to_string() == pat('a = x++;')
    tu = ef(b, b.expr_assign_times(xa, x_post_inc))
    assert tu.emit_to_string() == pat('a *= x++;')
    tu = ef(b, b.expr_assign_divide(xa, x_post_inc))
    assert tu.emit_to_string() == pat('a /= x++;')
    tu = ef(b, b.expr_assign_modulus(xa, x_post_inc))
    assert tu.emit_to_string() == pat('a %= x++;')
    tu = ef(b, b.expr_assign_plus(xa, x_post_inc))
    assert tu.emit_to_string() == pat('a += x++;')
    tu = ef(b, b.expr_assign_minus(xa, x_post_inc))
    assert tu.emit_to_string() == pat('a -= x++;')
    tu = ef(b, b.expr_assign_lshift(xa, x_post_inc))
    assert tu.emit_to_string() == pat('a <<= x++;')
    tu = ef(b, b.expr_assign_rshift(xa, x_post_inc))
    assert tu.emit_to_string() == pat('a >>= x++;')
    tu = ef(b, b.expr_assign_bitwise_and(xa, x_post_inc))
    assert tu.emit_to_string() == pat('a &= x++;')
    tu = ef(b, b.expr_assign_bitwise_xor(xa, x_post_inc))
    assert tu.emit_to_string() == pat('a ^= x++;')
    tu = ef(b, b.expr_assign_bitwise_or(xa, x_post_inc))
    assert tu.emit_to_string() == pat('a |= x++;')
    tu = ef(b, b.expr_comma(xa, x_post_inc))
    assert tu.emit_to_string() == pat('a, x++;')
    tu = ef(b, b.expr_conditional(xa, xb, x_post_inc))
    assert tu.emit_to_string() == pat('a ? b : x++;')

    tu = ef(b, b.expr_index(x_post_dec, xa))
    assert tu.emit_to_string() == pat('x--[a];')
    tu = ef(b, b.expr_call(x_post_dec, [xa]))
    assert tu.emit_to_string() == pat('x--(a);')
    tu = ef(b, b.expr_direct_member(x_post_dec, 'f'))
    assert tu.emit_to_string() == pat('x--.f;')
    tu = ef(b, b.expr_indirect_member(x_post_dec, 'g'))
    assert tu.emit_to_string() == pat('x--->g;')
    tu = ef(b, b.expr_post_inc(x_post_dec))
    assert tu.emit_to_string() == pat('x--++;')
    tu = ef(b, b.expr_post_dec(x_post_dec))
    assert tu.emit_to_string() == pat('x----;')
    tu = ef(b, b.expr_pre_inc(x_post_dec))
    assert tu.emit_to_string() == pat('++x--;')
    tu = ef(b, b.expr_pre_dec(x_post_dec))
    assert tu.emit_to_string() == pat('--x--;')
    tu = ef(b, b.expr_addressof(x_post_dec))
    assert tu.emit_to_string() == pat('&x--;')
    tu = ef(b, b.expr_deref(x_post_dec))
    assert tu.emit_to_string() == pat('*x--;')
    tu = ef(b, b.expr_unary_plus(x_post_dec))
    assert tu.emit_to_string() == pat('+x--;')
    tu = ef(b, b.expr_unary_minus(x_post_dec))
    assert tu.emit_to_string() == pat('-x--;')
    tu = ef(b, b.expr_bitwise_not(x_post_dec))
    assert tu.emit_to_string() == pat('~x--;')
    tu = ef(b, b.expr_logical_not(x_post_dec))
    assert tu.emit_to_string() == pat('!x--;')
    tu = ef(b, b.expr_sizeof_expr(x_post_dec))
    assert tu.emit_to_string() == pat('sizeof(x--);')
    tu = ef(b, b.expr_cast(tv, x_post_dec))
    assert tu.emit_to_string() == pat('(V)x--;')
    tu = ef(b, b.expr_times(x_post_dec, xa))
    assert tu.emit_to_string() == pat('x-- * a;')
    tu = ef(b, b.expr_divide(x_post_dec, xa))
    assert tu.emit_to_string() == pat('x-- / a;')
    tu = ef(b, b.expr_modulus(x_post_dec, xa))
    assert tu.emit_to_string() == pat('x-- % a;')
    tu = ef(b, b.expr_plus(x_post_dec, xa))
    assert tu.emit_to_string() == pat('x-- + a;')
    tu = ef(b, b.expr_minus(x_post_dec, xa))
    assert tu.emit_to_string() == pat('x-- - a;')
    tu = ef(b, b.expr_lshift(x_post_dec, xa))
    assert tu.emit_to_string() == pat('x-- << a;')
    tu = ef(b, b.expr_rshift(x_post_dec, xa))
    assert tu.emit_to_string() == pat('x-- >> a;')
    tu = ef(b, b.expr_cmp_lt(x_post_dec, xa))
    assert tu.emit_to_string() == pat('x-- < a;')
    tu = ef(b, b.expr_cmp_gt(x_post_dec, xa))
    assert tu.emit_to_string() == pat('x-- > a;')
    tu = ef(b, b.expr_cmp_le(x_post_dec, xa))
    assert tu.emit_to_string() == pat('x-- <= a;')
    tu = ef(b, b.expr_cmp_ge(x_post_dec, xa))
    assert tu.emit_to_string() == pat('x-- >= a;')
    tu = ef(b, b.expr_cmp_eq(x_post_dec, xa))
    assert tu.emit_to_string() == pat('x-- == a;')
    tu = ef(b, b.expr_cmp_ne(x_post_dec, xa))
    assert tu.emit_to_string() == pat('x-- != a;')
    tu = ef(b, b.expr_bitwise_and(x_post_dec, xa))
    assert tu.emit_to_string() == pat('x-- & a;')
    tu = ef(b, b.expr_bitwise_xor(x_post_dec, xa))
    assert tu.emit_to_string() == pat('x-- ^ a;')
    tu = ef(b, b.expr_bitwise_or(x_post_dec, xa))
    assert tu.emit_to_string() == pat('x-- | a;')
    tu = ef(b, b.expr_logical_and(x_post_dec, xa))
    assert tu.emit_to_string() == pat('x-- && a;')
    tu = ef(b, b.expr_logical_or(x_post_dec, xa))
    assert tu.emit_to_string() == pat('x-- || a;')
    tu = ef(b, b.expr_conditional(x_post_dec, xa, xb))
    assert tu.emit_to_string() == pat('x-- ? a : b;')
    tu = ef(b, b.expr_assign(x_post_dec, xa))
    assert tu.emit_to_string() == pat('x-- = a;')
    tu = ef(b, b.expr_assign_times(x_post_dec, xa))
    assert tu.emit_to_string() == pat('x-- *= a;')
    tu = ef(b, b.expr_assign_divide(x_post_dec, xa))
    assert tu.emit_to_string() == pat('x-- /= a;')
    tu = ef(b, b.expr_assign_modulus(x_post_dec, xa))
    assert tu.emit_to_string() == pat('x-- %= a;')
    tu = ef(b, b.expr_assign_plus(x_post_dec, xa))
    assert tu.emit_to_string() == pat('x-- += a;')
    tu = ef(b, b.expr_assign_minus(x_post_dec, xa))
    assert tu.emit_to_string() == pat('x-- -= a;')
    tu = ef(b, b.expr_assign_lshift(x_post_dec, xa))
    assert tu.emit_to_string() == pat('x-- <<= a;')
    tu = ef(b, b.expr_assign_rshift(x_post_dec, xa))
    assert tu.emit_to_string() == pat('x-- >>= a;')
    tu = ef(b, b.expr_assign_bitwise_and(x_post_dec, xa))
    assert tu.emit_to_string() == pat('x-- &= a;')
    tu = ef(b, b.expr_assign_bitwise_xor(x_post_dec, xa))
    assert tu.emit_to_string() == pat('x-- ^= a;')
    tu = ef(b, b.expr_assign_bitwise_or(x_post_dec, xa))
    assert tu.emit_to_string() == pat('x-- |= a;')
    tu = ef(b, b.expr_comma(x_post_dec, xa))
    assert tu.emit_to_string() == pat('x--, a;')
    tu = ef(b, b.expr_index(xa, x_post_dec))
    assert tu.emit_to_string() == pat('a[x--];')
    tu = ef(b, b.expr_call(xa, [x_post_dec]))
    assert tu.emit_to_string() == pat('a(x--);')
    tu = ef(b, b.expr_times(xa, x_post_dec))
    assert tu.emit_to_string() == pat('a * x--;')
    tu = ef(b, b.expr_divide(xa, x_post_dec))
    assert tu.emit_to_string() == pat('a / x--;')
    tu = ef(b, b.expr_modulus(xa, x_post_dec))
    assert tu.emit_to_string() == pat('a % x--;')
    tu = ef(b, b.expr_plus(xa, x_post_dec))
    assert tu.emit_to_string() == pat('a + x--;')
    tu = ef(b, b.expr_minus(xa, x_post_dec))
    assert tu.emit_to_string() == pat('a - x--;')
    tu = ef(b, b.expr_lshift(xa, x_post_dec))
    assert tu.emit_to_string() == pat('a << x--;')
    tu = ef(b, b.expr_rshift(xa, x_post_dec))
    assert tu.emit_to_string() == pat('a >> x--;')
    tu = ef(b, b.expr_cmp_lt(xa, x_post_dec))
    assert tu.emit_to_string() == pat('a < x--;')
    tu = ef(b, b.expr_cmp_gt(xa, x_post_dec))
    assert tu.emit_to_string() == pat('a > x--;')
    tu = ef(b, b.expr_cmp_le(xa, x_post_dec))
    assert tu.emit_to_string() == pat('a <= x--;')
    tu = ef(b, b.expr_cmp_ge(xa, x_post_dec))
    assert tu.emit_to_string() == pat('a >= x--;')
    tu = ef(b, b.expr_cmp_eq(xa, x_post_dec))
    assert tu.emit_to_string() == pat('a == x--;')
    tu = ef(b, b.expr_cmp_ne(xa, x_post_dec))
    assert tu.emit_to_string() == pat('a != x--;')
    tu = ef(b, b.expr_bitwise_and(xa, x_post_dec))
    assert tu.emit_to_string() == pat('a & x--;')
    tu = ef(b, b.expr_bitwise_xor(xa, x_post_dec))
    assert tu.emit_to_string() == pat('a ^ x--;')
    tu = ef(b, b.expr_bitwise_or(xa, x_post_dec))
    assert tu.emit_to_string() == pat('a | x--;')
    tu = ef(b, b.expr_logical_and(xa, x_post_dec))
    assert tu.emit_to_string() == pat('a && x--;')
    tu = ef(b, b.expr_logical_or(xa, x_post_dec))
    assert tu.emit_to_string() == pat('a || x--;')
    tu = ef(b, b.expr_conditional(xa, x_post_dec, xb))
    assert tu.emit_to_string() == pat('a ? x-- : b;')
    tu = ef(b, b.expr_assign(xa, x_post_dec))
    assert tu.emit_to_string() == pat('a = x--;')
    tu = ef(b, b.expr_assign_times(xa, x_post_dec))
    assert tu.emit_to_string() == pat('a *= x--;')
    tu = ef(b, b.expr_assign_divide(xa, x_post_dec))
    assert tu.emit_to_string() == pat('a /= x--;')
    tu = ef(b, b.expr_assign_modulus(xa, x_post_dec))
    assert tu.emit_to_string() == pat('a %= x--;')
    tu = ef(b, b.expr_assign_plus(xa, x_post_dec))
    assert tu.emit_to_string() == pat('a += x--;')
    tu = ef(b, b.expr_assign_minus(xa, x_post_dec))
    assert tu.emit_to_string() == pat('a -= x--;')
    tu = ef(b, b.expr_assign_lshift(xa, x_post_dec))
    assert tu.emit_to_string() == pat('a <<= x--;')
    tu = ef(b, b.expr_assign_rshift(xa, x_post_dec))
    assert tu.emit_to_string() == pat('a >>= x--;')
    tu = ef(b, b.expr_assign_bitwise_and(xa, x_post_dec))
    assert tu.emit_to_string() == pat('a &= x--;')
    tu = ef(b, b.expr_assign_bitwise_xor(xa, x_post_dec))
    assert tu.emit_to_string() == pat('a ^= x--;')
    tu = ef(b, b.expr_assign_bitwise_or(xa, x_post_dec))
    assert tu.emit_to_string() == pat('a |= x--;')
    tu = ef(b, b.expr_comma(xa, x_post_dec))
    assert tu.emit_to_string() == pat('a, x--;')
    tu = ef(b, b.expr_conditional(xa, xb, x_post_dec))
    assert tu.emit_to_string() == pat('a ? b : x--;')

    tu = ef(b, b.expr_index(x_pre_inc, xa))
    assert tu.emit_to_string() == pat('(++x)[a];')
    tu = ef(b, b.expr_call(x_pre_inc, [xa]))
    assert tu.emit_to_string() == pat('(++x)(a);')
    tu = ef(b, b.expr_direct_member(x_pre_inc, 'f'))
    assert tu.emit_to_string() == pat('(++x).f;')
    tu = ef(b, b.expr_indirect_member(x_pre_inc, 'g'))
    assert tu.emit_to_string() == pat('(++x)->g;')
    tu = ef(b, b.expr_post_inc(x_pre_inc))
    assert tu.emit_to_string() == pat('(++x)++;')
    tu = ef(b, b.expr_post_dec(x_pre_inc))
    assert tu.emit_to_string() == pat('(++x)--;')
    tu = ef(b, b.expr_pre_inc(x_pre_inc))
    assert tu.emit_to_string() == pat('++++x;')
    tu = ef(b, b.expr_pre_dec(x_pre_inc))
    assert tu.emit_to_string() == pat('--++x;')
    tu = ef(b, b.expr_addressof(x_pre_inc))
    assert tu.emit_to_string() == pat('&++x;')
    tu = ef(b, b.expr_deref(x_pre_inc))
    assert tu.emit_to_string() == pat('*++x;')
    tu = ef(b, b.expr_unary_plus(x_pre_inc))
    assert tu.emit_to_string() == pat('+ ++x;')
    tu = ef(b, b.expr_unary_minus(x_pre_inc))
    assert tu.emit_to_string() == pat('-++x;')
    tu = ef(b, b.expr_bitwise_not(x_pre_inc))
    assert tu.emit_to_string() == pat('~++x;')
    tu = ef(b, b.expr_logical_not(x_pre_inc))
    assert tu.emit_to_string() == pat('!++x;')
    tu = ef(b, b.expr_sizeof_expr(x_pre_inc))
    assert tu.emit_to_string() == pat('sizeof(++x);')
    tu = ef(b, b.expr_cast(tv, x_pre_inc))
    assert tu.emit_to_string() == pat('(V)++x;')
    tu = ef(b, b.expr_times(x_pre_inc, xa))
    assert tu.emit_to_string() == pat('++x * a;')
    tu = ef(b, b.expr_divide(x_pre_inc, xa))
    assert tu.emit_to_string() == pat('++x / a;')
    tu = ef(b, b.expr_modulus(x_pre_inc, xa))
    assert tu.emit_to_string() == pat('++x % a;')
    tu = ef(b, b.expr_plus(x_pre_inc, xa))
    assert tu.emit_to_string() == pat('++x + a;')
    tu = ef(b, b.expr_minus(x_pre_inc, xa))
    assert tu.emit_to_string() == pat('++x - a;')
    tu = ef(b, b.expr_lshift(x_pre_inc, xa))
    assert tu.emit_to_string() == pat('++x << a;')
    tu = ef(b, b.expr_rshift(x_pre_inc, xa))
    assert tu.emit_to_string() == pat('++x >> a;')
    tu = ef(b, b.expr_cmp_lt(x_pre_inc, xa))
    assert tu.emit_to_string() == pat('++x < a;')
    tu = ef(b, b.expr_cmp_gt(x_pre_inc, xa))
    assert tu.emit_to_string() == pat('++x > a;')
    tu = ef(b, b.expr_cmp_le(x_pre_inc, xa))
    assert tu.emit_to_string() == pat('++x <= a;')
    tu = ef(b, b.expr_cmp_ge(x_pre_inc, xa))
    assert tu.emit_to_string() == pat('++x >= a;')
    tu = ef(b, b.expr_cmp_eq(x_pre_inc, xa))
    assert tu.emit_to_string() == pat('++x == a;')
    tu = ef(b, b.expr_cmp_ne(x_pre_inc, xa))
    assert tu.emit_to_string() == pat('++x != a;')
    tu = ef(b, b.expr_bitwise_and(x_pre_inc, xa))
    assert tu.emit_to_string() == pat('++x & a;')
    tu = ef(b, b.expr_bitwise_xor(x_pre_inc, xa))
    assert tu.emit_to_string() == pat('++x ^ a;')
    tu = ef(b, b.expr_bitwise_or(x_pre_inc, xa))
    assert tu.emit_to_string() == pat('++x | a;')
    tu = ef(b, b.expr_logical_and(x_pre_inc, xa))
    assert tu.emit_to_string() == pat('++x && a;')
    tu = ef(b, b.expr_logical_or(x_pre_inc, xa))
    assert tu.emit_to_string() == pat('++x || a;')
    tu = ef(b, b.expr_conditional(x_pre_inc, xa, xb))
    assert tu.emit_to_string() == pat('++x ? a : b;')
    tu = ef(b, b.expr_assign(x_pre_inc, xa))
    assert tu.emit_to_string() == pat('++x = a;')
    tu = ef(b, b.expr_assign_times(x_pre_inc, xa))
    assert tu.emit_to_string() == pat('++x *= a;')
    tu = ef(b, b.expr_assign_divide(x_pre_inc, xa))
    assert tu.emit_to_string() == pat('++x /= a;')
    tu = ef(b, b.expr_assign_modulus(x_pre_inc, xa))
    assert tu.emit_to_string() == pat('++x %= a;')
    tu = ef(b, b.expr_assign_plus(x_pre_inc, xa))
    assert tu.emit_to_string() == pat('++x += a;')
    tu = ef(b, b.expr_assign_minus(x_pre_inc, xa))
    assert tu.emit_to_string() == pat('++x -= a;')
    tu = ef(b, b.expr_assign_lshift(x_pre_inc, xa))
    assert tu.emit_to_string() == pat('++x <<= a;')
    tu = ef(b, b.expr_assign_rshift(x_pre_inc, xa))
    assert tu.emit_to_string() == pat('++x >>= a;')
    tu = ef(b, b.expr_assign_bitwise_and(x_pre_inc, xa))
    assert tu.emit_to_string() == pat('++x &= a;')
    tu = ef(b, b.expr_assign_bitwise_xor(x_pre_inc, xa))
    assert tu.emit_to_string() == pat('++x ^= a;')
    tu = ef(b, b.expr_assign_bitwise_or(x_pre_inc, xa))
    assert tu.emit_to_string() == pat('++x |= a;')
    tu = ef(b, b.expr_comma(x_pre_inc, xa))
    assert tu.emit_to_string() == pat('++x, a;')
    tu = ef(b, b.expr_index(xa, x_pre_inc))
    assert tu.emit_to_string() == pat('a[++x];')
    tu = ef(b, b.expr_call(xa, [x_pre_inc]))
    assert tu.emit_to_string() == pat('a(++x);')
    tu = ef(b, b.expr_times(xa, x_pre_inc))
    assert tu.emit_to_string() == pat('a * ++x;')
    tu = ef(b, b.expr_divide(xa, x_pre_inc))
    assert tu.emit_to_string() == pat('a / ++x;')
    tu = ef(b, b.expr_modulus(xa, x_pre_inc))
    assert tu.emit_to_string() == pat('a % ++x;')
    tu = ef(b, b.expr_plus(xa, x_pre_inc))
    assert tu.emit_to_string() == pat('a + ++x;')
    tu = ef(b, b.expr_minus(xa, x_pre_inc))
    assert tu.emit_to_string() == pat('a - ++x;')
    tu = ef(b, b.expr_lshift(xa, x_pre_inc))
    assert tu.emit_to_string() == pat('a << ++x;')
    tu = ef(b, b.expr_rshift(xa, x_pre_inc))
    assert tu.emit_to_string() == pat('a >> ++x;')
    tu = ef(b, b.expr_cmp_lt(xa, x_pre_inc))
    assert tu.emit_to_string() == pat('a < ++x;')
    tu = ef(b, b.expr_cmp_gt(xa, x_pre_inc))
    assert tu.emit_to_string() == pat('a > ++x;')
    tu = ef(b, b.expr_cmp_le(xa, x_pre_inc))
    assert tu.emit_to_string() == pat('a <= ++x;')
    tu = ef(b, b.expr_cmp_ge(xa, x_pre_inc))
    assert tu.emit_to_string() == pat('a >= ++x;')
    tu = ef(b, b.expr_cmp_eq(xa, x_pre_inc))
    assert tu.emit_to_string() == pat('a == ++x;')
    tu = ef(b, b.expr_cmp_ne(xa, x_pre_inc))
    assert tu.emit_to_string() == pat('a != ++x;')
    tu = ef(b, b.expr_bitwise_and(xa, x_pre_inc))
    assert tu.emit_to_string() == pat('a & ++x;')
    tu = ef(b, b.expr_bitwise_xor(xa, x_pre_inc))
    assert tu.emit_to_string() == pat('a ^ ++x;')
    tu = ef(b, b.expr_bitwise_or(xa, x_pre_inc))
    assert tu.emit_to_string() == pat('a | ++x;')
    tu = ef(b, b.expr_logical_and(xa, x_pre_inc))
    assert tu.emit_to_string() == pat('a && ++x;')
    tu = ef(b, b.expr_logical_or(xa, x_pre_inc))
    assert tu.emit_to_string() == pat('a || ++x;')
    tu = ef(b, b.expr_conditional(xa, x_pre_inc, xb))
    assert tu.emit_to_string() == pat('a ? ++x : b;')
    tu = ef(b, b.expr_assign(xa, x_pre_inc))
    assert tu.emit_to_string() == pat('a = ++x;')
    tu = ef(b, b.expr_assign_times(xa, x_pre_inc))
    assert tu.emit_to_string() == pat('a *= ++x;')
    tu = ef(b, b.expr_assign_divide(xa, x_pre_inc))
    assert tu.emit_to_string() == pat('a /= ++x;')
    tu = ef(b, b.expr_assign_modulus(xa, x_pre_inc))
    assert tu.emit_to_string() == pat('a %= ++x;')
    tu = ef(b, b.expr_assign_plus(xa, x_pre_inc))
    assert tu.emit_to_string() == pat('a += ++x;')
    tu = ef(b, b.expr_assign_minus(xa, x_pre_inc))
    assert tu.emit_to_string() == pat('a -= ++x;')
    tu = ef(b, b.expr_assign_lshift(xa, x_pre_inc))
    assert tu.emit_to_string() == pat('a <<= ++x;')
    tu = ef(b, b.expr_assign_rshift(xa, x_pre_inc))
    assert tu.emit_to_string() == pat('a >>= ++x;')
    tu = ef(b, b.expr_assign_bitwise_and(xa, x_pre_inc))
    assert tu.emit_to_string() == pat('a &= ++x;')
    tu = ef(b, b.expr_assign_bitwise_xor(xa, x_pre_inc))
    assert tu.emit_to_string() == pat('a ^= ++x;')
    tu = ef(b, b.expr_assign_bitwise_or(xa, x_pre_inc))
    assert tu.emit_to_string() == pat('a |= ++x;')
    tu = ef(b, b.expr_comma(xa, x_pre_inc))
    assert tu.emit_to_string() == pat('a, ++x;')
    tu = ef(b, b.expr_conditional(xa, xb, x_pre_inc))
    assert tu.emit_to_string() == pat('a ? b : ++x;')

    tu = ef(b, b.expr_index(x_pre_dec, xa))
    assert tu.emit_to_string() == pat('(--x)[a];')
    tu = ef(b, b.expr_call(x_pre_dec, [xa]))
    assert tu.emit_to_string() == pat('(--x)(a);')
    tu = ef(b, b.expr_direct_member(x_pre_dec, 'f'))
    assert tu.emit_to_string() == pat('(--x).f;')
    tu = ef(b, b.expr_indirect_member(x_pre_dec, 'g'))
    assert tu.emit_to_string() == pat('(--x)->g;')
    tu = ef(b, b.expr_post_inc(x_pre_dec))
    assert tu.emit_to_string() == pat('(--x)++;')
    tu = ef(b, b.expr_post_dec(x_pre_dec))
    assert tu.emit_to_string() == pat('(--x)--;')
    tu = ef(b, b.expr_pre_inc(x_pre_dec))
    assert tu.emit_to_string() == pat('++--x;')
    tu = ef(b, b.expr_pre_dec(x_pre_dec))
    assert tu.emit_to_string() == pat('----x;')
    tu = ef(b, b.expr_addressof(x_pre_dec))
    assert tu.emit_to_string() == pat('&--x;')
    tu = ef(b, b.expr_deref(x_pre_dec))
    assert tu.emit_to_string() == pat('*--x;')
    tu = ef(b, b.expr_unary_plus(x_pre_dec))
    assert tu.emit_to_string() == pat('+--x;')
    tu = ef(b, b.expr_unary_minus(x_pre_dec))
    assert tu.emit_to_string() == pat('- --x;')
    tu = ef(b, b.expr_bitwise_not(x_pre_dec))
    assert tu.emit_to_string() == pat('~--x;')
    tu = ef(b, b.expr_logical_not(x_pre_dec))
    assert tu.emit_to_string() == pat('!--x;')
    tu = ef(b, b.expr_sizeof_expr(x_pre_dec))
    assert tu.emit_to_string() == pat('sizeof(--x);')
    tu = ef(b, b.expr_cast(tv, x_pre_dec))
    assert tu.emit_to_string() == pat('(V)--x;')
    tu = ef(b, b.expr_times(x_pre_dec, xa))
    assert tu.emit_to_string() == pat('--x * a;')
    tu = ef(b, b.expr_divide(x_pre_dec, xa))
    assert tu.emit_to_string() == pat('--x / a;')
    tu = ef(b, b.expr_modulus(x_pre_dec, xa))
    assert tu.emit_to_string() == pat('--x % a;')
    tu = ef(b, b.expr_plus(x_pre_dec, xa))
    assert tu.emit_to_string() == pat('--x + a;')
    tu = ef(b, b.expr_minus(x_pre_dec, xa))
    assert tu.emit_to_string() == pat('--x - a;')
    tu = ef(b, b.expr_lshift(x_pre_dec, xa))
    assert tu.emit_to_string() == pat('--x << a;')
    tu = ef(b, b.expr_rshift(x_pre_dec, xa))
    assert tu.emit_to_string() == pat('--x >> a;')
    tu = ef(b, b.expr_cmp_lt(x_pre_dec, xa))
    assert tu.emit_to_string() == pat('--x < a;')
    tu = ef(b, b.expr_cmp_gt(x_pre_dec, xa))
    assert tu.emit_to_string() == pat('--x > a;')
    tu = ef(b, b.expr_cmp_le(x_pre_dec, xa))
    assert tu.emit_to_string() == pat('--x <= a;')
    tu = ef(b, b.expr_cmp_ge(x_pre_dec, xa))
    assert tu.emit_to_string() == pat('--x >= a;')
    tu = ef(b, b.expr_cmp_eq(x_pre_dec, xa))
    assert tu.emit_to_string() == pat('--x == a;')
    tu = ef(b, b.expr_cmp_ne(x_pre_dec, xa))
    assert tu.emit_to_string() == pat('--x != a;')
    tu = ef(b, b.expr_bitwise_and(x_pre_dec, xa))
    assert tu.emit_to_string() == pat('--x & a;')
    tu = ef(b, b.expr_bitwise_xor(x_pre_dec, xa))
    assert tu.emit_to_string() == pat('--x ^ a;')
    tu = ef(b, b.expr_bitwise_or(x_pre_dec, xa))
    assert tu.emit_to_string() == pat('--x | a;')
    tu = ef(b, b.expr_logical_and(x_pre_dec, xa))
    assert tu.emit_to_string() == pat('--x && a;')
    tu = ef(b, b.expr_logical_or(x_pre_dec, xa))
    assert tu.emit_to_string() == pat('--x || a;')
    tu = ef(b, b.expr_conditional(x_pre_dec, xa, xb))
    assert tu.emit_to_string() == pat('--x ? a : b;')
    tu = ef(b, b.expr_assign(x_pre_dec, xa))
    assert tu.emit_to_string() == pat('--x = a;')
    tu = ef(b, b.expr_assign_times(x_pre_dec, xa))
    assert tu.emit_to_string() == pat('--x *= a;')
    tu = ef(b, b.expr_assign_divide(x_pre_dec, xa))
    assert tu.emit_to_string() == pat('--x /= a;')
    tu = ef(b, b.expr_assign_modulus(x_pre_dec, xa))
    assert tu.emit_to_string() == pat('--x %= a;')
    tu = ef(b, b.expr_assign_plus(x_pre_dec, xa))
    assert tu.emit_to_string() == pat('--x += a;')
    tu = ef(b, b.expr_assign_minus(x_pre_dec, xa))
    assert tu.emit_to_string() == pat('--x -= a;')
    tu = ef(b, b.expr_assign_lshift(x_pre_dec, xa))
    assert tu.emit_to_string() == pat('--x <<= a;')
    tu = ef(b, b.expr_assign_rshift(x_pre_dec, xa))
    assert tu.emit_to_string() == pat('--x >>= a;')
    tu = ef(b, b.expr_assign_bitwise_and(x_pre_dec, xa))
    assert tu.emit_to_string() == pat('--x &= a;')
    tu = ef(b, b.expr_assign_bitwise_xor(x_pre_dec, xa))
    assert tu.emit_to_string() == pat('--x ^= a;')
    tu = ef(b, b.expr_assign_bitwise_or(x_pre_dec, xa))
    assert tu.emit_to_string() == pat('--x |= a;')
    tu = ef(b, b.expr_comma(x_pre_dec, xa))
    assert tu.emit_to_string() == pat('--x, a;')
    tu = ef(b, b.expr_index(xa, x_pre_dec))
    assert tu.emit_to_string() == pat('a[--x];')
    tu = ef(b, b.expr_call(xa, [x_pre_dec]))
    assert tu.emit_to_string() == pat('a(--x);')
    tu = ef(b, b.expr_times(xa, x_pre_dec))
    assert tu.emit_to_string() == pat('a * --x;')
    tu = ef(b, b.expr_divide(xa, x_pre_dec))
    assert tu.emit_to_string() == pat('a / --x;')
    tu = ef(b, b.expr_modulus(xa, x_pre_dec))
    assert tu.emit_to_string() == pat('a % --x;')
    tu = ef(b, b.expr_plus(xa, x_pre_dec))
    assert tu.emit_to_string() == pat('a + --x;')
    tu = ef(b, b.expr_minus(xa, x_pre_dec))
    assert tu.emit_to_string() == pat('a - --x;')
    tu = ef(b, b.expr_lshift(xa, x_pre_dec))
    assert tu.emit_to_string() == pat('a << --x;')
    tu = ef(b, b.expr_rshift(xa, x_pre_dec))
    assert tu.emit_to_string() == pat('a >> --x;')
    tu = ef(b, b.expr_cmp_lt(xa, x_pre_dec))
    assert tu.emit_to_string() == pat('a < --x;')
    tu = ef(b, b.expr_cmp_gt(xa, x_pre_dec))
    assert tu.emit_to_string() == pat('a > --x;')
    tu = ef(b, b.expr_cmp_le(xa, x_pre_dec))
    assert tu.emit_to_string() == pat('a <= --x;')
    tu = ef(b, b.expr_cmp_ge(xa, x_pre_dec))
    assert tu.emit_to_string() == pat('a >= --x;')
    tu = ef(b, b.expr_cmp_eq(xa, x_pre_dec))
    assert tu.emit_to_string() == pat('a == --x;')
    tu = ef(b, b.expr_cmp_ne(xa, x_pre_dec))
    assert tu.emit_to_string() == pat('a != --x;')
    tu = ef(b, b.expr_bitwise_and(xa, x_pre_dec))
    assert tu.emit_to_string() == pat('a & --x;')
    tu = ef(b, b.expr_bitwise_xor(xa, x_pre_dec))
    assert tu.emit_to_string() == pat('a ^ --x;')
    tu = ef(b, b.expr_bitwise_or(xa, x_pre_dec))
    assert tu.emit_to_string() == pat('a | --x;')
    tu = ef(b, b.expr_logical_and(xa, x_pre_dec))
    assert tu.emit_to_string() == pat('a && --x;')
    tu = ef(b, b.expr_logical_or(xa, x_pre_dec))
    assert tu.emit_to_string() == pat('a || --x;')
    tu = ef(b, b.expr_conditional(xa, x_pre_dec, xb))
    assert tu.emit_to_string() == pat('a ? --x : b;')
    tu = ef(b, b.expr_assign(xa, x_pre_dec))
    assert tu.emit_to_string() == pat('a = --x;')
    tu = ef(b, b.expr_assign_times(xa, x_pre_dec))
    assert tu.emit_to_string() == pat('a *= --x;')
    tu = ef(b, b.expr_assign_divide(xa, x_pre_dec))
    assert tu.emit_to_string() == pat('a /= --x;')
    tu = ef(b, b.expr_assign_modulus(xa, x_pre_dec))
    assert tu.emit_to_string() == pat('a %= --x;')
    tu = ef(b, b.expr_assign_plus(xa, x_pre_dec))
    assert tu.emit_to_string() == pat('a += --x;')
    tu = ef(b, b.expr_assign_minus(xa, x_pre_dec))
    assert tu.emit_to_string() == pat('a -= --x;')
    tu = ef(b, b.expr_assign_lshift(xa, x_pre_dec))
    assert tu.emit_to_string() == pat('a <<= --x;')
    tu = ef(b, b.expr_assign_rshift(xa, x_pre_dec))
    assert tu.emit_to_string() == pat('a >>= --x;')
    tu = ef(b, b.expr_assign_bitwise_and(xa, x_pre_dec))
    assert tu.emit_to_string() == pat('a &= --x;')
    tu = ef(b, b.expr_assign_bitwise_xor(xa, x_pre_dec))
    assert tu.emit_to_string() == pat('a ^= --x;')
    tu = ef(b, b.expr_assign_bitwise_or(xa, x_pre_dec))
    assert tu.emit_to_string() == pat('a |= --x;')
    tu = ef(b, b.expr_comma(xa, x_pre_dec))
    assert tu.emit_to_string() == pat('a, --x;')
    tu = ef(b, b.expr_conditional(xa, xb, x_pre_dec))
    assert tu.emit_to_string() == pat('a ? b : --x;')

    tu = ef(b, b.expr_index(x_addressof, xa))
    assert tu.emit_to_string() == pat('(&x)[a];')
    tu = ef(b, b.expr_call(x_addressof, [xa]))
    assert tu.emit_to_string() == pat('(&x)(a);')
    tu = ef(b, b.expr_direct_member(x_addressof, 'f'))
    assert tu.emit_to_string() == pat('(&x).f;')
    tu = ef(b, b.expr_indirect_member(x_addressof, 'g'))
    assert tu.emit_to_string() == pat('(&x)->g;')
    tu = ef(b, b.expr_post_inc(x_addressof))
    assert tu.emit_to_string() == pat('(&x)++;')
    tu = ef(b, b.expr_post_dec(x_addressof))
    assert tu.emit_to_string() == pat('(&x)--;')
    tu = ef(b, b.expr_pre_inc(x_addressof))
    assert tu.emit_to_string() == pat('++&x;')
    tu = ef(b, b.expr_pre_dec(x_addressof))
    assert tu.emit_to_string() == pat('--&x;')
    tu = ef(b, b.expr_addressof(x_addressof))
    assert tu.emit_to_string() == pat('& &x;')
    tu = ef(b, b.expr_deref(x_addressof))
    assert tu.emit_to_string() == pat('*&x;')
    tu = ef(b, b.expr_unary_plus(x_addressof))
    assert tu.emit_to_string() == pat('+&x;')
    tu = ef(b, b.expr_unary_minus(x_addressof))
    assert tu.emit_to_string() == pat('-&x;')
    tu = ef(b, b.expr_bitwise_not(x_addressof))
    assert tu.emit_to_string() == pat('~&x;')
    tu = ef(b, b.expr_logical_not(x_addressof))
    assert tu.emit_to_string() == pat('!&x;')
    tu = ef(b, b.expr_sizeof_expr(x_addressof))
    assert tu.emit_to_string() == pat('sizeof(&x);')
    tu = ef(b, b.expr_cast(tv, x_addressof))
    assert tu.emit_to_string() == pat('(V)&x;')
    tu = ef(b, b.expr_times(x_addressof, xa))
    assert tu.emit_to_string() == pat('&x * a;')
    tu = ef(b, b.expr_divide(x_addressof, xa))
    assert tu.emit_to_string() == pat('&x / a;')
    tu = ef(b, b.expr_modulus(x_addressof, xa))
    assert tu.emit_to_string() == pat('&x % a;')
    tu = ef(b, b.expr_plus(x_addressof, xa))
    assert tu.emit_to_string() == pat('&x + a;')
    tu = ef(b, b.expr_minus(x_addressof, xa))
    assert tu.emit_to_string() == pat('&x - a;')
    tu = ef(b, b.expr_lshift(x_addressof, xa))
    assert tu.emit_to_string() == pat('&x << a;')
    tu = ef(b, b.expr_rshift(x_addressof, xa))
    assert tu.emit_to_string() == pat('&x >> a;')
    tu = ef(b, b.expr_cmp_lt(x_addressof, xa))
    assert tu.emit_to_string() == pat('&x < a;')
    tu = ef(b, b.expr_cmp_gt(x_addressof, xa))
    assert tu.emit_to_string() == pat('&x > a;')
    tu = ef(b, b.expr_cmp_le(x_addressof, xa))
    assert tu.emit_to_string() == pat('&x <= a;')
    tu = ef(b, b.expr_cmp_ge(x_addressof, xa))
    assert tu.emit_to_string() == pat('&x >= a;')
    tu = ef(b, b.expr_cmp_eq(x_addressof, xa))
    assert tu.emit_to_string() == pat('&x == a;')
    tu = ef(b, b.expr_cmp_ne(x_addressof, xa))
    assert tu.emit_to_string() == pat('&x != a;')
    tu = ef(b, b.expr_bitwise_and(x_addressof, xa))
    assert tu.emit_to_string() == pat('&x & a;')
    tu = ef(b, b.expr_bitwise_xor(x_addressof, xa))
    assert tu.emit_to_string() == pat('&x ^ a;')
    tu = ef(b, b.expr_bitwise_or(x_addressof, xa))
    assert tu.emit_to_string() == pat('&x | a;')
    tu = ef(b, b.expr_logical_and(x_addressof, xa))
    assert tu.emit_to_string() == pat('&x && a;')
    tu = ef(b, b.expr_logical_or(x_addressof, xa))
    assert tu.emit_to_string() == pat('&x || a;')
    tu = ef(b, b.expr_conditional(x_addressof, xa, xb))
    assert tu.emit_to_string() == pat('&x ? a : b;')
    tu = ef(b, b.expr_assign(x_addressof, xa))
    assert tu.emit_to_string() == pat('&x = a;')
    tu = ef(b, b.expr_assign_times(x_addressof, xa))
    assert tu.emit_to_string() == pat('&x *= a;')
    tu = ef(b, b.expr_assign_divide(x_addressof, xa))
    assert tu.emit_to_string() == pat('&x /= a;')
    tu = ef(b, b.expr_assign_modulus(x_addressof, xa))
    assert tu.emit_to_string() == pat('&x %= a;')
    tu = ef(b, b.expr_assign_plus(x_addressof, xa))
    assert tu.emit_to_string() == pat('&x += a;')
    tu = ef(b, b.expr_assign_minus(x_addressof, xa))
    assert tu.emit_to_string() == pat('&x -= a;')
    tu = ef(b, b.expr_assign_lshift(x_addressof, xa))
    assert tu.emit_to_string() == pat('&x <<= a;')
    tu = ef(b, b.expr_assign_rshift(x_addressof, xa))
    assert tu.emit_to_string() == pat('&x >>= a;')
    tu = ef(b, b.expr_assign_bitwise_and(x_addressof, xa))
    assert tu.emit_to_string() == pat('&x &= a;')
    tu = ef(b, b.expr_assign_bitwise_xor(x_addressof, xa))
    assert tu.emit_to_string() == pat('&x ^= a;')
    tu = ef(b, b.expr_assign_bitwise_or(x_addressof, xa))
    assert tu.emit_to_string() == pat('&x |= a;')
    tu = ef(b, b.expr_comma(x_addressof, xa))
    assert tu.emit_to_string() == pat('&x, a;')
    tu = ef(b, b.expr_index(xa, x_addressof))
    assert tu.emit_to_string() == pat('a[&x];')
    tu = ef(b, b.expr_call(xa, [x_addressof]))
    assert tu.emit_to_string() == pat('a(&x);')
    tu = ef(b, b.expr_times(xa, x_addressof))
    assert tu.emit_to_string() == pat('a * &x;')
    tu = ef(b, b.expr_divide(xa, x_addressof))
    assert tu.emit_to_string() == pat('a / &x;')
    tu = ef(b, b.expr_modulus(xa, x_addressof))
    assert tu.emit_to_string() == pat('a % &x;')
    tu = ef(b, b.expr_plus(xa, x_addressof))
    assert tu.emit_to_string() == pat('a + &x;')
    tu = ef(b, b.expr_minus(xa, x_addressof))
    assert tu.emit_to_string() == pat('a - &x;')
    tu = ef(b, b.expr_lshift(xa, x_addressof))
    assert tu.emit_to_string() == pat('a << &x;')
    tu = ef(b, b.expr_rshift(xa, x_addressof))
    assert tu.emit_to_string() == pat('a >> &x;')
    tu = ef(b, b.expr_cmp_lt(xa, x_addressof))
    assert tu.emit_to_string() == pat('a < &x;')
    tu = ef(b, b.expr_cmp_gt(xa, x_addressof))
    assert tu.emit_to_string() == pat('a > &x;')
    tu = ef(b, b.expr_cmp_le(xa, x_addressof))
    assert tu.emit_to_string() == pat('a <= &x;')
    tu = ef(b, b.expr_cmp_ge(xa, x_addressof))
    assert tu.emit_to_string() == pat('a >= &x;')
    tu = ef(b, b.expr_cmp_eq(xa, x_addressof))
    assert tu.emit_to_string() == pat('a == &x;')
    tu = ef(b, b.expr_cmp_ne(xa, x_addressof))
    assert tu.emit_to_string() == pat('a != &x;')
    tu = ef(b, b.expr_bitwise_and(xa, x_addressof))
    assert tu.emit_to_string() == pat('a & &x;')
    tu = ef(b, b.expr_bitwise_xor(xa, x_addressof))
    assert tu.emit_to_string() == pat('a ^ &x;')
    tu = ef(b, b.expr_bitwise_or(xa, x_addressof))
    assert tu.emit_to_string() == pat('a | &x;')
    tu = ef(b, b.expr_logical_and(xa, x_addressof))
    assert tu.emit_to_string() == pat('a && &x;')
    tu = ef(b, b.expr_logical_or(xa, x_addressof))
    assert tu.emit_to_string() == pat('a || &x;')
    tu = ef(b, b.expr_conditional(xa, x_addressof, xb))
    assert tu.emit_to_string() == pat('a ? &x : b;')
    tu = ef(b, b.expr_assign(xa, x_addressof))
    assert tu.emit_to_string() == pat('a = &x;')
    tu = ef(b, b.expr_assign_times(xa, x_addressof))
    assert tu.emit_to_string() == pat('a *= &x;')
    tu = ef(b, b.expr_assign_divide(xa, x_addressof))
    assert tu.emit_to_string() == pat('a /= &x;')
    tu = ef(b, b.expr_assign_modulus(xa, x_addressof))
    assert tu.emit_to_string() == pat('a %= &x;')
    tu = ef(b, b.expr_assign_plus(xa, x_addressof))
    assert tu.emit_to_string() == pat('a += &x;')
    tu = ef(b, b.expr_assign_minus(xa, x_addressof))
    assert tu.emit_to_string() == pat('a -= &x;')
    tu = ef(b, b.expr_assign_lshift(xa, x_addressof))
    assert tu.emit_to_string() == pat('a <<= &x;')
    tu = ef(b, b.expr_assign_rshift(xa, x_addressof))
    assert tu.emit_to_string() == pat('a >>= &x;')
    tu = ef(b, b.expr_assign_bitwise_and(xa, x_addressof))
    assert tu.emit_to_string() == pat('a &= &x;')
    tu = ef(b, b.expr_assign_bitwise_xor(xa, x_addressof))
    assert tu.emit_to_string() == pat('a ^= &x;')
    tu = ef(b, b.expr_assign_bitwise_or(xa, x_addressof))
    assert tu.emit_to_string() == pat('a |= &x;')
    tu = ef(b, b.expr_comma(xa, x_addressof))
    assert tu.emit_to_string() == pat('a, &x;')
    tu = ef(b, b.expr_conditional(xa, xb, x_addressof))
    assert tu.emit_to_string() == pat('a ? b : &x;')

    tu = ef(b, b.expr_index(x_deref, xa))
    assert tu.emit_to_string() == pat('(*x)[a];')
    tu = ef(b, b.expr_call(x_deref, [xa]))
    assert tu.emit_to_string() == pat('(*x)(a);')
    tu = ef(b, b.expr_direct_member(x_deref, 'f'))
    assert tu.emit_to_string() == pat('(*x).f;')
    tu = ef(b, b.expr_indirect_member(x_deref, 'g'))
    assert tu.emit_to_string() == pat('(*x)->g;')
    tu = ef(b, b.expr_post_inc(x_deref))
    assert tu.emit_to_string() == pat('(*x)++;')
    tu = ef(b, b.expr_post_dec(x_deref))
    assert tu.emit_to_string() == pat('(*x)--;')
    tu = ef(b, b.expr_pre_inc(x_deref))
    assert tu.emit_to_string() == pat('++*x;')
    tu = ef(b, b.expr_pre_dec(x_deref))
    assert tu.emit_to_string() == pat('--*x;')
    tu = ef(b, b.expr_addressof(x_deref))
    assert tu.emit_to_string() == pat('&*x;')
    tu = ef(b, b.expr_deref(x_deref))
    assert tu.emit_to_string() == pat('**x;')
    tu = ef(b, b.expr_unary_plus(x_deref))
    assert tu.emit_to_string() == pat('+*x;')
    tu = ef(b, b.expr_unary_minus(x_deref))
    assert tu.emit_to_string() == pat('-*x;')
    tu = ef(b, b.expr_bitwise_not(x_deref))
    assert tu.emit_to_string() == pat('~*x;')
    tu = ef(b, b.expr_logical_not(x_deref))
    assert tu.emit_to_string() == pat('!*x;')
    tu = ef(b, b.expr_sizeof_expr(x_deref))
    assert tu.emit_to_string() == pat('sizeof(*x);')
    tu = ef(b, b.expr_cast(tv, x_deref))
    assert tu.emit_to_string() == pat('(V)*x;')
    tu = ef(b, b.expr_times(x_deref, xa))
    assert tu.emit_to_string() == pat('*x * a;')
    tu = ef(b, b.expr_divide(x_deref, xa))
    assert tu.emit_to_string() == pat('*x / a;')
    tu = ef(b, b.expr_modulus(x_deref, xa))
    assert tu.emit_to_string() == pat('*x % a;')
    tu = ef(b, b.expr_plus(x_deref, xa))
    assert tu.emit_to_string() == pat('*x + a;')
    tu = ef(b, b.expr_minus(x_deref, xa))
    assert tu.emit_to_string() == pat('*x - a;')
    tu = ef(b, b.expr_lshift(x_deref, xa))
    assert tu.emit_to_string() == pat('*x << a;')
    tu = ef(b, b.expr_rshift(x_deref, xa))
    assert tu.emit_to_string() == pat('*x >> a;')
    tu = ef(b, b.expr_cmp_lt(x_deref, xa))
    assert tu.emit_to_string() == pat('*x < a;')
    tu = ef(b, b.expr_cmp_gt(x_deref, xa))
    assert tu.emit_to_string() == pat('*x > a;')
    tu = ef(b, b.expr_cmp_le(x_deref, xa))
    assert tu.emit_to_string() == pat('*x <= a;')
    tu = ef(b, b.expr_cmp_ge(x_deref, xa))
    assert tu.emit_to_string() == pat('*x >= a;')
    tu = ef(b, b.expr_cmp_eq(x_deref, xa))
    assert tu.emit_to_string() == pat('*x == a;')
    tu = ef(b, b.expr_cmp_ne(x_deref, xa))
    assert tu.emit_to_string() == pat('*x != a;')
    tu = ef(b, b.expr_bitwise_and(x_deref, xa))
    assert tu.emit_to_string() == pat('*x & a;')
    tu = ef(b, b.expr_bitwise_xor(x_deref, xa))
    assert tu.emit_to_string() == pat('*x ^ a;')
    tu = ef(b, b.expr_bitwise_or(x_deref, xa))
    assert tu.emit_to_string() == pat('*x | a;')
    tu = ef(b, b.expr_logical_and(x_deref, xa))
    assert tu.emit_to_string() == pat('*x && a;')
    tu = ef(b, b.expr_logical_or(x_deref, xa))
    assert tu.emit_to_string() == pat('*x || a;')
    tu = ef(b, b.expr_conditional(x_deref, xa, xb))
    assert tu.emit_to_string() == pat('*x ? a : b;')
    tu = ef(b, b.expr_assign(x_deref, xa))
    assert tu.emit_to_string() == pat('*x = a;')
    tu = ef(b, b.expr_assign_times(x_deref, xa))
    assert tu.emit_to_string() == pat('*x *= a;')
    tu = ef(b, b.expr_assign_divide(x_deref, xa))
    assert tu.emit_to_string() == pat('*x /= a;')
    tu = ef(b, b.expr_assign_modulus(x_deref, xa))
    assert tu.emit_to_string() == pat('*x %= a;')
    tu = ef(b, b.expr_assign_plus(x_deref, xa))
    assert tu.emit_to_string() == pat('*x += a;')
    tu = ef(b, b.expr_assign_minus(x_deref, xa))
    assert tu.emit_to_string() == pat('*x -= a;')
    tu = ef(b, b.expr_assign_lshift(x_deref, xa))
    assert tu.emit_to_string() == pat('*x <<= a;')
    tu = ef(b, b.expr_assign_rshift(x_deref, xa))
    assert tu.emit_to_string() == pat('*x >>= a;')
    tu = ef(b, b.expr_assign_bitwise_and(x_deref, xa))
    assert tu.emit_to_string() == pat('*x &= a;')
    tu = ef(b, b.expr_assign_bitwise_xor(x_deref, xa))
    assert tu.emit_to_string() == pat('*x ^= a;')
    tu = ef(b, b.expr_assign_bitwise_or(x_deref, xa))
    assert tu.emit_to_string() == pat('*x |= a;')
    tu = ef(b, b.expr_comma(x_deref, xa))
    assert tu.emit_to_string() == pat('*x, a;')
    tu = ef(b, b.expr_index(xa, x_deref))
    assert tu.emit_to_string() == pat('a[*x];')
    tu = ef(b, b.expr_call(xa, [x_deref]))
    assert tu.emit_to_string() == pat('a(*x);')
    tu = ef(b, b.expr_times(xa, x_deref))
    assert tu.emit_to_string() == pat('a * *x;')
    tu = ef(b, b.expr_divide(xa, x_deref))
    assert tu.emit_to_string() == pat('a / *x;')
    tu = ef(b, b.expr_modulus(xa, x_deref))
    assert tu.emit_to_string() == pat('a % *x;')
    tu = ef(b, b.expr_plus(xa, x_deref))
    assert tu.emit_to_string() == pat('a + *x;')
    tu = ef(b, b.expr_minus(xa, x_deref))
    assert tu.emit_to_string() == pat('a - *x;')
    tu = ef(b, b.expr_lshift(xa, x_deref))
    assert tu.emit_to_string() == pat('a << *x;')
    tu = ef(b, b.expr_rshift(xa, x_deref))
    assert tu.emit_to_string() == pat('a >> *x;')
    tu = ef(b, b.expr_cmp_lt(xa, x_deref))
    assert tu.emit_to_string() == pat('a < *x;')
    tu = ef(b, b.expr_cmp_gt(xa, x_deref))
    assert tu.emit_to_string() == pat('a > *x;')
    tu = ef(b, b.expr_cmp_le(xa, x_deref))
    assert tu.emit_to_string() == pat('a <= *x;')
    tu = ef(b, b.expr_cmp_ge(xa, x_deref))
    assert tu.emit_to_string() == pat('a >= *x;')
    tu = ef(b, b.expr_cmp_eq(xa, x_deref))
    assert tu.emit_to_string() == pat('a == *x;')
    tu = ef(b, b.expr_cmp_ne(xa, x_deref))
    assert tu.emit_to_string() == pat('a != *x;')
    tu = ef(b, b.expr_bitwise_and(xa, x_deref))
    assert tu.emit_to_string() == pat('a & *x;')
    tu = ef(b, b.expr_bitwise_xor(xa, x_deref))
    assert tu.emit_to_string() == pat('a ^ *x;')
    tu = ef(b, b.expr_bitwise_or(xa, x_deref))
    assert tu.emit_to_string() == pat('a | *x;')
    tu = ef(b, b.expr_logical_and(xa, x_deref))
    assert tu.emit_to_string() == pat('a && *x;')
    tu = ef(b, b.expr_logical_or(xa, x_deref))
    assert tu.emit_to_string() == pat('a || *x;')
    tu = ef(b, b.expr_conditional(xa, x_deref, xb))
    assert tu.emit_to_string() == pat('a ? *x : b;')
    tu = ef(b, b.expr_assign(xa, x_deref))
    assert tu.emit_to_string() == pat('a = *x;')
    tu = ef(b, b.expr_assign_times(xa, x_deref))
    assert tu.emit_to_string() == pat('a *= *x;')
    tu = ef(b, b.expr_assign_divide(xa, x_deref))
    assert tu.emit_to_string() == pat('a /= *x;')
    tu = ef(b, b.expr_assign_modulus(xa, x_deref))
    assert tu.emit_to_string() == pat('a %= *x;')
    tu = ef(b, b.expr_assign_plus(xa, x_deref))
    assert tu.emit_to_string() == pat('a += *x;')
    tu = ef(b, b.expr_assign_minus(xa, x_deref))
    assert tu.emit_to_string() == pat('a -= *x;')
    tu = ef(b, b.expr_assign_lshift(xa, x_deref))
    assert tu.emit_to_string() == pat('a <<= *x;')
    tu = ef(b, b.expr_assign_rshift(xa, x_deref))
    assert tu.emit_to_string() == pat('a >>= *x;')
    tu = ef(b, b.expr_assign_bitwise_and(xa, x_deref))
    assert tu.emit_to_string() == pat('a &= *x;')
    tu = ef(b, b.expr_assign_bitwise_xor(xa, x_deref))
    assert tu.emit_to_string() == pat('a ^= *x;')
    tu = ef(b, b.expr_assign_bitwise_or(xa, x_deref))
    assert tu.emit_to_string() == pat('a |= *x;')
    tu = ef(b, b.expr_comma(xa, x_deref))
    assert tu.emit_to_string() == pat('a, *x;')
    tu = ef(b, b.expr_conditional(xa, xb, x_deref))
    assert tu.emit_to_string() == pat('a ? b : *x;')

    tu = ef(b, b.expr_index(x_unary_plus, xa))
    assert tu.emit_to_string() == pat('(+x)[a];')
    tu = ef(b, b.expr_call(x_unary_plus, [xa]))
    assert tu.emit_to_string() == pat('(+x)(a);')
    tu = ef(b, b.expr_direct_member(x_unary_plus, 'f'))
    assert tu.emit_to_string() == pat('(+x).f;')
    tu = ef(b, b.expr_indirect_member(x_unary_plus, 'g'))
    assert tu.emit_to_string() == pat('(+x)->g;')
    tu = ef(b, b.expr_post_inc(x_unary_plus))
    assert tu.emit_to_string() == pat('(+x)++;')
    tu = ef(b, b.expr_post_dec(x_unary_plus))
    assert tu.emit_to_string() == pat('(+x)--;')
    tu = ef(b, b.expr_pre_inc(x_unary_plus))
    assert tu.emit_to_string() == pat('+++x;')
    tu = ef(b, b.expr_pre_dec(x_unary_plus))
    assert tu.emit_to_string() == pat('--+x;')
    tu = ef(b, b.expr_addressof(x_unary_plus))
    assert tu.emit_to_string() == pat('&+x;')
    tu = ef(b, b.expr_deref(x_unary_plus))
    assert tu.emit_to_string() == pat('*+x;')
    tu = ef(b, b.expr_unary_plus(x_unary_plus))
    assert tu.emit_to_string() == pat('+ +x;')
    tu = ef(b, b.expr_unary_minus(x_unary_plus))
    assert tu.emit_to_string() == pat('-+x;')
    tu = ef(b, b.expr_bitwise_not(x_unary_plus))
    assert tu.emit_to_string() == pat('~+x;')
    tu = ef(b, b.expr_logical_not(x_unary_plus))
    assert tu.emit_to_string() == pat('!+x;')
    tu = ef(b, b.expr_sizeof_expr(x_unary_plus))
    assert tu.emit_to_string() == pat('sizeof(+x);')
    tu = ef(b, b.expr_cast(tv, x_unary_plus))
    assert tu.emit_to_string() == pat('(V)+x;')
    tu = ef(b, b.expr_times(x_unary_plus, xa))
    assert tu.emit_to_string() == pat('+x * a;')
    tu = ef(b, b.expr_divide(x_unary_plus, xa))
    assert tu.emit_to_string() == pat('+x / a;')
    tu = ef(b, b.expr_modulus(x_unary_plus, xa))
    assert tu.emit_to_string() == pat('+x % a;')
    tu = ef(b, b.expr_plus(x_unary_plus, xa))
    assert tu.emit_to_string() == pat('+x + a;')
    tu = ef(b, b.expr_minus(x_unary_plus, xa))
    assert tu.emit_to_string() == pat('+x - a;')
    tu = ef(b, b.expr_lshift(x_unary_plus, xa))
    assert tu.emit_to_string() == pat('+x << a;')
    tu = ef(b, b.expr_rshift(x_unary_plus, xa))
    assert tu.emit_to_string() == pat('+x >> a;')
    tu = ef(b, b.expr_cmp_lt(x_unary_plus, xa))
    assert tu.emit_to_string() == pat('+x < a;')
    tu = ef(b, b.expr_cmp_gt(x_unary_plus, xa))
    assert tu.emit_to_string() == pat('+x > a;')
    tu = ef(b, b.expr_cmp_le(x_unary_plus, xa))
    assert tu.emit_to_string() == pat('+x <= a;')
    tu = ef(b, b.expr_cmp_ge(x_unary_plus, xa))
    assert tu.emit_to_string() == pat('+x >= a;')
    tu = ef(b, b.expr_cmp_eq(x_unary_plus, xa))
    assert tu.emit_to_string() == pat('+x == a;')
    tu = ef(b, b.expr_cmp_ne(x_unary_plus, xa))
    assert tu.emit_to_string() == pat('+x != a;')
    tu = ef(b, b.expr_bitwise_and(x_unary_plus, xa))
    assert tu.emit_to_string() == pat('+x & a;')
    tu = ef(b, b.expr_bitwise_xor(x_unary_plus, xa))
    assert tu.emit_to_string() == pat('+x ^ a;')
    tu = ef(b, b.expr_bitwise_or(x_unary_plus, xa))
    assert tu.emit_to_string() == pat('+x | a;')
    tu = ef(b, b.expr_logical_and(x_unary_plus, xa))
    assert tu.emit_to_string() == pat('+x && a;')
    tu = ef(b, b.expr_logical_or(x_unary_plus, xa))
    assert tu.emit_to_string() == pat('+x || a;')
    tu = ef(b, b.expr_conditional(x_unary_plus, xa, xb))
    assert tu.emit_to_string() == pat('+x ? a : b;')
    tu = ef(b, b.expr_assign(x_unary_plus, xa))
    assert tu.emit_to_string() == pat('+x = a;')
    tu = ef(b, b.expr_assign_times(x_unary_plus, xa))
    assert tu.emit_to_string() == pat('+x *= a;')
    tu = ef(b, b.expr_assign_divide(x_unary_plus, xa))
    assert tu.emit_to_string() == pat('+x /= a;')
    tu = ef(b, b.expr_assign_modulus(x_unary_plus, xa))
    assert tu.emit_to_string() == pat('+x %= a;')
    tu = ef(b, b.expr_assign_plus(x_unary_plus, xa))
    assert tu.emit_to_string() == pat('+x += a;')
    tu = ef(b, b.expr_assign_minus(x_unary_plus, xa))
    assert tu.emit_to_string() == pat('+x -= a;')
    tu = ef(b, b.expr_assign_lshift(x_unary_plus, xa))
    assert tu.emit_to_string() == pat('+x <<= a;')
    tu = ef(b, b.expr_assign_rshift(x_unary_plus, xa))
    assert tu.emit_to_string() == pat('+x >>= a;')
    tu = ef(b, b.expr_assign_bitwise_and(x_unary_plus, xa))
    assert tu.emit_to_string() == pat('+x &= a;')
    tu = ef(b, b.expr_assign_bitwise_xor(x_unary_plus, xa))
    assert tu.emit_to_string() == pat('+x ^= a;')
    tu = ef(b, b.expr_assign_bitwise_or(x_unary_plus, xa))
    assert tu.emit_to_string() == pat('+x |= a;')
    tu = ef(b, b.expr_comma(x_unary_plus, xa))
    assert tu.emit_to_string() == pat('+x, a;')
    tu = ef(b, b.expr_index(xa, x_unary_plus))
    assert tu.emit_to_string() == pat('a[+x];')
    tu = ef(b, b.expr_call(xa, [x_unary_plus]))
    assert tu.emit_to_string() == pat('a(+x);')
    tu = ef(b, b.expr_times(xa, x_unary_plus))
    assert tu.emit_to_string() == pat('a * +x;')
    tu = ef(b, b.expr_divide(xa, x_unary_plus))
    assert tu.emit_to_string() == pat('a / +x;')
    tu = ef(b, b.expr_modulus(xa, x_unary_plus))
    assert tu.emit_to_string() == pat('a % +x;')
    tu = ef(b, b.expr_plus(xa, x_unary_plus))
    assert tu.emit_to_string() == pat('a + +x;')
    tu = ef(b, b.expr_minus(xa, x_unary_plus))
    assert tu.emit_to_string() == pat('a - +x;')
    tu = ef(b, b.expr_lshift(xa, x_unary_plus))
    assert tu.emit_to_string() == pat('a << +x;')
    tu = ef(b, b.expr_rshift(xa, x_unary_plus))
    assert tu.emit_to_string() == pat('a >> +x;')
    tu = ef(b, b.expr_cmp_lt(xa, x_unary_plus))
    assert tu.emit_to_string() == pat('a < +x;')
    tu = ef(b, b.expr_cmp_gt(xa, x_unary_plus))
    assert tu.emit_to_string() == pat('a > +x;')
    tu = ef(b, b.expr_cmp_le(xa, x_unary_plus))
    assert tu.emit_to_string() == pat('a <= +x;')
    tu = ef(b, b.expr_cmp_ge(xa, x_unary_plus))
    assert tu.emit_to_string() == pat('a >= +x;')
    tu = ef(b, b.expr_cmp_eq(xa, x_unary_plus))
    assert tu.emit_to_string() == pat('a == +x;')
    tu = ef(b, b.expr_cmp_ne(xa, x_unary_plus))
    assert tu.emit_to_string() == pat('a != +x;')
    tu = ef(b, b.expr_bitwise_and(xa, x_unary_plus))
    assert tu.emit_to_string() == pat('a & +x;')
    tu = ef(b, b.expr_bitwise_xor(xa, x_unary_plus))
    assert tu.emit_to_string() == pat('a ^ +x;')
    tu = ef(b, b.expr_bitwise_or(xa, x_unary_plus))
    assert tu.emit_to_string() == pat('a | +x;')
    tu = ef(b, b.expr_logical_and(xa, x_unary_plus))
    assert tu.emit_to_string() == pat('a && +x;')
    tu = ef(b, b.expr_logical_or(xa, x_unary_plus))
    assert tu.emit_to_string() == pat('a || +x;')
    tu = ef(b, b.expr_conditional(xa, x_unary_plus, xb))
    assert tu.emit_to_string() == pat('a ? +x : b;')
    tu = ef(b, b.expr_assign(xa, x_unary_plus))
    assert tu.emit_to_string() == pat('a = +x;')
    tu = ef(b, b.expr_assign_times(xa, x_unary_plus))
    assert tu.emit_to_string() == pat('a *= +x;')
    tu = ef(b, b.expr_assign_divide(xa, x_unary_plus))
    assert tu.emit_to_string() == pat('a /= +x;')
    tu = ef(b, b.expr_assign_modulus(xa, x_unary_plus))
    assert tu.emit_to_string() == pat('a %= +x;')
    tu = ef(b, b.expr_assign_plus(xa, x_unary_plus))
    assert tu.emit_to_string() == pat('a += +x;')
    tu = ef(b, b.expr_assign_minus(xa, x_unary_plus))
    assert tu.emit_to_string() == pat('a -= +x;')
    tu = ef(b, b.expr_assign_lshift(xa, x_unary_plus))
    assert tu.emit_to_string() == pat('a <<= +x;')
    tu = ef(b, b.expr_assign_rshift(xa, x_unary_plus))
    assert tu.emit_to_string() == pat('a >>= +x;')
    tu = ef(b, b.expr_assign_bitwise_and(xa, x_unary_plus))
    assert tu.emit_to_string() == pat('a &= +x;')
    tu = ef(b, b.expr_assign_bitwise_xor(xa, x_unary_plus))
    assert tu.emit_to_string() == pat('a ^= +x;')
    tu = ef(b, b.expr_assign_bitwise_or(xa, x_unary_plus))
    assert tu.emit_to_string() == pat('a |= +x;')
    tu = ef(b, b.expr_comma(xa, x_unary_plus))
    assert tu.emit_to_string() == pat('a, +x;')
    tu = ef(b, b.expr_conditional(xa, xb, x_unary_plus))
    assert tu.emit_to_string() == pat('a ? b : +x;')

    tu = ef(b, b.expr_index(x_unary_minus, xa))
    assert tu.emit_to_string() == pat('(-x)[a];')
    tu = ef(b, b.expr_call(x_unary_minus, [xa]))
    assert tu.emit_to_string() == pat('(-x)(a);')
    tu = ef(b, b.expr_direct_member(x_unary_minus, 'f'))
    assert tu.emit_to_string() == pat('(-x).f;')
    tu = ef(b, b.expr_indirect_member(x_unary_minus, 'g'))
    assert tu.emit_to_string() == pat('(-x)->g;')
    tu = ef(b, b.expr_post_inc(x_unary_minus))
    assert tu.emit_to_string() == pat('(-x)++;')
    tu = ef(b, b.expr_post_dec(x_unary_minus))
    assert tu.emit_to_string() == pat('(-x)--;')
    tu = ef(b, b.expr_pre_inc(x_unary_minus))
    assert tu.emit_to_string() == pat('++-x;')
    tu = ef(b, b.expr_pre_dec(x_unary_minus))
    assert tu.emit_to_string() == pat('---x;')
    tu = ef(b, b.expr_addressof(x_unary_minus))
    assert tu.emit_to_string() == pat('&-x;')
    tu = ef(b, b.expr_deref(x_unary_minus))
    assert tu.emit_to_string() == pat('*-x;')
    tu = ef(b, b.expr_unary_plus(x_unary_minus))
    assert tu.emit_to_string() == pat('+-x;')
    tu = ef(b, b.expr_unary_minus(x_unary_minus))
    assert tu.emit_to_string() == pat('- -x;')
    tu = ef(b, b.expr_bitwise_not(x_unary_minus))
    assert tu.emit_to_string() == pat('~-x;')
    tu = ef(b, b.expr_logical_not(x_unary_minus))
    assert tu.emit_to_string() == pat('!-x;')
    tu = ef(b, b.expr_sizeof_expr(x_unary_minus))
    assert tu.emit_to_string() == pat('sizeof(-x);')
    tu = ef(b, b.expr_cast(tv, x_unary_minus))
    assert tu.emit_to_string() == pat('(V)-x;')
    tu = ef(b, b.expr_times(x_unary_minus, xa))
    assert tu.emit_to_string() == pat('-x * a;')
    tu = ef(b, b.expr_divide(x_unary_minus, xa))
    assert tu.emit_to_string() == pat('-x / a;')
    tu = ef(b, b.expr_modulus(x_unary_minus, xa))
    assert tu.emit_to_string() == pat('-x % a;')
    tu = ef(b, b.expr_plus(x_unary_minus, xa))
    assert tu.emit_to_string() == pat('-x + a;')
    tu = ef(b, b.expr_minus(x_unary_minus, xa))
    assert tu.emit_to_string() == pat('-x - a;')
    tu = ef(b, b.expr_lshift(x_unary_minus, xa))
    assert tu.emit_to_string() == pat('-x << a;')
    tu = ef(b, b.expr_rshift(x_unary_minus, xa))
    assert tu.emit_to_string() == pat('-x >> a;')
    tu = ef(b, b.expr_cmp_lt(x_unary_minus, xa))
    assert tu.emit_to_string() == pat('-x < a;')
    tu = ef(b, b.expr_cmp_gt(x_unary_minus, xa))
    assert tu.emit_to_string() == pat('-x > a;')
    tu = ef(b, b.expr_cmp_le(x_unary_minus, xa))
    assert tu.emit_to_string() == pat('-x <= a;')
    tu = ef(b, b.expr_cmp_ge(x_unary_minus, xa))
    assert tu.emit_to_string() == pat('-x >= a;')
    tu = ef(b, b.expr_cmp_eq(x_unary_minus, xa))
    assert tu.emit_to_string() == pat('-x == a;')
    tu = ef(b, b.expr_cmp_ne(x_unary_minus, xa))
    assert tu.emit_to_string() == pat('-x != a;')
    tu = ef(b, b.expr_bitwise_and(x_unary_minus, xa))
    assert tu.emit_to_string() == pat('-x & a;')
    tu = ef(b, b.expr_bitwise_xor(x_unary_minus, xa))
    assert tu.emit_to_string() == pat('-x ^ a;')
    tu = ef(b, b.expr_bitwise_or(x_unary_minus, xa))
    assert tu.emit_to_string() == pat('-x | a;')
    tu = ef(b, b.expr_logical_and(x_unary_minus, xa))
    assert tu.emit_to_string() == pat('-x && a;')
    tu = ef(b, b.expr_logical_or(x_unary_minus, xa))
    assert tu.emit_to_string() == pat('-x || a;')
    tu = ef(b, b.expr_conditional(x_unary_minus, xa, xb))
    assert tu.emit_to_string() == pat('-x ? a : b;')
    tu = ef(b, b.expr_assign(x_unary_minus, xa))
    assert tu.emit_to_string() == pat('-x = a;')
    tu = ef(b, b.expr_assign_times(x_unary_minus, xa))
    assert tu.emit_to_string() == pat('-x *= a;')
    tu = ef(b, b.expr_assign_divide(x_unary_minus, xa))
    assert tu.emit_to_string() == pat('-x /= a;')
    tu = ef(b, b.expr_assign_modulus(x_unary_minus, xa))
    assert tu.emit_to_string() == pat('-x %= a;')
    tu = ef(b, b.expr_assign_plus(x_unary_minus, xa))
    assert tu.emit_to_string() == pat('-x += a;')
    tu = ef(b, b.expr_assign_minus(x_unary_minus, xa))
    assert tu.emit_to_string() == pat('-x -= a;')
    tu = ef(b, b.expr_assign_lshift(x_unary_minus, xa))
    assert tu.emit_to_string() == pat('-x <<= a;')
    tu = ef(b, b.expr_assign_rshift(x_unary_minus, xa))
    assert tu.emit_to_string() == pat('-x >>= a;')
    tu = ef(b, b.expr_assign_bitwise_and(x_unary_minus, xa))
    assert tu.emit_to_string() == pat('-x &= a;')
    tu = ef(b, b.expr_assign_bitwise_xor(x_unary_minus, xa))
    assert tu.emit_to_string() == pat('-x ^= a;')
    tu = ef(b, b.expr_assign_bitwise_or(x_unary_minus, xa))
    assert tu.emit_to_string() == pat('-x |= a;')
    tu = ef(b, b.expr_comma(x_unary_minus, xa))
    assert tu.emit_to_string() == pat('-x, a;')
    tu = ef(b, b.expr_index(xa, x_unary_minus))
    assert tu.emit_to_string() == pat('a[-x];')
    tu = ef(b, b.expr_call(xa, [x_unary_minus]))
    assert tu.emit_to_string() == pat('a(-x);')
    tu = ef(b, b.expr_times(xa, x_unary_minus))
    assert tu.emit_to_string() == pat('a * -x;')
    tu = ef(b, b.expr_divide(xa, x_unary_minus))
    assert tu.emit_to_string() == pat('a / -x;')
    tu = ef(b, b.expr_modulus(xa, x_unary_minus))
    assert tu.emit_to_string() == pat('a % -x;')
    tu = ef(b, b.expr_plus(xa, x_unary_minus))
    assert tu.emit_to_string() == pat('a + -x;')
    tu = ef(b, b.expr_minus(xa, x_unary_minus))
    assert tu.emit_to_string() == pat('a - -x;')
    tu = ef(b, b.expr_lshift(xa, x_unary_minus))
    assert tu.emit_to_string() == pat('a << -x;')
    tu = ef(b, b.expr_rshift(xa, x_unary_minus))
    assert tu.emit_to_string() == pat('a >> -x;')
    tu = ef(b, b.expr_cmp_lt(xa, x_unary_minus))
    assert tu.emit_to_string() == pat('a < -x;')
    tu = ef(b, b.expr_cmp_gt(xa, x_unary_minus))
    assert tu.emit_to_string() == pat('a > -x;')
    tu = ef(b, b.expr_cmp_le(xa, x_unary_minus))
    assert tu.emit_to_string() == pat('a <= -x;')
    tu = ef(b, b.expr_cmp_ge(xa, x_unary_minus))
    assert tu.emit_to_string() == pat('a >= -x;')
    tu = ef(b, b.expr_cmp_eq(xa, x_unary_minus))
    assert tu.emit_to_string() == pat('a == -x;')
    tu = ef(b, b.expr_cmp_ne(xa, x_unary_minus))
    assert tu.emit_to_string() == pat('a != -x;')
    tu = ef(b, b.expr_bitwise_and(xa, x_unary_minus))
    assert tu.emit_to_string() == pat('a & -x;')
    tu = ef(b, b.expr_bitwise_xor(xa, x_unary_minus))
    assert tu.emit_to_string() == pat('a ^ -x;')
    tu = ef(b, b.expr_bitwise_or(xa, x_unary_minus))
    assert tu.emit_to_string() == pat('a | -x;')
    tu = ef(b, b.expr_logical_and(xa, x_unary_minus))
    assert tu.emit_to_string() == pat('a && -x;')
    tu = ef(b, b.expr_logical_or(xa, x_unary_minus))
    assert tu.emit_to_string() == pat('a || -x;')
    tu = ef(b, b.expr_conditional(xa, x_unary_minus, xb))
    assert tu.emit_to_string() == pat('a ? -x : b;')
    tu = ef(b, b.expr_assign(xa, x_unary_minus))
    assert tu.emit_to_string() == pat('a = -x;')
    tu = ef(b, b.expr_assign_times(xa, x_unary_minus))
    assert tu.emit_to_string() == pat('a *= -x;')
    tu = ef(b, b.expr_assign_divide(xa, x_unary_minus))
    assert tu.emit_to_string() == pat('a /= -x;')
    tu = ef(b, b.expr_assign_modulus(xa, x_unary_minus))
    assert tu.emit_to_string() == pat('a %= -x;')
    tu = ef(b, b.expr_assign_plus(xa, x_unary_minus))
    assert tu.emit_to_string() == pat('a += -x;')
    tu = ef(b, b.expr_assign_minus(xa, x_unary_minus))
    assert tu.emit_to_string() == pat('a -= -x;')
    tu = ef(b, b.expr_assign_lshift(xa, x_unary_minus))
    assert tu.emit_to_string() == pat('a <<= -x;')
    tu = ef(b, b.expr_assign_rshift(xa, x_unary_minus))
    assert tu.emit_to_string() == pat('a >>= -x;')
    tu = ef(b, b.expr_assign_bitwise_and(xa, x_unary_minus))
    assert tu.emit_to_string() == pat('a &= -x;')
    tu = ef(b, b.expr_assign_bitwise_xor(xa, x_unary_minus))
    assert tu.emit_to_string() == pat('a ^= -x;')
    tu = ef(b, b.expr_assign_bitwise_or(xa, x_unary_minus))
    assert tu.emit_to_string() == pat('a |= -x;')
    tu = ef(b, b.expr_comma(xa, x_unary_minus))
    assert tu.emit_to_string() == pat('a, -x;')
    tu = ef(b, b.expr_conditional(xa, xb, x_unary_minus))
    assert tu.emit_to_string() == pat('a ? b : -x;')

    tu = ef(b, b.expr_index(x_bitwise_not, xa))
    assert tu.emit_to_string() == pat('(~x)[a];')
    tu = ef(b, b.expr_call(x_bitwise_not, [xa]))
    assert tu.emit_to_string() == pat('(~x)(a);')
    tu = ef(b, b.expr_direct_member(x_bitwise_not, 'f'))
    assert tu.emit_to_string() == pat('(~x).f;')
    tu = ef(b, b.expr_indirect_member(x_bitwise_not, 'g'))
    assert tu.emit_to_string() == pat('(~x)->g;')
    tu = ef(b, b.expr_post_inc(x_bitwise_not))
    assert tu.emit_to_string() == pat('(~x)++;')
    tu = ef(b, b.expr_post_dec(x_bitwise_not))
    assert tu.emit_to_string() == pat('(~x)--;')
    tu = ef(b, b.expr_pre_inc(x_bitwise_not))
    assert tu.emit_to_string() == pat('++~x;')
    tu = ef(b, b.expr_pre_dec(x_bitwise_not))
    assert tu.emit_to_string() == pat('--~x;')
    tu = ef(b, b.expr_addressof(x_bitwise_not))
    assert tu.emit_to_string() == pat('&~x;')
    tu = ef(b, b.expr_deref(x_bitwise_not))
    assert tu.emit_to_string() == pat('*~x;')
    tu = ef(b, b.expr_unary_plus(x_bitwise_not))
    assert tu.emit_to_string() == pat('+~x;')
    tu = ef(b, b.expr_unary_minus(x_bitwise_not))
    assert tu.emit_to_string() == pat('-~x;')
    tu = ef(b, b.expr_bitwise_not(x_bitwise_not))
    assert tu.emit_to_string() == pat('~~x;')
    tu = ef(b, b.expr_logical_not(x_bitwise_not))
    assert tu.emit_to_string() == pat('!~x;')
    tu = ef(b, b.expr_sizeof_expr(x_bitwise_not))
    assert tu.emit_to_string() == pat('sizeof(~x);')
    tu = ef(b, b.expr_cast(tv, x_bitwise_not))
    assert tu.emit_to_string() == pat('(V)~x;')
    tu = ef(b, b.expr_times(x_bitwise_not, xa))
    assert tu.emit_to_string() == pat('~x * a;')
    tu = ef(b, b.expr_divide(x_bitwise_not, xa))
    assert tu.emit_to_string() == pat('~x / a;')
    tu = ef(b, b.expr_modulus(x_bitwise_not, xa))
    assert tu.emit_to_string() == pat('~x % a;')
    tu = ef(b, b.expr_plus(x_bitwise_not, xa))
    assert tu.emit_to_string() == pat('~x + a;')
    tu = ef(b, b.expr_minus(x_bitwise_not, xa))
    assert tu.emit_to_string() == pat('~x - a;')
    tu = ef(b, b.expr_lshift(x_bitwise_not, xa))
    assert tu.emit_to_string() == pat('~x << a;')
    tu = ef(b, b.expr_rshift(x_bitwise_not, xa))
    assert tu.emit_to_string() == pat('~x >> a;')
    tu = ef(b, b.expr_cmp_lt(x_bitwise_not, xa))
    assert tu.emit_to_string() == pat('~x < a;')
    tu = ef(b, b.expr_cmp_gt(x_bitwise_not, xa))
    assert tu.emit_to_string() == pat('~x > a;')
    tu = ef(b, b.expr_cmp_le(x_bitwise_not, xa))
    assert tu.emit_to_string() == pat('~x <= a;')
    tu = ef(b, b.expr_cmp_ge(x_bitwise_not, xa))
    assert tu.emit_to_string() == pat('~x >= a;')
    tu = ef(b, b.expr_cmp_eq(x_bitwise_not, xa))
    assert tu.emit_to_string() == pat('~x == a;')
    tu = ef(b, b.expr_cmp_ne(x_bitwise_not, xa))
    assert tu.emit_to_string() == pat('~x != a;')
    tu = ef(b, b.expr_bitwise_and(x_bitwise_not, xa))
    assert tu.emit_to_string() == pat('~x & a;')
    tu = ef(b, b.expr_bitwise_xor(x_bitwise_not, xa))
    assert tu.emit_to_string() == pat('~x ^ a;')
    tu = ef(b, b.expr_bitwise_or(x_bitwise_not, xa))
    assert tu.emit_to_string() == pat('~x | a;')
    tu = ef(b, b.expr_logical_and(x_bitwise_not, xa))
    assert tu.emit_to_string() == pat('~x && a;')
    tu = ef(b, b.expr_logical_or(x_bitwise_not, xa))
    assert tu.emit_to_string() == pat('~x || a;')
    tu = ef(b, b.expr_conditional(x_bitwise_not, xa, xb))
    assert tu.emit_to_string() == pat('~x ? a : b;')
    tu = ef(b, b.expr_assign(x_bitwise_not, xa))
    assert tu.emit_to_string() == pat('~x = a;')
    tu = ef(b, b.expr_assign_times(x_bitwise_not, xa))
    assert tu.emit_to_string() == pat('~x *= a;')
    tu = ef(b, b.expr_assign_divide(x_bitwise_not, xa))
    assert tu.emit_to_string() == pat('~x /= a;')
    tu = ef(b, b.expr_assign_modulus(x_bitwise_not, xa))
    assert tu.emit_to_string() == pat('~x %= a;')
    tu = ef(b, b.expr_assign_plus(x_bitwise_not, xa))
    assert tu.emit_to_string() == pat('~x += a;')
    tu = ef(b, b.expr_assign_minus(x_bitwise_not, xa))
    assert tu.emit_to_string() == pat('~x -= a;')
    tu = ef(b, b.expr_assign_lshift(x_bitwise_not, xa))
    assert tu.emit_to_string() == pat('~x <<= a;')
    tu = ef(b, b.expr_assign_rshift(x_bitwise_not, xa))
    assert tu.emit_to_string() == pat('~x >>= a;')
    tu = ef(b, b.expr_assign_bitwise_and(x_bitwise_not, xa))
    assert tu.emit_to_string() == pat('~x &= a;')
    tu = ef(b, b.expr_assign_bitwise_xor(x_bitwise_not, xa))
    assert tu.emit_to_string() == pat('~x ^= a;')
    tu = ef(b, b.expr_assign_bitwise_or(x_bitwise_not, xa))
    assert tu.emit_to_string() == pat('~x |= a;')
    tu = ef(b, b.expr_comma(x_bitwise_not, xa))
    assert tu.emit_to_string() == pat('~x, a;')
    tu = ef(b, b.expr_index(xa, x_bitwise_not))
    assert tu.emit_to_string() == pat('a[~x];')
    tu = ef(b, b.expr_call(xa, [x_bitwise_not]))
    assert tu.emit_to_string() == pat('a(~x);')
    tu = ef(b, b.expr_times(xa, x_bitwise_not))
    assert tu.emit_to_string() == pat('a * ~x;')
    tu = ef(b, b.expr_divide(xa, x_bitwise_not))
    assert tu.emit_to_string() == pat('a / ~x;')
    tu = ef(b, b.expr_modulus(xa, x_bitwise_not))
    assert tu.emit_to_string() == pat('a % ~x;')
    tu = ef(b, b.expr_plus(xa, x_bitwise_not))
    assert tu.emit_to_string() == pat('a + ~x;')
    tu = ef(b, b.expr_minus(xa, x_bitwise_not))
    assert tu.emit_to_string() == pat('a - ~x;')
    tu = ef(b, b.expr_lshift(xa, x_bitwise_not))
    assert tu.emit_to_string() == pat('a << ~x;')
    tu = ef(b, b.expr_rshift(xa, x_bitwise_not))
    assert tu.emit_to_string() == pat('a >> ~x;')
    tu = ef(b, b.expr_cmp_lt(xa, x_bitwise_not))
    assert tu.emit_to_string() == pat('a < ~x;')
    tu = ef(b, b.expr_cmp_gt(xa, x_bitwise_not))
    assert tu.emit_to_string() == pat('a > ~x;')
    tu = ef(b, b.expr_cmp_le(xa, x_bitwise_not))
    assert tu.emit_to_string() == pat('a <= ~x;')
    tu = ef(b, b.expr_cmp_ge(xa, x_bitwise_not))
    assert tu.emit_to_string() == pat('a >= ~x;')
    tu = ef(b, b.expr_cmp_eq(xa, x_bitwise_not))
    assert tu.emit_to_string() == pat('a == ~x;')
    tu = ef(b, b.expr_cmp_ne(xa, x_bitwise_not))
    assert tu.emit_to_string() == pat('a != ~x;')
    tu = ef(b, b.expr_bitwise_and(xa, x_bitwise_not))
    assert tu.emit_to_string() == pat('a & ~x;')
    tu = ef(b, b.expr_bitwise_xor(xa, x_bitwise_not))
    assert tu.emit_to_string() == pat('a ^ ~x;')
    tu = ef(b, b.expr_bitwise_or(xa, x_bitwise_not))
    assert tu.emit_to_string() == pat('a | ~x;')
    tu = ef(b, b.expr_logical_and(xa, x_bitwise_not))
    assert tu.emit_to_string() == pat('a && ~x;')
    tu = ef(b, b.expr_logical_or(xa, x_bitwise_not))
    assert tu.emit_to_string() == pat('a || ~x;')
    tu = ef(b, b.expr_conditional(xa, x_bitwise_not, xb))
    assert tu.emit_to_string() == pat('a ? ~x : b;')
    tu = ef(b, b.expr_assign(xa, x_bitwise_not))
    assert tu.emit_to_string() == pat('a = ~x;')
    tu = ef(b, b.expr_assign_times(xa, x_bitwise_not))
    assert tu.emit_to_string() == pat('a *= ~x;')
    tu = ef(b, b.expr_assign_divide(xa, x_bitwise_not))
    assert tu.emit_to_string() == pat('a /= ~x;')
    tu = ef(b, b.expr_assign_modulus(xa, x_bitwise_not))
    assert tu.emit_to_string() == pat('a %= ~x;')
    tu = ef(b, b.expr_assign_plus(xa, x_bitwise_not))
    assert tu.emit_to_string() == pat('a += ~x;')
    tu = ef(b, b.expr_assign_minus(xa, x_bitwise_not))
    assert tu.emit_to_string() == pat('a -= ~x;')
    tu = ef(b, b.expr_assign_lshift(xa, x_bitwise_not))
    assert tu.emit_to_string() == pat('a <<= ~x;')
    tu = ef(b, b.expr_assign_rshift(xa, x_bitwise_not))
    assert tu.emit_to_string() == pat('a >>= ~x;')
    tu = ef(b, b.expr_assign_bitwise_and(xa, x_bitwise_not))
    assert tu.emit_to_string() == pat('a &= ~x;')
    tu = ef(b, b.expr_assign_bitwise_xor(xa, x_bitwise_not))
    assert tu.emit_to_string() == pat('a ^= ~x;')
    tu = ef(b, b.expr_assign_bitwise_or(xa, x_bitwise_not))
    assert tu.emit_to_string() == pat('a |= ~x;')
    tu = ef(b, b.expr_comma(xa, x_bitwise_not))
    assert tu.emit_to_string() == pat('a, ~x;')
    tu = ef(b, b.expr_conditional(xa, xb, x_bitwise_not))
    assert tu.emit_to_string() == pat('a ? b : ~x;')

    tu = ef(b, b.expr_index(x_logical_not, xa))
    assert tu.emit_to_string() == pat('(!x)[a];')
    tu = ef(b, b.expr_call(x_logical_not, [xa]))
    assert tu.emit_to_string() == pat('(!x)(a);')
    tu = ef(b, b.expr_direct_member(x_logical_not, 'f'))
    assert tu.emit_to_string() == pat('(!x).f;')
    tu = ef(b, b.expr_indirect_member(x_logical_not, 'g'))
    assert tu.emit_to_string() == pat('(!x)->g;')
    tu = ef(b, b.expr_post_inc(x_logical_not))
    assert tu.emit_to_string() == pat('(!x)++;')
    tu = ef(b, b.expr_post_dec(x_logical_not))
    assert tu.emit_to_string() == pat('(!x)--;')
    tu = ef(b, b.expr_pre_inc(x_logical_not))
    assert tu.emit_to_string() == pat('++!x;')
    tu = ef(b, b.expr_pre_dec(x_logical_not))
    assert tu.emit_to_string() == pat('--!x;')
    tu = ef(b, b.expr_addressof(x_logical_not))
    assert tu.emit_to_string() == pat('&!x;')
    tu = ef(b, b.expr_deref(x_logical_not))
    assert tu.emit_to_string() == pat('*!x;')
    tu = ef(b, b.expr_unary_plus(x_logical_not))
    assert tu.emit_to_string() == pat('+!x;')
    tu = ef(b, b.expr_unary_minus(x_logical_not))
    assert tu.emit_to_string() == pat('-!x;')
    tu = ef(b, b.expr_bitwise_not(x_logical_not))
    assert tu.emit_to_string() == pat('~!x;')
    tu = ef(b, b.expr_logical_not(x_logical_not))
    assert tu.emit_to_string() == pat('!!x;')
    tu = ef(b, b.expr_sizeof_expr(x_logical_not))
    assert tu.emit_to_string() == pat('sizeof(!x);')
    tu = ef(b, b.expr_cast(tv, x_logical_not))
    assert tu.emit_to_string() == pat('(V)!x;')
    tu = ef(b, b.expr_times(x_logical_not, xa))
    assert tu.emit_to_string() == pat('!x * a;')
    tu = ef(b, b.expr_divide(x_logical_not, xa))
    assert tu.emit_to_string() == pat('!x / a;')
    tu = ef(b, b.expr_modulus(x_logical_not, xa))
    assert tu.emit_to_string() == pat('!x % a;')
    tu = ef(b, b.expr_plus(x_logical_not, xa))
    assert tu.emit_to_string() == pat('!x + a;')
    tu = ef(b, b.expr_minus(x_logical_not, xa))
    assert tu.emit_to_string() == pat('!x - a;')
    tu = ef(b, b.expr_lshift(x_logical_not, xa))
    assert tu.emit_to_string() == pat('!x << a;')
    tu = ef(b, b.expr_rshift(x_logical_not, xa))
    assert tu.emit_to_string() == pat('!x >> a;')
    tu = ef(b, b.expr_cmp_lt(x_logical_not, xa))
    assert tu.emit_to_string() == pat('!x < a;')
    tu = ef(b, b.expr_cmp_gt(x_logical_not, xa))
    assert tu.emit_to_string() == pat('!x > a;')
    tu = ef(b, b.expr_cmp_le(x_logical_not, xa))
    assert tu.emit_to_string() == pat('!x <= a;')
    tu = ef(b, b.expr_cmp_ge(x_logical_not, xa))
    assert tu.emit_to_string() == pat('!x >= a;')
    tu = ef(b, b.expr_cmp_eq(x_logical_not, xa))
    assert tu.emit_to_string() == pat('!x == a;')
    tu = ef(b, b.expr_cmp_ne(x_logical_not, xa))
    assert tu.emit_to_string() == pat('!x != a;')
    tu = ef(b, b.expr_bitwise_and(x_logical_not, xa))
    assert tu.emit_to_string() == pat('!x & a;')
    tu = ef(b, b.expr_bitwise_xor(x_logical_not, xa))
    assert tu.emit_to_string() == pat('!x ^ a;')
    tu = ef(b, b.expr_bitwise_or(x_logical_not, xa))
    assert tu.emit_to_string() == pat('!x | a;')
    tu = ef(b, b.expr_logical_and(x_logical_not, xa))
    assert tu.emit_to_string() == pat('!x && a;')
    tu = ef(b, b.expr_logical_or(x_logical_not, xa))
    assert tu.emit_to_string() == pat('!x || a;')
    tu = ef(b, b.expr_conditional(x_logical_not, xa, xb))
    assert tu.emit_to_string() == pat('!x ? a : b;')
    tu = ef(b, b.expr_assign(x_logical_not, xa))
    assert tu.emit_to_string() == pat('!x = a;')
    tu = ef(b, b.expr_assign_times(x_logical_not, xa))
    assert tu.emit_to_string() == pat('!x *= a;')
    tu = ef(b, b.expr_assign_divide(x_logical_not, xa))
    assert tu.emit_to_string() == pat('!x /= a;')
    tu = ef(b, b.expr_assign_modulus(x_logical_not, xa))
    assert tu.emit_to_string() == pat('!x %= a;')
    tu = ef(b, b.expr_assign_plus(x_logical_not, xa))
    assert tu.emit_to_string() == pat('!x += a;')
    tu = ef(b, b.expr_assign_minus(x_logical_not, xa))
    assert tu.emit_to_string() == pat('!x -= a;')
    tu = ef(b, b.expr_assign_lshift(x_logical_not, xa))
    assert tu.emit_to_string() == pat('!x <<= a;')
    tu = ef(b, b.expr_assign_rshift(x_logical_not, xa))
    assert tu.emit_to_string() == pat('!x >>= a;')
    tu = ef(b, b.expr_assign_bitwise_and(x_logical_not, xa))
    assert tu.emit_to_string() == pat('!x &= a;')
    tu = ef(b, b.expr_assign_bitwise_xor(x_logical_not, xa))
    assert tu.emit_to_string() == pat('!x ^= a;')
    tu = ef(b, b.expr_assign_bitwise_or(x_logical_not, xa))
    assert tu.emit_to_string() == pat('!x |= a;')
    tu = ef(b, b.expr_comma(x_logical_not, xa))
    assert tu.emit_to_string() == pat('!x, a;')
    tu = ef(b, b.expr_index(xa, x_logical_not))
    assert tu.emit_to_string() == pat('a[!x];')
    tu = ef(b, b.expr_call(xa, [x_logical_not]))
    assert tu.emit_to_string() == pat('a(!x);')
    tu = ef(b, b.expr_times(xa, x_logical_not))
    assert tu.emit_to_string() == pat('a * !x;')
    tu = ef(b, b.expr_divide(xa, x_logical_not))
    assert tu.emit_to_string() == pat('a / !x;')
    tu = ef(b, b.expr_modulus(xa, x_logical_not))
    assert tu.emit_to_string() == pat('a % !x;')
    tu = ef(b, b.expr_plus(xa, x_logical_not))
    assert tu.emit_to_string() == pat('a + !x;')
    tu = ef(b, b.expr_minus(xa, x_logical_not))
    assert tu.emit_to_string() == pat('a - !x;')
    tu = ef(b, b.expr_lshift(xa, x_logical_not))
    assert tu.emit_to_string() == pat('a << !x;')
    tu = ef(b, b.expr_rshift(xa, x_logical_not))
    assert tu.emit_to_string() == pat('a >> !x;')
    tu = ef(b, b.expr_cmp_lt(xa, x_logical_not))
    assert tu.emit_to_string() == pat('a < !x;')
    tu = ef(b, b.expr_cmp_gt(xa, x_logical_not))
    assert tu.emit_to_string() == pat('a > !x;')
    tu = ef(b, b.expr_cmp_le(xa, x_logical_not))
    assert tu.emit_to_string() == pat('a <= !x;')
    tu = ef(b, b.expr_cmp_ge(xa, x_logical_not))
    assert tu.emit_to_string() == pat('a >= !x;')
    tu = ef(b, b.expr_cmp_eq(xa, x_logical_not))
    assert tu.emit_to_string() == pat('a == !x;')
    tu = ef(b, b.expr_cmp_ne(xa, x_logical_not))
    assert tu.emit_to_string() == pat('a != !x;')
    tu = ef(b, b.expr_bitwise_and(xa, x_logical_not))
    assert tu.emit_to_string() == pat('a & !x;')
    tu = ef(b, b.expr_bitwise_xor(xa, x_logical_not))
    assert tu.emit_to_string() == pat('a ^ !x;')
    tu = ef(b, b.expr_bitwise_or(xa, x_logical_not))
    assert tu.emit_to_string() == pat('a | !x;')
    tu = ef(b, b.expr_logical_and(xa, x_logical_not))
    assert tu.emit_to_string() == pat('a && !x;')
    tu = ef(b, b.expr_logical_or(xa, x_logical_not))
    assert tu.emit_to_string() == pat('a || !x;')
    tu = ef(b, b.expr_conditional(xa, x_logical_not, xb))
    assert tu.emit_to_string() == pat('a ? !x : b;')
    tu = ef(b, b.expr_assign(xa, x_logical_not))
    assert tu.emit_to_string() == pat('a = !x;')
    tu = ef(b, b.expr_assign_times(xa, x_logical_not))
    assert tu.emit_to_string() == pat('a *= !x;')
    tu = ef(b, b.expr_assign_divide(xa, x_logical_not))
    assert tu.emit_to_string() == pat('a /= !x;')
    tu = ef(b, b.expr_assign_modulus(xa, x_logical_not))
    assert tu.emit_to_string() == pat('a %= !x;')
    tu = ef(b, b.expr_assign_plus(xa, x_logical_not))
    assert tu.emit_to_string() == pat('a += !x;')
    tu = ef(b, b.expr_assign_minus(xa, x_logical_not))
    assert tu.emit_to_string() == pat('a -= !x;')
    tu = ef(b, b.expr_assign_lshift(xa, x_logical_not))
    assert tu.emit_to_string() == pat('a <<= !x;')
    tu = ef(b, b.expr_assign_rshift(xa, x_logical_not))
    assert tu.emit_to_string() == pat('a >>= !x;')
    tu = ef(b, b.expr_assign_bitwise_and(xa, x_logical_not))
    assert tu.emit_to_string() == pat('a &= !x;')
    tu = ef(b, b.expr_assign_bitwise_xor(xa, x_logical_not))
    assert tu.emit_to_string() == pat('a ^= !x;')
    tu = ef(b, b.expr_assign_bitwise_or(xa, x_logical_not))
    assert tu.emit_to_string() == pat('a |= !x;')
    tu = ef(b, b.expr_comma(xa, x_logical_not))
    assert tu.emit_to_string() == pat('a, !x;')
    tu = ef(b, b.expr_conditional(xa, xb, x_logical_not))
    assert tu.emit_to_string() == pat('a ? b : !x;')

    tu = ef(b, b.expr_index(x_sizeof_expr, xa))
    assert tu.emit_to_string() == pat('(sizeof(x))[a];')
    tu = ef(b, b.expr_call(x_sizeof_expr, [xa]))
    assert tu.emit_to_string() == pat('(sizeof(x))(a);')
    tu = ef(b, b.expr_direct_member(x_sizeof_expr, 'f'))
    assert tu.emit_to_string() == pat('(sizeof(x)).f;')
    tu = ef(b, b.expr_indirect_member(x_sizeof_expr, 'g'))
    assert tu.emit_to_string() == pat('(sizeof(x))->g;')
    tu = ef(b, b.expr_post_inc(x_sizeof_expr))
    assert tu.emit_to_string() == pat('(sizeof(x))++;')
    tu = ef(b, b.expr_post_dec(x_sizeof_expr))
    assert tu.emit_to_string() == pat('(sizeof(x))--;')
    tu = ef(b, b.expr_pre_inc(x_sizeof_expr))
    assert tu.emit_to_string() == pat('++sizeof(x);')
    tu = ef(b, b.expr_pre_dec(x_sizeof_expr))
    assert tu.emit_to_string() == pat('--sizeof(x);')
    tu = ef(b, b.expr_addressof(x_sizeof_expr))
    assert tu.emit_to_string() == pat('&sizeof(x);')
    tu = ef(b, b.expr_deref(x_sizeof_expr))
    assert tu.emit_to_string() == pat('*sizeof(x);')
    tu = ef(b, b.expr_unary_plus(x_sizeof_expr))
    assert tu.emit_to_string() == pat('+sizeof(x);')
    tu = ef(b, b.expr_unary_minus(x_sizeof_expr))
    assert tu.emit_to_string() == pat('-sizeof(x);')
    tu = ef(b, b.expr_bitwise_not(x_sizeof_expr))
    assert tu.emit_to_string() == pat('~sizeof(x);')
    tu = ef(b, b.expr_logical_not(x_sizeof_expr))
    assert tu.emit_to_string() == pat('!sizeof(x);')
    tu = ef(b, b.expr_sizeof_expr(x_sizeof_expr))
    assert tu.emit_to_string() == pat('sizeof(sizeof(x));')
    tu = ef(b, b.expr_cast(tv, x_sizeof_expr))
    assert tu.emit_to_string() == pat('(V)sizeof(x);')
    tu = ef(b, b.expr_times(x_sizeof_expr, xa))
    assert tu.emit_to_string() == pat('sizeof(x) * a;')
    tu = ef(b, b.expr_divide(x_sizeof_expr, xa))
    assert tu.emit_to_string() == pat('sizeof(x) / a;')
    tu = ef(b, b.expr_modulus(x_sizeof_expr, xa))
    assert tu.emit_to_string() == pat('sizeof(x) % a;')
    tu = ef(b, b.expr_plus(x_sizeof_expr, xa))
    assert tu.emit_to_string() == pat('sizeof(x) + a;')
    tu = ef(b, b.expr_minus(x_sizeof_expr, xa))
    assert tu.emit_to_string() == pat('sizeof(x) - a;')
    tu = ef(b, b.expr_lshift(x_sizeof_expr, xa))
    assert tu.emit_to_string() == pat('sizeof(x) << a;')
    tu = ef(b, b.expr_rshift(x_sizeof_expr, xa))
    assert tu.emit_to_string() == pat('sizeof(x) >> a;')
    tu = ef(b, b.expr_cmp_lt(x_sizeof_expr, xa))
    assert tu.emit_to_string() == pat('sizeof(x) < a;')
    tu = ef(b, b.expr_cmp_gt(x_sizeof_expr, xa))
    assert tu.emit_to_string() == pat('sizeof(x) > a;')
    tu = ef(b, b.expr_cmp_le(x_sizeof_expr, xa))
    assert tu.emit_to_string() == pat('sizeof(x) <= a;')
    tu = ef(b, b.expr_cmp_ge(x_sizeof_expr, xa))
    assert tu.emit_to_string() == pat('sizeof(x) >= a;')
    tu = ef(b, b.expr_cmp_eq(x_sizeof_expr, xa))
    assert tu.emit_to_string() == pat('sizeof(x) == a;')
    tu = ef(b, b.expr_cmp_ne(x_sizeof_expr, xa))
    assert tu.emit_to_string() == pat('sizeof(x) != a;')
    tu = ef(b, b.expr_bitwise_and(x_sizeof_expr, xa))
    assert tu.emit_to_string() == pat('sizeof(x) & a;')
    tu = ef(b, b.expr_bitwise_xor(x_sizeof_expr, xa))
    assert tu.emit_to_string() == pat('sizeof(x) ^ a;')
    tu = ef(b, b.expr_bitwise_or(x_sizeof_expr, xa))
    assert tu.emit_to_string() == pat('sizeof(x) | a;')
    tu = ef(b, b.expr_logical_and(x_sizeof_expr, xa))
    assert tu.emit_to_string() == pat('sizeof(x) && a;')
    tu = ef(b, b.expr_logical_or(x_sizeof_expr, xa))
    assert tu.emit_to_string() == pat('sizeof(x) || a;')
    tu = ef(b, b.expr_conditional(x_sizeof_expr, xa, xb))
    assert tu.emit_to_string() == pat('sizeof(x) ? a : b;')
    tu = ef(b, b.expr_assign(x_sizeof_expr, xa))
    assert tu.emit_to_string() == pat('sizeof(x) = a;')
    tu = ef(b, b.expr_assign_times(x_sizeof_expr, xa))
    assert tu.emit_to_string() == pat('sizeof(x) *= a;')
    tu = ef(b, b.expr_assign_divide(x_sizeof_expr, xa))
    assert tu.emit_to_string() == pat('sizeof(x) /= a;')
    tu = ef(b, b.expr_assign_modulus(x_sizeof_expr, xa))
    assert tu.emit_to_string() == pat('sizeof(x) %= a;')
    tu = ef(b, b.expr_assign_plus(x_sizeof_expr, xa))
    assert tu.emit_to_string() == pat('sizeof(x) += a;')
    tu = ef(b, b.expr_assign_minus(x_sizeof_expr, xa))
    assert tu.emit_to_string() == pat('sizeof(x) -= a;')
    tu = ef(b, b.expr_assign_lshift(x_sizeof_expr, xa))
    assert tu.emit_to_string() == pat('sizeof(x) <<= a;')
    tu = ef(b, b.expr_assign_rshift(x_sizeof_expr, xa))
    assert tu.emit_to_string() == pat('sizeof(x) >>= a;')
    tu = ef(b, b.expr_assign_bitwise_and(x_sizeof_expr, xa))
    assert tu.emit_to_string() == pat('sizeof(x) &= a;')
    tu = ef(b, b.expr_assign_bitwise_xor(x_sizeof_expr, xa))
    assert tu.emit_to_string() == pat('sizeof(x) ^= a;')
    tu = ef(b, b.expr_assign_bitwise_or(x_sizeof_expr, xa))
    assert tu.emit_to_string() == pat('sizeof(x) |= a;')
    tu = ef(b, b.expr_comma(x_sizeof_expr, xa))
    assert tu.emit_to_string() == pat('sizeof(x), a;')
    tu = ef(b, b.expr_index(xa, x_sizeof_expr))
    assert tu.emit_to_string() == pat('a[sizeof(x)];')
    tu = ef(b, b.expr_call(xa, [x_sizeof_expr]))
    assert tu.emit_to_string() == pat('a(sizeof(x));')
    tu = ef(b, b.expr_times(xa, x_sizeof_expr))
    assert tu.emit_to_string() == pat('a * sizeof(x);')
    tu = ef(b, b.expr_divide(xa, x_sizeof_expr))
    assert tu.emit_to_string() == pat('a / sizeof(x);')
    tu = ef(b, b.expr_modulus(xa, x_sizeof_expr))
    assert tu.emit_to_string() == pat('a % sizeof(x);')
    tu = ef(b, b.expr_plus(xa, x_sizeof_expr))
    assert tu.emit_to_string() == pat('a + sizeof(x);')
    tu = ef(b, b.expr_minus(xa, x_sizeof_expr))
    assert tu.emit_to_string() == pat('a - sizeof(x);')
    tu = ef(b, b.expr_lshift(xa, x_sizeof_expr))
    assert tu.emit_to_string() == pat('a << sizeof(x);')
    tu = ef(b, b.expr_rshift(xa, x_sizeof_expr))
    assert tu.emit_to_string() == pat('a >> sizeof(x);')
    tu = ef(b, b.expr_cmp_lt(xa, x_sizeof_expr))
    assert tu.emit_to_string() == pat('a < sizeof(x);')
    tu = ef(b, b.expr_cmp_gt(xa, x_sizeof_expr))
    assert tu.emit_to_string() == pat('a > sizeof(x);')
    tu = ef(b, b.expr_cmp_le(xa, x_sizeof_expr))
    assert tu.emit_to_string() == pat('a <= sizeof(x);')
    tu = ef(b, b.expr_cmp_ge(xa, x_sizeof_expr))
    assert tu.emit_to_string() == pat('a >= sizeof(x);')
    tu = ef(b, b.expr_cmp_eq(xa, x_sizeof_expr))
    assert tu.emit_to_string() == pat('a == sizeof(x);')
    tu = ef(b, b.expr_cmp_ne(xa, x_sizeof_expr))
    assert tu.emit_to_string() == pat('a != sizeof(x);')
    tu = ef(b, b.expr_bitwise_and(xa, x_sizeof_expr))
    assert tu.emit_to_string() == pat('a & sizeof(x);')
    tu = ef(b, b.expr_bitwise_xor(xa, x_sizeof_expr))
    assert tu.emit_to_string() == pat('a ^ sizeof(x);')
    tu = ef(b, b.expr_bitwise_or(xa, x_sizeof_expr))
    assert tu.emit_to_string() == pat('a | sizeof(x);')
    tu = ef(b, b.expr_logical_and(xa, x_sizeof_expr))
    assert tu.emit_to_string() == pat('a && sizeof(x);')
    tu = ef(b, b.expr_logical_or(xa, x_sizeof_expr))
    assert tu.emit_to_string() == pat('a || sizeof(x);')
    tu = ef(b, b.expr_conditional(xa, x_sizeof_expr, xb))
    assert tu.emit_to_string() == pat('a ? sizeof(x) : b;')
    tu = ef(b, b.expr_assign(xa, x_sizeof_expr))
    assert tu.emit_to_string() == pat('a = sizeof(x);')
    tu = ef(b, b.expr_assign_times(xa, x_sizeof_expr))
    assert tu.emit_to_string() == pat('a *= sizeof(x);')
    tu = ef(b, b.expr_assign_divide(xa, x_sizeof_expr))
    assert tu.emit_to_string() == pat('a /= sizeof(x);')
    tu = ef(b, b.expr_assign_modulus(xa, x_sizeof_expr))
    assert tu.emit_to_string() == pat('a %= sizeof(x);')
    tu = ef(b, b.expr_assign_plus(xa, x_sizeof_expr))
    assert tu.emit_to_string() == pat('a += sizeof(x);')
    tu = ef(b, b.expr_assign_minus(xa, x_sizeof_expr))
    assert tu.emit_to_string() == pat('a -= sizeof(x);')
    tu = ef(b, b.expr_assign_lshift(xa, x_sizeof_expr))
    assert tu.emit_to_string() == pat('a <<= sizeof(x);')
    tu = ef(b, b.expr_assign_rshift(xa, x_sizeof_expr))
    assert tu.emit_to_string() == pat('a >>= sizeof(x);')
    tu = ef(b, b.expr_assign_bitwise_and(xa, x_sizeof_expr))
    assert tu.emit_to_string() == pat('a &= sizeof(x);')
    tu = ef(b, b.expr_assign_bitwise_xor(xa, x_sizeof_expr))
    assert tu.emit_to_string() == pat('a ^= sizeof(x);')
    tu = ef(b, b.expr_assign_bitwise_or(xa, x_sizeof_expr))
    assert tu.emit_to_string() == pat('a |= sizeof(x);')
    tu = ef(b, b.expr_comma(xa, x_sizeof_expr))
    assert tu.emit_to_string() == pat('a, sizeof(x);')
    tu = ef(b, b.expr_conditional(xa, xb, x_sizeof_expr))
    assert tu.emit_to_string() == pat('a ? b : sizeof(x);')

    tu = ef(b, b.expr_index(x_sizeof_type, xa))
    assert tu.emit_to_string() == pat('(sizeof(W))[a];')
    tu = ef(b, b.expr_call(x_sizeof_type, [xa]))
    assert tu.emit_to_string() == pat('(sizeof(W))(a);')
    tu = ef(b, b.expr_direct_member(x_sizeof_type, 'f'))
    assert tu.emit_to_string() == pat('(sizeof(W)).f;')
    tu = ef(b, b.expr_indirect_member(x_sizeof_type, 'g'))
    assert tu.emit_to_string() == pat('(sizeof(W))->g;')
    tu = ef(b, b.expr_post_inc(x_sizeof_type))
    assert tu.emit_to_string() == pat('(sizeof(W))++;')
    tu = ef(b, b.expr_post_dec(x_sizeof_type))
    assert tu.emit_to_string() == pat('(sizeof(W))--;')
    tu = ef(b, b.expr_pre_inc(x_sizeof_type))
    assert tu.emit_to_string() == pat('++sizeof(W);')
    tu = ef(b, b.expr_pre_dec(x_sizeof_type))
    assert tu.emit_to_string() == pat('--sizeof(W);')
    tu = ef(b, b.expr_addressof(x_sizeof_type))
    assert tu.emit_to_string() == pat('&sizeof(W);')
    tu = ef(b, b.expr_deref(x_sizeof_type))
    assert tu.emit_to_string() == pat('*sizeof(W);')
    tu = ef(b, b.expr_unary_plus(x_sizeof_type))
    assert tu.emit_to_string() == pat('+sizeof(W);')
    tu = ef(b, b.expr_unary_minus(x_sizeof_type))
    assert tu.emit_to_string() == pat('-sizeof(W);')
    tu = ef(b, b.expr_bitwise_not(x_sizeof_type))
    assert tu.emit_to_string() == pat('~sizeof(W);')
    tu = ef(b, b.expr_logical_not(x_sizeof_type))
    assert tu.emit_to_string() == pat('!sizeof(W);')
    tu = ef(b, b.expr_sizeof_expr(x_sizeof_type))
    assert tu.emit_to_string() == pat('sizeof(sizeof(W));')
    tu = ef(b, b.expr_cast(tv, x_sizeof_type))
    assert tu.emit_to_string() == pat('(V)sizeof(W);')
    tu = ef(b, b.expr_times(x_sizeof_type, xa))
    assert tu.emit_to_string() == pat('sizeof(W) * a;')
    tu = ef(b, b.expr_divide(x_sizeof_type, xa))
    assert tu.emit_to_string() == pat('sizeof(W) / a;')
    tu = ef(b, b.expr_modulus(x_sizeof_type, xa))
    assert tu.emit_to_string() == pat('sizeof(W) % a;')
    tu = ef(b, b.expr_plus(x_sizeof_type, xa))
    assert tu.emit_to_string() == pat('sizeof(W) + a;')
    tu = ef(b, b.expr_minus(x_sizeof_type, xa))
    assert tu.emit_to_string() == pat('sizeof(W) - a;')
    tu = ef(b, b.expr_lshift(x_sizeof_type, xa))
    assert tu.emit_to_string() == pat('sizeof(W) << a;')
    tu = ef(b, b.expr_rshift(x_sizeof_type, xa))
    assert tu.emit_to_string() == pat('sizeof(W) >> a;')
    tu = ef(b, b.expr_cmp_lt(x_sizeof_type, xa))
    assert tu.emit_to_string() == pat('sizeof(W) < a;')
    tu = ef(b, b.expr_cmp_gt(x_sizeof_type, xa))
    assert tu.emit_to_string() == pat('sizeof(W) > a;')
    tu = ef(b, b.expr_cmp_le(x_sizeof_type, xa))
    assert tu.emit_to_string() == pat('sizeof(W) <= a;')
    tu = ef(b, b.expr_cmp_ge(x_sizeof_type, xa))
    assert tu.emit_to_string() == pat('sizeof(W) >= a;')
    tu = ef(b, b.expr_cmp_eq(x_sizeof_type, xa))
    assert tu.emit_to_string() == pat('sizeof(W) == a;')
    tu = ef(b, b.expr_cmp_ne(x_sizeof_type, xa))
    assert tu.emit_to_string() == pat('sizeof(W) != a;')
    tu = ef(b, b.expr_bitwise_and(x_sizeof_type, xa))
    assert tu.emit_to_string() == pat('sizeof(W) & a;')
    tu = ef(b, b.expr_bitwise_xor(x_sizeof_type, xa))
    assert tu.emit_to_string() == pat('sizeof(W) ^ a;')
    tu = ef(b, b.expr_bitwise_or(x_sizeof_type, xa))
    assert tu.emit_to_string() == pat('sizeof(W) | a;')
    tu = ef(b, b.expr_logical_and(x_sizeof_type, xa))
    assert tu.emit_to_string() == pat('sizeof(W) && a;')
    tu = ef(b, b.expr_logical_or(x_sizeof_type, xa))
    assert tu.emit_to_string() == pat('sizeof(W) || a;')
    tu = ef(b, b.expr_conditional(x_sizeof_type, xa, xb))
    assert tu.emit_to_string() == pat('sizeof(W) ? a : b;')
    tu = ef(b, b.expr_assign(x_sizeof_type, xa))
    assert tu.emit_to_string() == pat('sizeof(W) = a;')
    tu = ef(b, b.expr_assign_times(x_sizeof_type, xa))
    assert tu.emit_to_string() == pat('sizeof(W) *= a;')
    tu = ef(b, b.expr_assign_divide(x_sizeof_type, xa))
    assert tu.emit_to_string() == pat('sizeof(W) /= a;')
    tu = ef(b, b.expr_assign_modulus(x_sizeof_type, xa))
    assert tu.emit_to_string() == pat('sizeof(W) %= a;')
    tu = ef(b, b.expr_assign_plus(x_sizeof_type, xa))
    assert tu.emit_to_string() == pat('sizeof(W) += a;')
    tu = ef(b, b.expr_assign_minus(x_sizeof_type, xa))
    assert tu.emit_to_string() == pat('sizeof(W) -= a;')
    tu = ef(b, b.expr_assign_lshift(x_sizeof_type, xa))
    assert tu.emit_to_string() == pat('sizeof(W) <<= a;')
    tu = ef(b, b.expr_assign_rshift(x_sizeof_type, xa))
    assert tu.emit_to_string() == pat('sizeof(W) >>= a;')
    tu = ef(b, b.expr_assign_bitwise_and(x_sizeof_type, xa))
    assert tu.emit_to_string() == pat('sizeof(W) &= a;')
    tu = ef(b, b.expr_assign_bitwise_xor(x_sizeof_type, xa))
    assert tu.emit_to_string() == pat('sizeof(W) ^= a;')
    tu = ef(b, b.expr_assign_bitwise_or(x_sizeof_type, xa))
    assert tu.emit_to_string() == pat('sizeof(W) |= a;')
    tu = ef(b, b.expr_comma(x_sizeof_type, xa))
    assert tu.emit_to_string() == pat('sizeof(W), a;')
    tu = ef(b, b.expr_index(xa, x_sizeof_type))
    assert tu.emit_to_string() == pat('a[sizeof(W)];')
    tu = ef(b, b.expr_call(xa, [x_sizeof_type]))
    assert tu.emit_to_string() == pat('a(sizeof(W));')
    tu = ef(b, b.expr_times(xa, x_sizeof_type))
    assert tu.emit_to_string() == pat('a * sizeof(W);')
    tu = ef(b, b.expr_divide(xa, x_sizeof_type))
    assert tu.emit_to_string() == pat('a / sizeof(W);')
    tu = ef(b, b.expr_modulus(xa, x_sizeof_type))
    assert tu.emit_to_string() == pat('a % sizeof(W);')
    tu = ef(b, b.expr_plus(xa, x_sizeof_type))
    assert tu.emit_to_string() == pat('a + sizeof(W);')
    tu = ef(b, b.expr_minus(xa, x_sizeof_type))
    assert tu.emit_to_string() == pat('a - sizeof(W);')
    tu = ef(b, b.expr_lshift(xa, x_sizeof_type))
    assert tu.emit_to_string() == pat('a << sizeof(W);')
    tu = ef(b, b.expr_rshift(xa, x_sizeof_type))
    assert tu.emit_to_string() == pat('a >> sizeof(W);')
    tu = ef(b, b.expr_cmp_lt(xa, x_sizeof_type))
    assert tu.emit_to_string() == pat('a < sizeof(W);')
    tu = ef(b, b.expr_cmp_gt(xa, x_sizeof_type))
    assert tu.emit_to_string() == pat('a > sizeof(W);')
    tu = ef(b, b.expr_cmp_le(xa, x_sizeof_type))
    assert tu.emit_to_string() == pat('a <= sizeof(W);')
    tu = ef(b, b.expr_cmp_ge(xa, x_sizeof_type))
    assert tu.emit_to_string() == pat('a >= sizeof(W);')
    tu = ef(b, b.expr_cmp_eq(xa, x_sizeof_type))
    assert tu.emit_to_string() == pat('a == sizeof(W);')
    tu = ef(b, b.expr_cmp_ne(xa, x_sizeof_type))
    assert tu.emit_to_string() == pat('a != sizeof(W);')
    tu = ef(b, b.expr_bitwise_and(xa, x_sizeof_type))
    assert tu.emit_to_string() == pat('a & sizeof(W);')
    tu = ef(b, b.expr_bitwise_xor(xa, x_sizeof_type))
    assert tu.emit_to_string() == pat('a ^ sizeof(W);')
    tu = ef(b, b.expr_bitwise_or(xa, x_sizeof_type))
    assert tu.emit_to_string() == pat('a | sizeof(W);')
    tu = ef(b, b.expr_logical_and(xa, x_sizeof_type))
    assert tu.emit_to_string() == pat('a && sizeof(W);')
    tu = ef(b, b.expr_logical_or(xa, x_sizeof_type))
    assert tu.emit_to_string() == pat('a || sizeof(W);')
    tu = ef(b, b.expr_conditional(xa, x_sizeof_type, xb))
    assert tu.emit_to_string() == pat('a ? sizeof(W) : b;')
    tu = ef(b, b.expr_assign(xa, x_sizeof_type))
    assert tu.emit_to_string() == pat('a = sizeof(W);')
    tu = ef(b, b.expr_assign_times(xa, x_sizeof_type))
    assert tu.emit_to_string() == pat('a *= sizeof(W);')
    tu = ef(b, b.expr_assign_divide(xa, x_sizeof_type))
    assert tu.emit_to_string() == pat('a /= sizeof(W);')
    tu = ef(b, b.expr_assign_modulus(xa, x_sizeof_type))
    assert tu.emit_to_string() == pat('a %= sizeof(W);')
    tu = ef(b, b.expr_assign_plus(xa, x_sizeof_type))
    assert tu.emit_to_string() == pat('a += sizeof(W);')
    tu = ef(b, b.expr_assign_minus(xa, x_sizeof_type))
    assert tu.emit_to_string() == pat('a -= sizeof(W);')
    tu = ef(b, b.expr_assign_lshift(xa, x_sizeof_type))
    assert tu.emit_to_string() == pat('a <<= sizeof(W);')
    tu = ef(b, b.expr_assign_rshift(xa, x_sizeof_type))
    assert tu.emit_to_string() == pat('a >>= sizeof(W);')
    tu = ef(b, b.expr_assign_bitwise_and(xa, x_sizeof_type))
    assert tu.emit_to_string() == pat('a &= sizeof(W);')
    tu = ef(b, b.expr_assign_bitwise_xor(xa, x_sizeof_type))
    assert tu.emit_to_string() == pat('a ^= sizeof(W);')
    tu = ef(b, b.expr_assign_bitwise_or(xa, x_sizeof_type))
    assert tu.emit_to_string() == pat('a |= sizeof(W);')
    tu = ef(b, b.expr_comma(xa, x_sizeof_type))
    assert tu.emit_to_string() == pat('a, sizeof(W);')
    tu = ef(b, b.expr_conditional(xa, xb, x_sizeof_type))
    assert tu.emit_to_string() == pat('a ? b : sizeof(W);')

    tu = ef(b, b.expr_index(x_cast, xa))
    assert tu.emit_to_string() == pat('((W)x)[a];')
    tu = ef(b, b.expr_call(x_cast, [xa]))
    assert tu.emit_to_string() == pat('((W)x)(a);')
    tu = ef(b, b.expr_direct_member(x_cast, 'f'))
    assert tu.emit_to_string() == pat('((W)x).f;')
    tu = ef(b, b.expr_indirect_member(x_cast, 'g'))
    assert tu.emit_to_string() == pat('((W)x)->g;')
    tu = ef(b, b.expr_post_inc(x_cast))
    assert tu.emit_to_string() == pat('((W)x)++;')
    tu = ef(b, b.expr_post_dec(x_cast))
    assert tu.emit_to_string() == pat('((W)x)--;')
    tu = ef(b, b.expr_pre_inc(x_cast))
    assert tu.emit_to_string() == pat('++(W)x;')
    tu = ef(b, b.expr_pre_dec(x_cast))
    assert tu.emit_to_string() == pat('--(W)x;')
    tu = ef(b, b.expr_addressof(x_cast))
    assert tu.emit_to_string() == pat('&(W)x;')
    tu = ef(b, b.expr_deref(x_cast))
    assert tu.emit_to_string() == pat('*(W)x;')
    tu = ef(b, b.expr_unary_plus(x_cast))
    assert tu.emit_to_string() == pat('+(W)x;')
    tu = ef(b, b.expr_unary_minus(x_cast))
    assert tu.emit_to_string() == pat('-(W)x;')
    tu = ef(b, b.expr_bitwise_not(x_cast))
    assert tu.emit_to_string() == pat('~(W)x;')
    tu = ef(b, b.expr_logical_not(x_cast))
    assert tu.emit_to_string() == pat('!(W)x;')
    tu = ef(b, b.expr_sizeof_expr(x_cast))
    assert tu.emit_to_string() == pat('sizeof((W)x);')
    tu = ef(b, b.expr_cast(tv, x_cast))
    assert tu.emit_to_string() == pat('(V)(W)x;')
    tu = ef(b, b.expr_times(x_cast, xa))
    assert tu.emit_to_string() == pat('(W)x * a;')
    tu = ef(b, b.expr_divide(x_cast, xa))
    assert tu.emit_to_string() == pat('(W)x / a;')
    tu = ef(b, b.expr_modulus(x_cast, xa))
    assert tu.emit_to_string() == pat('(W)x % a;')
    tu = ef(b, b.expr_plus(x_cast, xa))
    assert tu.emit_to_string() == pat('(W)x + a;')
    tu = ef(b, b.expr_minus(x_cast, xa))
    assert tu.emit_to_string() == pat('(W)x - a;')
    tu = ef(b, b.expr_lshift(x_cast, xa))
    assert tu.emit_to_string() == pat('(W)x << a;')
    tu = ef(b, b.expr_rshift(x_cast, xa))
    assert tu.emit_to_string() == pat('(W)x >> a;')
    tu = ef(b, b.expr_cmp_lt(x_cast, xa))
    assert tu.emit_to_string() == pat('(W)x < a;')
    tu = ef(b, b.expr_cmp_gt(x_cast, xa))
    assert tu.emit_to_string() == pat('(W)x > a;')
    tu = ef(b, b.expr_cmp_le(x_cast, xa))
    assert tu.emit_to_string() == pat('(W)x <= a;')
    tu = ef(b, b.expr_cmp_ge(x_cast, xa))
    assert tu.emit_to_string() == pat('(W)x >= a;')
    tu = ef(b, b.expr_cmp_eq(x_cast, xa))
    assert tu.emit_to_string() == pat('(W)x == a;')
    tu = ef(b, b.expr_cmp_ne(x_cast, xa))
    assert tu.emit_to_string() == pat('(W)x != a;')
    tu = ef(b, b.expr_bitwise_and(x_cast, xa))
    assert tu.emit_to_string() == pat('(W)x & a;')
    tu = ef(b, b.expr_bitwise_xor(x_cast, xa))
    assert tu.emit_to_string() == pat('(W)x ^ a;')
    tu = ef(b, b.expr_bitwise_or(x_cast, xa))
    assert tu.emit_to_string() == pat('(W)x | a;')
    tu = ef(b, b.expr_logical_and(x_cast, xa))
    assert tu.emit_to_string() == pat('(W)x && a;')
    tu = ef(b, b.expr_logical_or(x_cast, xa))
    assert tu.emit_to_string() == pat('(W)x || a;')
    tu = ef(b, b.expr_conditional(x_cast, xa, xb))
    assert tu.emit_to_string() == pat('(W)x ? a : b;')
    tu = ef(b, b.expr_assign(x_cast, xa))
    assert tu.emit_to_string() == pat('(W)x = a;')
    tu = ef(b, b.expr_assign_times(x_cast, xa))
    assert tu.emit_to_string() == pat('(W)x *= a;')
    tu = ef(b, b.expr_assign_divide(x_cast, xa))
    assert tu.emit_to_string() == pat('(W)x /= a;')
    tu = ef(b, b.expr_assign_modulus(x_cast, xa))
    assert tu.emit_to_string() == pat('(W)x %= a;')
    tu = ef(b, b.expr_assign_plus(x_cast, xa))
    assert tu.emit_to_string() == pat('(W)x += a;')
    tu = ef(b, b.expr_assign_minus(x_cast, xa))
    assert tu.emit_to_string() == pat('(W)x -= a;')
    tu = ef(b, b.expr_assign_lshift(x_cast, xa))
    assert tu.emit_to_string() == pat('(W)x <<= a;')
    tu = ef(b, b.expr_assign_rshift(x_cast, xa))
    assert tu.emit_to_string() == pat('(W)x >>= a;')
    tu = ef(b, b.expr_assign_bitwise_and(x_cast, xa))
    assert tu.emit_to_string() == pat('(W)x &= a;')
    tu = ef(b, b.expr_assign_bitwise_xor(x_cast, xa))
    assert tu.emit_to_string() == pat('(W)x ^= a;')
    tu = ef(b, b.expr_assign_bitwise_or(x_cast, xa))
    assert tu.emit_to_string() == pat('(W)x |= a;')
    tu = ef(b, b.expr_comma(x_cast, xa))
    assert tu.emit_to_string() == pat('(W)x, a;')
    tu = ef(b, b.expr_index(xa, x_cast))
    assert tu.emit_to_string() == pat('a[(W)x];')
    tu = ef(b, b.expr_call(xa, [x_cast]))
    assert tu.emit_to_string() == pat('a((W)x);')
    tu = ef(b, b.expr_times(xa, x_cast))
    assert tu.emit_to_string() == pat('a * (W)x;')
    tu = ef(b, b.expr_divide(xa, x_cast))
    assert tu.emit_to_string() == pat('a / (W)x;')
    tu = ef(b, b.expr_modulus(xa, x_cast))
    assert tu.emit_to_string() == pat('a % (W)x;')
    tu = ef(b, b.expr_plus(xa, x_cast))
    assert tu.emit_to_string() == pat('a + (W)x;')
    tu = ef(b, b.expr_minus(xa, x_cast))
    assert tu.emit_to_string() == pat('a - (W)x;')
    tu = ef(b, b.expr_lshift(xa, x_cast))
    assert tu.emit_to_string() == pat('a << (W)x;')
    tu = ef(b, b.expr_rshift(xa, x_cast))
    assert tu.emit_to_string() == pat('a >> (W)x;')
    tu = ef(b, b.expr_cmp_lt(xa, x_cast))
    assert tu.emit_to_string() == pat('a < (W)x;')
    tu = ef(b, b.expr_cmp_gt(xa, x_cast))
    assert tu.emit_to_string() == pat('a > (W)x;')
    tu = ef(b, b.expr_cmp_le(xa, x_cast))
    assert tu.emit_to_string() == pat('a <= (W)x;')
    tu = ef(b, b.expr_cmp_ge(xa, x_cast))
    assert tu.emit_to_string() == pat('a >= (W)x;')
    tu = ef(b, b.expr_cmp_eq(xa, x_cast))
    assert tu.emit_to_string() == pat('a == (W)x;')
    tu = ef(b, b.expr_cmp_ne(xa, x_cast))
    assert tu.emit_to_string() == pat('a != (W)x;')
    tu = ef(b, b.expr_bitwise_and(xa, x_cast))
    assert tu.emit_to_string() == pat('a & (W)x;')
    tu = ef(b, b.expr_bitwise_xor(xa, x_cast))
    assert tu.emit_to_string() == pat('a ^ (W)x;')
    tu = ef(b, b.expr_bitwise_or(xa, x_cast))
    assert tu.emit_to_string() == pat('a | (W)x;')
    tu = ef(b, b.expr_logical_and(xa, x_cast))
    assert tu.emit_to_string() == pat('a && (W)x;')
    tu = ef(b, b.expr_logical_or(xa, x_cast))
    assert tu.emit_to_string() == pat('a || (W)x;')
    tu = ef(b, b.expr_conditional(xa, x_cast, xb))
    assert tu.emit_to_string() == pat('a ? (W)x : b;')
    tu = ef(b, b.expr_assign(xa, x_cast))
    assert tu.emit_to_string() == pat('a = (W)x;')
    tu = ef(b, b.expr_assign_times(xa, x_cast))
    assert tu.emit_to_string() == pat('a *= (W)x;')
    tu = ef(b, b.expr_assign_divide(xa, x_cast))
    assert tu.emit_to_string() == pat('a /= (W)x;')
    tu = ef(b, b.expr_assign_modulus(xa, x_cast))
    assert tu.emit_to_string() == pat('a %= (W)x;')
    tu = ef(b, b.expr_assign_plus(xa, x_cast))
    assert tu.emit_to_string() == pat('a += (W)x;')
    tu = ef(b, b.expr_assign_minus(xa, x_cast))
    assert tu.emit_to_string() == pat('a -= (W)x;')
    tu = ef(b, b.expr_assign_lshift(xa, x_cast))
    assert tu.emit_to_string() == pat('a <<= (W)x;')
    tu = ef(b, b.expr_assign_rshift(xa, x_cast))
    assert tu.emit_to_string() == pat('a >>= (W)x;')
    tu = ef(b, b.expr_assign_bitwise_and(xa, x_cast))
    assert tu.emit_to_string() == pat('a &= (W)x;')
    tu = ef(b, b.expr_assign_bitwise_xor(xa, x_cast))
    assert tu.emit_to_string() == pat('a ^= (W)x;')
    tu = ef(b, b.expr_assign_bitwise_or(xa, x_cast))
    assert tu.emit_to_string() == pat('a |= (W)x;')
    tu = ef(b, b.expr_comma(xa, x_cast))
    assert tu.emit_to_string() == pat('a, (W)x;')
    tu = ef(b, b.expr_conditional(xa, xb, x_cast))
    assert tu.emit_to_string() == pat('a ? b : (W)x;')

    tu = ef(b, b.expr_index(x_times, xa))
    assert tu.emit_to_string() == pat('(x * y)[a];')
    tu = ef(b, b.expr_call(x_times, [xa]))
    assert tu.emit_to_string() == pat('(x * y)(a);')
    tu = ef(b, b.expr_direct_member(x_times, 'f'))
    assert tu.emit_to_string() == pat('(x * y).f;')
    tu = ef(b, b.expr_indirect_member(x_times, 'g'))
    assert tu.emit_to_string() == pat('(x * y)->g;')
    tu = ef(b, b.expr_post_inc(x_times))
    assert tu.emit_to_string() == pat('(x * y)++;')
    tu = ef(b, b.expr_post_dec(x_times))
    assert tu.emit_to_string() == pat('(x * y)--;')
    tu = ef(b, b.expr_pre_inc(x_times))
    assert tu.emit_to_string() == pat('++(x * y);')
    tu = ef(b, b.expr_pre_dec(x_times))
    assert tu.emit_to_string() == pat('--(x * y);')
    tu = ef(b, b.expr_addressof(x_times))
    assert tu.emit_to_string() == pat('&(x * y);')
    tu = ef(b, b.expr_deref(x_times))
    assert tu.emit_to_string() == pat('*(x * y);')
    tu = ef(b, b.expr_unary_plus(x_times))
    assert tu.emit_to_string() == pat('+(x * y);')
    tu = ef(b, b.expr_unary_minus(x_times))
    assert tu.emit_to_string() == pat('-(x * y);')
    tu = ef(b, b.expr_bitwise_not(x_times))
    assert tu.emit_to_string() == pat('~(x * y);')
    tu = ef(b, b.expr_logical_not(x_times))
    assert tu.emit_to_string() == pat('!(x * y);')
    tu = ef(b, b.expr_sizeof_expr(x_times))
    assert tu.emit_to_string() == pat('sizeof(x * y);')
    tu = ef(b, b.expr_cast(tv, x_times))
    assert tu.emit_to_string() == pat('(V)(x * y);')
    tu = ef(b, b.expr_times(x_times, xa))
    assert tu.emit_to_string() == pat('x * y * a;')
    tu = ef(b, b.expr_divide(x_times, xa))
    assert tu.emit_to_string() == pat('x * y / a;')
    tu = ef(b, b.expr_modulus(x_times, xa))
    assert tu.emit_to_string() == pat('x * y % a;')
    tu = ef(b, b.expr_plus(x_times, xa))
    assert tu.emit_to_string() == pat('x * y + a;')
    tu = ef(b, b.expr_minus(x_times, xa))
    assert tu.emit_to_string() == pat('x * y - a;')
    tu = ef(b, b.expr_lshift(x_times, xa))
    assert tu.emit_to_string() == pat('x * y << a;')
    tu = ef(b, b.expr_rshift(x_times, xa))
    assert tu.emit_to_string() == pat('x * y >> a;')
    tu = ef(b, b.expr_cmp_lt(x_times, xa))
    assert tu.emit_to_string() == pat('x * y < a;')
    tu = ef(b, b.expr_cmp_gt(x_times, xa))
    assert tu.emit_to_string() == pat('x * y > a;')
    tu = ef(b, b.expr_cmp_le(x_times, xa))
    assert tu.emit_to_string() == pat('x * y <= a;')
    tu = ef(b, b.expr_cmp_ge(x_times, xa))
    assert tu.emit_to_string() == pat('x * y >= a;')
    tu = ef(b, b.expr_cmp_eq(x_times, xa))
    assert tu.emit_to_string() == pat('x * y == a;')
    tu = ef(b, b.expr_cmp_ne(x_times, xa))
    assert tu.emit_to_string() == pat('x * y != a;')
    tu = ef(b, b.expr_bitwise_and(x_times, xa))
    assert tu.emit_to_string() == pat('x * y & a;')
    tu = ef(b, b.expr_bitwise_xor(x_times, xa))
    assert tu.emit_to_string() == pat('x * y ^ a;')
    tu = ef(b, b.expr_bitwise_or(x_times, xa))
    assert tu.emit_to_string() == pat('x * y | a;')
    tu = ef(b, b.expr_logical_and(x_times, xa))
    assert tu.emit_to_string() == pat('x * y && a;')
    tu = ef(b, b.expr_logical_or(x_times, xa))
    assert tu.emit_to_string() == pat('x * y || a;')
    tu = ef(b, b.expr_conditional(x_times, xa, xb))
    assert tu.emit_to_string() == pat('x * y ? a : b;')
    tu = ef(b, b.expr_assign(x_times, xa))
    assert tu.emit_to_string() == pat('(x * y) = a;')
    tu = ef(b, b.expr_assign_times(x_times, xa))
    assert tu.emit_to_string() == pat('(x * y) *= a;')
    tu = ef(b, b.expr_assign_divide(x_times, xa))
    assert tu.emit_to_string() == pat('(x * y) /= a;')
    tu = ef(b, b.expr_assign_modulus(x_times, xa))
    assert tu.emit_to_string() == pat('(x * y) %= a;')
    tu = ef(b, b.expr_assign_plus(x_times, xa))
    assert tu.emit_to_string() == pat('(x * y) += a;')
    tu = ef(b, b.expr_assign_minus(x_times, xa))
    assert tu.emit_to_string() == pat('(x * y) -= a;')
    tu = ef(b, b.expr_assign_lshift(x_times, xa))
    assert tu.emit_to_string() == pat('(x * y) <<= a;')
    tu = ef(b, b.expr_assign_rshift(x_times, xa))
    assert tu.emit_to_string() == pat('(x * y) >>= a;')
    tu = ef(b, b.expr_assign_bitwise_and(x_times, xa))
    assert tu.emit_to_string() == pat('(x * y) &= a;')
    tu = ef(b, b.expr_assign_bitwise_xor(x_times, xa))
    assert tu.emit_to_string() == pat('(x * y) ^= a;')
    tu = ef(b, b.expr_assign_bitwise_or(x_times, xa))
    assert tu.emit_to_string() == pat('(x * y) |= a;')
    tu = ef(b, b.expr_comma(x_times, xa))
    assert tu.emit_to_string() == pat('x * y, a;')
    tu = ef(b, b.expr_index(xa, x_times))
    assert tu.emit_to_string() == pat('a[x * y];')
    tu = ef(b, b.expr_call(xa, [x_times]))
    assert tu.emit_to_string() == pat('a(x * y);')
    tu = ef(b, b.expr_times(xa, x_times))
    assert tu.emit_to_string() == pat('a * (x * y);')
    tu = ef(b, b.expr_divide(xa, x_times))
    assert tu.emit_to_string() == pat('a / (x * y);')
    tu = ef(b, b.expr_modulus(xa, x_times))
    assert tu.emit_to_string() == pat('a % (x * y);')
    tu = ef(b, b.expr_plus(xa, x_times))
    assert tu.emit_to_string() == pat('a + x * y;')
    tu = ef(b, b.expr_minus(xa, x_times))
    assert tu.emit_to_string() == pat('a - x * y;')
    tu = ef(b, b.expr_lshift(xa, x_times))
    assert tu.emit_to_string() == pat('a << x * y;')
    tu = ef(b, b.expr_rshift(xa, x_times))
    assert tu.emit_to_string() == pat('a >> x * y;')
    tu = ef(b, b.expr_cmp_lt(xa, x_times))
    assert tu.emit_to_string() == pat('a < x * y;')
    tu = ef(b, b.expr_cmp_gt(xa, x_times))
    assert tu.emit_to_string() == pat('a > x * y;')
    tu = ef(b, b.expr_cmp_le(xa, x_times))
    assert tu.emit_to_string() == pat('a <= x * y;')
    tu = ef(b, b.expr_cmp_ge(xa, x_times))
    assert tu.emit_to_string() == pat('a >= x * y;')
    tu = ef(b, b.expr_cmp_eq(xa, x_times))
    assert tu.emit_to_string() == pat('a == x * y;')
    tu = ef(b, b.expr_cmp_ne(xa, x_times))
    assert tu.emit_to_string() == pat('a != x * y;')
    tu = ef(b, b.expr_bitwise_and(xa, x_times))
    assert tu.emit_to_string() == pat('a & x * y;')
    tu = ef(b, b.expr_bitwise_xor(xa, x_times))
    assert tu.emit_to_string() == pat('a ^ x * y;')
    tu = ef(b, b.expr_bitwise_or(xa, x_times))
    assert tu.emit_to_string() == pat('a | x * y;')
    tu = ef(b, b.expr_logical_and(xa, x_times))
    assert tu.emit_to_string() == pat('a && x * y;')
    tu = ef(b, b.expr_logical_or(xa, x_times))
    assert tu.emit_to_string() == pat('a || x * y;')
    tu = ef(b, b.expr_conditional(xa, x_times, xb))
    assert tu.emit_to_string() == pat('a ? x * y : b;')
    tu = ef(b, b.expr_assign(xa, x_times))
    assert tu.emit_to_string() == pat('a = x * y;')
    tu = ef(b, b.expr_assign_times(xa, x_times))
    assert tu.emit_to_string() == pat('a *= x * y;')
    tu = ef(b, b.expr_assign_divide(xa, x_times))
    assert tu.emit_to_string() == pat('a /= x * y;')
    tu = ef(b, b.expr_assign_modulus(xa, x_times))
    assert tu.emit_to_string() == pat('a %= x * y;')
    tu = ef(b, b.expr_assign_plus(xa, x_times))
    assert tu.emit_to_string() == pat('a += x * y;')
    tu = ef(b, b.expr_assign_minus(xa, x_times))
    assert tu.emit_to_string() == pat('a -= x * y;')
    tu = ef(b, b.expr_assign_lshift(xa, x_times))
    assert tu.emit_to_string() == pat('a <<= x * y;')
    tu = ef(b, b.expr_assign_rshift(xa, x_times))
    assert tu.emit_to_string() == pat('a >>= x * y;')
    tu = ef(b, b.expr_assign_bitwise_and(xa, x_times))
    assert tu.emit_to_string() == pat('a &= x * y;')
    tu = ef(b, b.expr_assign_bitwise_xor(xa, x_times))
    assert tu.emit_to_string() == pat('a ^= x * y;')
    tu = ef(b, b.expr_assign_bitwise_or(xa, x_times))
    assert tu.emit_to_string() == pat('a |= x * y;')
    tu = ef(b, b.expr_comma(xa, x_times))
    assert tu.emit_to_string() == pat('a, x * y;')
    tu = ef(b, b.expr_conditional(xa, xb, x_times))
    assert tu.emit_to_string() == pat('a ? b : x * y;')

    tu = ef(b, b.expr_index(x_divide, xa))
    assert tu.emit_to_string() == pat('(x / y)[a];')
    tu = ef(b, b.expr_call(x_divide, [xa]))
    assert tu.emit_to_string() == pat('(x / y)(a);')
    tu = ef(b, b.expr_direct_member(x_divide, 'f'))
    assert tu.emit_to_string() == pat('(x / y).f;')
    tu = ef(b, b.expr_indirect_member(x_divide, 'g'))
    assert tu.emit_to_string() == pat('(x / y)->g;')
    tu = ef(b, b.expr_post_inc(x_divide))
    assert tu.emit_to_string() == pat('(x / y)++;')
    tu = ef(b, b.expr_post_dec(x_divide))
    assert tu.emit_to_string() == pat('(x / y)--;')
    tu = ef(b, b.expr_pre_inc(x_divide))
    assert tu.emit_to_string() == pat('++(x / y);')
    tu = ef(b, b.expr_pre_dec(x_divide))
    assert tu.emit_to_string() == pat('--(x / y);')
    tu = ef(b, b.expr_addressof(x_divide))
    assert tu.emit_to_string() == pat('&(x / y);')
    tu = ef(b, b.expr_deref(x_divide))
    assert tu.emit_to_string() == pat('*(x / y);')
    tu = ef(b, b.expr_unary_plus(x_divide))
    assert tu.emit_to_string() == pat('+(x / y);')
    tu = ef(b, b.expr_unary_minus(x_divide))
    assert tu.emit_to_string() == pat('-(x / y);')
    tu = ef(b, b.expr_bitwise_not(x_divide))
    assert tu.emit_to_string() == pat('~(x / y);')
    tu = ef(b, b.expr_logical_not(x_divide))
    assert tu.emit_to_string() == pat('!(x / y);')
    tu = ef(b, b.expr_sizeof_expr(x_divide))
    assert tu.emit_to_string() == pat('sizeof(x / y);')
    tu = ef(b, b.expr_cast(tv, x_divide))
    assert tu.emit_to_string() == pat('(V)(x / y);')
    tu = ef(b, b.expr_times(x_divide, xa))
    assert tu.emit_to_string() == pat('x / y * a;')
    tu = ef(b, b.expr_divide(x_divide, xa))
    assert tu.emit_to_string() == pat('x / y / a;')
    tu = ef(b, b.expr_modulus(x_divide, xa))
    assert tu.emit_to_string() == pat('x / y % a;')
    tu = ef(b, b.expr_plus(x_divide, xa))
    assert tu.emit_to_string() == pat('x / y + a;')
    tu = ef(b, b.expr_minus(x_divide, xa))
    assert tu.emit_to_string() == pat('x / y - a;')
    tu = ef(b, b.expr_lshift(x_divide, xa))
    assert tu.emit_to_string() == pat('x / y << a;')
    tu = ef(b, b.expr_rshift(x_divide, xa))
    assert tu.emit_to_string() == pat('x / y >> a;')
    tu = ef(b, b.expr_cmp_lt(x_divide, xa))
    assert tu.emit_to_string() == pat('x / y < a;')
    tu = ef(b, b.expr_cmp_gt(x_divide, xa))
    assert tu.emit_to_string() == pat('x / y > a;')
    tu = ef(b, b.expr_cmp_le(x_divide, xa))
    assert tu.emit_to_string() == pat('x / y <= a;')
    tu = ef(b, b.expr_cmp_ge(x_divide, xa))
    assert tu.emit_to_string() == pat('x / y >= a;')
    tu = ef(b, b.expr_cmp_eq(x_divide, xa))
    assert tu.emit_to_string() == pat('x / y == a;')
    tu = ef(b, b.expr_cmp_ne(x_divide, xa))
    assert tu.emit_to_string() == pat('x / y != a;')
    tu = ef(b, b.expr_bitwise_and(x_divide, xa))
    assert tu.emit_to_string() == pat('x / y & a;')
    tu = ef(b, b.expr_bitwise_xor(x_divide, xa))
    assert tu.emit_to_string() == pat('x / y ^ a;')
    tu = ef(b, b.expr_bitwise_or(x_divide, xa))
    assert tu.emit_to_string() == pat('x / y | a;')
    tu = ef(b, b.expr_logical_and(x_divide, xa))
    assert tu.emit_to_string() == pat('x / y && a;')
    tu = ef(b, b.expr_logical_or(x_divide, xa))
    assert tu.emit_to_string() == pat('x / y || a;')
    tu = ef(b, b.expr_conditional(x_divide, xa, xb))
    assert tu.emit_to_string() == pat('x / y ? a : b;')
    tu = ef(b, b.expr_assign(x_divide, xa))
    assert tu.emit_to_string() == pat('(x / y) = a;')
    tu = ef(b, b.expr_assign_times(x_divide, xa))
    assert tu.emit_to_string() == pat('(x / y) *= a;')
    tu = ef(b, b.expr_assign_divide(x_divide, xa))
    assert tu.emit_to_string() == pat('(x / y) /= a;')
    tu = ef(b, b.expr_assign_modulus(x_divide, xa))
    assert tu.emit_to_string() == pat('(x / y) %= a;')
    tu = ef(b, b.expr_assign_plus(x_divide, xa))
    assert tu.emit_to_string() == pat('(x / y) += a;')
    tu = ef(b, b.expr_assign_minus(x_divide, xa))
    assert tu.emit_to_string() == pat('(x / y) -= a;')
    tu = ef(b, b.expr_assign_lshift(x_divide, xa))
    assert tu.emit_to_string() == pat('(x / y) <<= a;')
    tu = ef(b, b.expr_assign_rshift(x_divide, xa))
    assert tu.emit_to_string() == pat('(x / y) >>= a;')
    tu = ef(b, b.expr_assign_bitwise_and(x_divide, xa))
    assert tu.emit_to_string() == pat('(x / y) &= a;')
    tu = ef(b, b.expr_assign_bitwise_xor(x_divide, xa))
    assert tu.emit_to_string() == pat('(x / y) ^= a;')
    tu = ef(b, b.expr_assign_bitwise_or(x_divide, xa))
    assert tu.emit_to_string() == pat('(x / y) |= a;')
    tu = ef(b, b.expr_comma(x_divide, xa))
    assert tu.emit_to_string() == pat('x / y, a;')
    tu = ef(b, b.expr_index(xa, x_divide))
    assert tu.emit_to_string() == pat('a[x / y];')
    tu = ef(b, b.expr_call(xa, [x_divide]))
    assert tu.emit_to_string() == pat('a(x / y);')
    tu = ef(b, b.expr_times(xa, x_divide))
    assert tu.emit_to_string() == pat('a * (x / y);')
    tu = ef(b, b.expr_divide(xa, x_divide))
    assert tu.emit_to_string() == pat('a / (x / y);')
    tu = ef(b, b.expr_modulus(xa, x_divide))
    assert tu.emit_to_string() == pat('a % (x / y);')
    tu = ef(b, b.expr_plus(xa, x_divide))
    assert tu.emit_to_string() == pat('a + x / y;')
    tu = ef(b, b.expr_minus(xa, x_divide))
    assert tu.emit_to_string() == pat('a - x / y;')
    tu = ef(b, b.expr_lshift(xa, x_divide))
    assert tu.emit_to_string() == pat('a << x / y;')
    tu = ef(b, b.expr_rshift(xa, x_divide))
    assert tu.emit_to_string() == pat('a >> x / y;')
    tu = ef(b, b.expr_cmp_lt(xa, x_divide))
    assert tu.emit_to_string() == pat('a < x / y;')
    tu = ef(b, b.expr_cmp_gt(xa, x_divide))
    assert tu.emit_to_string() == pat('a > x / y;')
    tu = ef(b, b.expr_cmp_le(xa, x_divide))
    assert tu.emit_to_string() == pat('a <= x / y;')
    tu = ef(b, b.expr_cmp_ge(xa, x_divide))
    assert tu.emit_to_string() == pat('a >= x / y;')
    tu = ef(b, b.expr_cmp_eq(xa, x_divide))
    assert tu.emit_to_string() == pat('a == x / y;')
    tu = ef(b, b.expr_cmp_ne(xa, x_divide))
    assert tu.emit_to_string() == pat('a != x / y;')
    tu = ef(b, b.expr_bitwise_and(xa, x_divide))
    assert tu.emit_to_string() == pat('a & x / y;')
    tu = ef(b, b.expr_bitwise_xor(xa, x_divide))
    assert tu.emit_to_string() == pat('a ^ x / y;')
    tu = ef(b, b.expr_bitwise_or(xa, x_divide))
    assert tu.emit_to_string() == pat('a | x / y;')
    tu = ef(b, b.expr_logical_and(xa, x_divide))
    assert tu.emit_to_string() == pat('a && x / y;')
    tu = ef(b, b.expr_logical_or(xa, x_divide))
    assert tu.emit_to_string() == pat('a || x / y;')
    tu = ef(b, b.expr_conditional(xa, x_divide, xb))
    assert tu.emit_to_string() == pat('a ? x / y : b;')
    tu = ef(b, b.expr_assign(xa, x_divide))
    assert tu.emit_to_string() == pat('a = x / y;')
    tu = ef(b, b.expr_assign_times(xa, x_divide))
    assert tu.emit_to_string() == pat('a *= x / y;')
    tu = ef(b, b.expr_assign_divide(xa, x_divide))
    assert tu.emit_to_string() == pat('a /= x / y;')
    tu = ef(b, b.expr_assign_modulus(xa, x_divide))
    assert tu.emit_to_string() == pat('a %= x / y;')
    tu = ef(b, b.expr_assign_plus(xa, x_divide))
    assert tu.emit_to_string() == pat('a += x / y;')
    tu = ef(b, b.expr_assign_minus(xa, x_divide))
    assert tu.emit_to_string() == pat('a -= x / y;')
    tu = ef(b, b.expr_assign_lshift(xa, x_divide))
    assert tu.emit_to_string() == pat('a <<= x / y;')
    tu = ef(b, b.expr_assign_rshift(xa, x_divide))
    assert tu.emit_to_string() == pat('a >>= x / y;')
    tu = ef(b, b.expr_assign_bitwise_and(xa, x_divide))
    assert tu.emit_to_string() == pat('a &= x / y;')
    tu = ef(b, b.expr_assign_bitwise_xor(xa, x_divide))
    assert tu.emit_to_string() == pat('a ^= x / y;')
    tu = ef(b, b.expr_assign_bitwise_or(xa, x_divide))
    assert tu.emit_to_string() == pat('a |= x / y;')
    tu = ef(b, b.expr_comma(xa, x_divide))
    assert tu.emit_to_string() == pat('a, x / y;')
    tu = ef(b, b.expr_conditional(xa, xb, x_divide))
    assert tu.emit_to_string() == pat('a ? b : x / y;')

    tu = ef(b, b.expr_index(x_modulus, xa))
    assert tu.emit_to_string() == pat('(x % y)[a];')
    tu = ef(b, b.expr_call(x_modulus, [xa]))
    assert tu.emit_to_string() == pat('(x % y)(a);')
    tu = ef(b, b.expr_direct_member(x_modulus, 'f'))
    assert tu.emit_to_string() == pat('(x % y).f;')
    tu = ef(b, b.expr_indirect_member(x_modulus, 'g'))
    assert tu.emit_to_string() == pat('(x % y)->g;')
    tu = ef(b, b.expr_post_inc(x_modulus))
    assert tu.emit_to_string() == pat('(x % y)++;')
    tu = ef(b, b.expr_post_dec(x_modulus))
    assert tu.emit_to_string() == pat('(x % y)--;')
    tu = ef(b, b.expr_pre_inc(x_modulus))
    assert tu.emit_to_string() == pat('++(x % y);')
    tu = ef(b, b.expr_pre_dec(x_modulus))
    assert tu.emit_to_string() == pat('--(x % y);')
    tu = ef(b, b.expr_addressof(x_modulus))
    assert tu.emit_to_string() == pat('&(x % y);')
    tu = ef(b, b.expr_deref(x_modulus))
    assert tu.emit_to_string() == pat('*(x % y);')
    tu = ef(b, b.expr_unary_plus(x_modulus))
    assert tu.emit_to_string() == pat('+(x % y);')
    tu = ef(b, b.expr_unary_minus(x_modulus))
    assert tu.emit_to_string() == pat('-(x % y);')
    tu = ef(b, b.expr_bitwise_not(x_modulus))
    assert tu.emit_to_string() == pat('~(x % y);')
    tu = ef(b, b.expr_logical_not(x_modulus))
    assert tu.emit_to_string() == pat('!(x % y);')
    tu = ef(b, b.expr_sizeof_expr(x_modulus))
    assert tu.emit_to_string() == pat('sizeof(x % y);')
    tu = ef(b, b.expr_cast(tv, x_modulus))
    assert tu.emit_to_string() == pat('(V)(x % y);')
    tu = ef(b, b.expr_times(x_modulus, xa))
    assert tu.emit_to_string() == pat('x % y * a;')
    tu = ef(b, b.expr_divide(x_modulus, xa))
    assert tu.emit_to_string() == pat('x % y / a;')
    tu = ef(b, b.expr_modulus(x_modulus, xa))
    assert tu.emit_to_string() == pat('x % y % a;')
    tu = ef(b, b.expr_plus(x_modulus, xa))
    assert tu.emit_to_string() == pat('x % y + a;')
    tu = ef(b, b.expr_minus(x_modulus, xa))
    assert tu.emit_to_string() == pat('x % y - a;')
    tu = ef(b, b.expr_lshift(x_modulus, xa))
    assert tu.emit_to_string() == pat('x % y << a;')
    tu = ef(b, b.expr_rshift(x_modulus, xa))
    assert tu.emit_to_string() == pat('x % y >> a;')
    tu = ef(b, b.expr_cmp_lt(x_modulus, xa))
    assert tu.emit_to_string() == pat('x % y < a;')
    tu = ef(b, b.expr_cmp_gt(x_modulus, xa))
    assert tu.emit_to_string() == pat('x % y > a;')
    tu = ef(b, b.expr_cmp_le(x_modulus, xa))
    assert tu.emit_to_string() == pat('x % y <= a;')
    tu = ef(b, b.expr_cmp_ge(x_modulus, xa))
    assert tu.emit_to_string() == pat('x % y >= a;')
    tu = ef(b, b.expr_cmp_eq(x_modulus, xa))
    assert tu.emit_to_string() == pat('x % y == a;')
    tu = ef(b, b.expr_cmp_ne(x_modulus, xa))
    assert tu.emit_to_string() == pat('x % y != a;')
    tu = ef(b, b.expr_bitwise_and(x_modulus, xa))
    assert tu.emit_to_string() == pat('x % y & a;')
    tu = ef(b, b.expr_bitwise_xor(x_modulus, xa))
    assert tu.emit_to_string() == pat('x % y ^ a;')
    tu = ef(b, b.expr_bitwise_or(x_modulus, xa))
    assert tu.emit_to_string() == pat('x % y | a;')
    tu = ef(b, b.expr_logical_and(x_modulus, xa))
    assert tu.emit_to_string() == pat('x % y && a;')
    tu = ef(b, b.expr_logical_or(x_modulus, xa))
    assert tu.emit_to_string() == pat('x % y || a;')
    tu = ef(b, b.expr_conditional(x_modulus, xa, xb))
    assert tu.emit_to_string() == pat('x % y ? a : b;')
    tu = ef(b, b.expr_assign(x_modulus, xa))
    assert tu.emit_to_string() == pat('(x % y) = a;')
    tu = ef(b, b.expr_assign_times(x_modulus, xa))
    assert tu.emit_to_string() == pat('(x % y) *= a;')
    tu = ef(b, b.expr_assign_divide(x_modulus, xa))
    assert tu.emit_to_string() == pat('(x % y) /= a;')
    tu = ef(b, b.expr_assign_modulus(x_modulus, xa))
    assert tu.emit_to_string() == pat('(x % y) %= a;')
    tu = ef(b, b.expr_assign_plus(x_modulus, xa))
    assert tu.emit_to_string() == pat('(x % y) += a;')
    tu = ef(b, b.expr_assign_minus(x_modulus, xa))
    assert tu.emit_to_string() == pat('(x % y) -= a;')
    tu = ef(b, b.expr_assign_lshift(x_modulus, xa))
    assert tu.emit_to_string() == pat('(x % y) <<= a;')
    tu = ef(b, b.expr_assign_rshift(x_modulus, xa))
    assert tu.emit_to_string() == pat('(x % y) >>= a;')
    tu = ef(b, b.expr_assign_bitwise_and(x_modulus, xa))
    assert tu.emit_to_string() == pat('(x % y) &= a;')
    tu = ef(b, b.expr_assign_bitwise_xor(x_modulus, xa))
    assert tu.emit_to_string() == pat('(x % y) ^= a;')
    tu = ef(b, b.expr_assign_bitwise_or(x_modulus, xa))
    assert tu.emit_to_string() == pat('(x % y) |= a;')
    tu = ef(b, b.expr_comma(x_modulus, xa))
    assert tu.emit_to_string() == pat('x % y, a;')
    tu = ef(b, b.expr_index(xa, x_modulus))
    assert tu.emit_to_string() == pat('a[x % y];')
    tu = ef(b, b.expr_call(xa, [x_modulus]))
    assert tu.emit_to_string() == pat('a(x % y);')
    tu = ef(b, b.expr_times(xa, x_modulus))
    assert tu.emit_to_string() == pat('a * (x % y);')
    tu = ef(b, b.expr_divide(xa, x_modulus))
    assert tu.emit_to_string() == pat('a / (x % y);')
    tu = ef(b, b.expr_modulus(xa, x_modulus))
    assert tu.emit_to_string() == pat('a % (x % y);')
    tu = ef(b, b.expr_plus(xa, x_modulus))
    assert tu.emit_to_string() == pat('a + x % y;')
    tu = ef(b, b.expr_minus(xa, x_modulus))
    assert tu.emit_to_string() == pat('a - x % y;')
    tu = ef(b, b.expr_lshift(xa, x_modulus))
    assert tu.emit_to_string() == pat('a << x % y;')
    tu = ef(b, b.expr_rshift(xa, x_modulus))
    assert tu.emit_to_string() == pat('a >> x % y;')
    tu = ef(b, b.expr_cmp_lt(xa, x_modulus))
    assert tu.emit_to_string() == pat('a < x % y;')
    tu = ef(b, b.expr_cmp_gt(xa, x_modulus))
    assert tu.emit_to_string() == pat('a > x % y;')
    tu = ef(b, b.expr_cmp_le(xa, x_modulus))
    assert tu.emit_to_string() == pat('a <= x % y;')
    tu = ef(b, b.expr_cmp_ge(xa, x_modulus))
    assert tu.emit_to_string() == pat('a >= x % y;')
    tu = ef(b, b.expr_cmp_eq(xa, x_modulus))
    assert tu.emit_to_string() == pat('a == x % y;')
    tu = ef(b, b.expr_cmp_ne(xa, x_modulus))
    assert tu.emit_to_string() == pat('a != x % y;')
    tu = ef(b, b.expr_bitwise_and(xa, x_modulus))
    assert tu.emit_to_string() == pat('a & x % y;')
    tu = ef(b, b.expr_bitwise_xor(xa, x_modulus))
    assert tu.emit_to_string() == pat('a ^ x % y;')
    tu = ef(b, b.expr_bitwise_or(xa, x_modulus))
    assert tu.emit_to_string() == pat('a | x % y;')
    tu = ef(b, b.expr_logical_and(xa, x_modulus))
    assert tu.emit_to_string() == pat('a && x % y;')
    tu = ef(b, b.expr_logical_or(xa, x_modulus))
    assert tu.emit_to_string() == pat('a || x % y;')
    tu = ef(b, b.expr_conditional(xa, x_modulus, xb))
    assert tu.emit_to_string() == pat('a ? x % y : b;')
    tu = ef(b, b.expr_assign(xa, x_modulus))
    assert tu.emit_to_string() == pat('a = x % y;')
    tu = ef(b, b.expr_assign_times(xa, x_modulus))
    assert tu.emit_to_string() == pat('a *= x % y;')
    tu = ef(b, b.expr_assign_divide(xa, x_modulus))
    assert tu.emit_to_string() == pat('a /= x % y;')
    tu = ef(b, b.expr_assign_modulus(xa, x_modulus))
    assert tu.emit_to_string() == pat('a %= x % y;')
    tu = ef(b, b.expr_assign_plus(xa, x_modulus))
    assert tu.emit_to_string() == pat('a += x % y;')
    tu = ef(b, b.expr_assign_minus(xa, x_modulus))
    assert tu.emit_to_string() == pat('a -= x % y;')
    tu = ef(b, b.expr_assign_lshift(xa, x_modulus))
    assert tu.emit_to_string() == pat('a <<= x % y;')
    tu = ef(b, b.expr_assign_rshift(xa, x_modulus))
    assert tu.emit_to_string() == pat('a >>= x % y;')
    tu = ef(b, b.expr_assign_bitwise_and(xa, x_modulus))
    assert tu.emit_to_string() == pat('a &= x % y;')
    tu = ef(b, b.expr_assign_bitwise_xor(xa, x_modulus))
    assert tu.emit_to_string() == pat('a ^= x % y;')
    tu = ef(b, b.expr_assign_bitwise_or(xa, x_modulus))
    assert tu.emit_to_string() == pat('a |= x % y;')
    tu = ef(b, b.expr_comma(xa, x_modulus))
    assert tu.emit_to_string() == pat('a, x % y;')
    tu = ef(b, b.expr_conditional(xa, xb, x_modulus))
    assert tu.emit_to_string() == pat('a ? b : x % y;')

    tu = ef(b, b.expr_index(x_plus, xa))
    assert tu.emit_to_string() == pat('(x + y)[a];')
    tu = ef(b, b.expr_call(x_plus, [xa]))
    assert tu.emit_to_string() == pat('(x + y)(a);')
    tu = ef(b, b.expr_direct_member(x_plus, 'f'))
    assert tu.emit_to_string() == pat('(x + y).f;')
    tu = ef(b, b.expr_indirect_member(x_plus, 'g'))
    assert tu.emit_to_string() == pat('(x + y)->g;')
    tu = ef(b, b.expr_post_inc(x_plus))
    assert tu.emit_to_string() == pat('(x + y)++;')
    tu = ef(b, b.expr_post_dec(x_plus))
    assert tu.emit_to_string() == pat('(x + y)--;')
    tu = ef(b, b.expr_pre_inc(x_plus))
    assert tu.emit_to_string() == pat('++(x + y);')
    tu = ef(b, b.expr_pre_dec(x_plus))
    assert tu.emit_to_string() == pat('--(x + y);')
    tu = ef(b, b.expr_addressof(x_plus))
    assert tu.emit_to_string() == pat('&(x + y);')
    tu = ef(b, b.expr_deref(x_plus))
    assert tu.emit_to_string() == pat('*(x + y);')
    tu = ef(b, b.expr_unary_plus(x_plus))
    assert tu.emit_to_string() == pat('+(x + y);')
    tu = ef(b, b.expr_unary_minus(x_plus))
    assert tu.emit_to_string() == pat('-(x + y);')
    tu = ef(b, b.expr_bitwise_not(x_plus))
    assert tu.emit_to_string() == pat('~(x + y);')
    tu = ef(b, b.expr_logical_not(x_plus))
    assert tu.emit_to_string() == pat('!(x + y);')
    tu = ef(b, b.expr_sizeof_expr(x_plus))
    assert tu.emit_to_string() == pat('sizeof(x + y);')
    tu = ef(b, b.expr_cast(tv, x_plus))
    assert tu.emit_to_string() == pat('(V)(x + y);')
    tu = ef(b, b.expr_times(x_plus, xa))
    assert tu.emit_to_string() == pat('(x + y) * a;')
    tu = ef(b, b.expr_divide(x_plus, xa))
    assert tu.emit_to_string() == pat('(x + y) / a;')
    tu = ef(b, b.expr_modulus(x_plus, xa))
    assert tu.emit_to_string() == pat('(x + y) % a;')
    tu = ef(b, b.expr_plus(x_plus, xa))
    assert tu.emit_to_string() == pat('x + y + a;')
    tu = ef(b, b.expr_minus(x_plus, xa))
    assert tu.emit_to_string() == pat('x + y - a;')
    tu = ef(b, b.expr_lshift(x_plus, xa))
    assert tu.emit_to_string() == pat('x + y << a;')
    tu = ef(b, b.expr_rshift(x_plus, xa))
    assert tu.emit_to_string() == pat('x + y >> a;')
    tu = ef(b, b.expr_cmp_lt(x_plus, xa))
    assert tu.emit_to_string() == pat('x + y < a;')
    tu = ef(b, b.expr_cmp_gt(x_plus, xa))
    assert tu.emit_to_string() == pat('x + y > a;')
    tu = ef(b, b.expr_cmp_le(x_plus, xa))
    assert tu.emit_to_string() == pat('x + y <= a;')
    tu = ef(b, b.expr_cmp_ge(x_plus, xa))
    assert tu.emit_to_string() == pat('x + y >= a;')
    tu = ef(b, b.expr_cmp_eq(x_plus, xa))
    assert tu.emit_to_string() == pat('x + y == a;')
    tu = ef(b, b.expr_cmp_ne(x_plus, xa))
    assert tu.emit_to_string() == pat('x + y != a;')
    tu = ef(b, b.expr_bitwise_and(x_plus, xa))
    assert tu.emit_to_string() == pat('x + y & a;')
    tu = ef(b, b.expr_bitwise_xor(x_plus, xa))
    assert tu.emit_to_string() == pat('x + y ^ a;')
    tu = ef(b, b.expr_bitwise_or(x_plus, xa))
    assert tu.emit_to_string() == pat('x + y | a;')
    tu = ef(b, b.expr_logical_and(x_plus, xa))
    assert tu.emit_to_string() == pat('x + y && a;')
    tu = ef(b, b.expr_logical_or(x_plus, xa))
    assert tu.emit_to_string() == pat('x + y || a;')
    tu = ef(b, b.expr_conditional(x_plus, xa, xb))
    assert tu.emit_to_string() == pat('x + y ? a : b;')
    tu = ef(b, b.expr_assign(x_plus, xa))
    assert tu.emit_to_string() == pat('(x + y) = a;')
    tu = ef(b, b.expr_assign_times(x_plus, xa))
    assert tu.emit_to_string() == pat('(x + y) *= a;')
    tu = ef(b, b.expr_assign_divide(x_plus, xa))
    assert tu.emit_to_string() == pat('(x + y) /= a;')
    tu = ef(b, b.expr_assign_modulus(x_plus, xa))
    assert tu.emit_to_string() == pat('(x + y) %= a;')
    tu = ef(b, b.expr_assign_plus(x_plus, xa))
    assert tu.emit_to_string() == pat('(x + y) += a;')
    tu = ef(b, b.expr_assign_minus(x_plus, xa))
    assert tu.emit_to_string() == pat('(x + y) -= a;')
    tu = ef(b, b.expr_assign_lshift(x_plus, xa))
    assert tu.emit_to_string() == pat('(x + y) <<= a;')
    tu = ef(b, b.expr_assign_rshift(x_plus, xa))
    assert tu.emit_to_string() == pat('(x + y) >>= a;')
    tu = ef(b, b.expr_assign_bitwise_and(x_plus, xa))
    assert tu.emit_to_string() == pat('(x + y) &= a;')
    tu = ef(b, b.expr_assign_bitwise_xor(x_plus, xa))
    assert tu.emit_to_string() == pat('(x + y) ^= a;')
    tu = ef(b, b.expr_assign_bitwise_or(x_plus, xa))
    assert tu.emit_to_string() == pat('(x + y) |= a;')
    tu = ef(b, b.expr_comma(x_plus, xa))
    assert tu.emit_to_string() == pat('x + y, a;')
    tu = ef(b, b.expr_index(xa, x_plus))
    assert tu.emit_to_string() == pat('a[x + y];')
    tu = ef(b, b.expr_call(xa, [x_plus]))
    assert tu.emit_to_string() == pat('a(x + y);')
    tu = ef(b, b.expr_times(xa, x_plus))
    assert tu.emit_to_string() == pat('a * (x + y);')
    tu = ef(b, b.expr_divide(xa, x_plus))
    assert tu.emit_to_string() == pat('a / (x + y);')
    tu = ef(b, b.expr_modulus(xa, x_plus))
    assert tu.emit_to_string() == pat('a % (x + y);')
    tu = ef(b, b.expr_plus(xa, x_plus))
    assert tu.emit_to_string() == pat('a + (x + y);')
    tu = ef(b, b.expr_minus(xa, x_plus))
    assert tu.emit_to_string() == pat('a - (x + y);')
    tu = ef(b, b.expr_lshift(xa, x_plus))
    assert tu.emit_to_string() == pat('a << x + y;')
    tu = ef(b, b.expr_rshift(xa, x_plus))
    assert tu.emit_to_string() == pat('a >> x + y;')
    tu = ef(b, b.expr_cmp_lt(xa, x_plus))
    assert tu.emit_to_string() == pat('a < x + y;')
    tu = ef(b, b.expr_cmp_gt(xa, x_plus))
    assert tu.emit_to_string() == pat('a > x + y;')
    tu = ef(b, b.expr_cmp_le(xa, x_plus))
    assert tu.emit_to_string() == pat('a <= x + y;')
    tu = ef(b, b.expr_cmp_ge(xa, x_plus))
    assert tu.emit_to_string() == pat('a >= x + y;')
    tu = ef(b, b.expr_cmp_eq(xa, x_plus))
    assert tu.emit_to_string() == pat('a == x + y;')
    tu = ef(b, b.expr_cmp_ne(xa, x_plus))
    assert tu.emit_to_string() == pat('a != x + y;')
    tu = ef(b, b.expr_bitwise_and(xa, x_plus))
    assert tu.emit_to_string() == pat('a & x + y;')
    tu = ef(b, b.expr_bitwise_xor(xa, x_plus))
    assert tu.emit_to_string() == pat('a ^ x + y;')
    tu = ef(b, b.expr_bitwise_or(xa, x_plus))
    assert tu.emit_to_string() == pat('a | x + y;')
    tu = ef(b, b.expr_logical_and(xa, x_plus))
    assert tu.emit_to_string() == pat('a && x + y;')
    tu = ef(b, b.expr_logical_or(xa, x_plus))
    assert tu.emit_to_string() == pat('a || x + y;')
    tu = ef(b, b.expr_conditional(xa, x_plus, xb))
    assert tu.emit_to_string() == pat('a ? x + y : b;')
    tu = ef(b, b.expr_assign(xa, x_plus))
    assert tu.emit_to_string() == pat('a = x + y;')
    tu = ef(b, b.expr_assign_times(xa, x_plus))
    assert tu.emit_to_string() == pat('a *= x + y;')
    tu = ef(b, b.expr_assign_divide(xa, x_plus))
    assert tu.emit_to_string() == pat('a /= x + y;')
    tu = ef(b, b.expr_assign_modulus(xa, x_plus))
    assert tu.emit_to_string() == pat('a %= x + y;')
    tu = ef(b, b.expr_assign_plus(xa, x_plus))
    assert tu.emit_to_string() == pat('a += x + y;')
    tu = ef(b, b.expr_assign_minus(xa, x_plus))
    assert tu.emit_to_string() == pat('a -= x + y;')
    tu = ef(b, b.expr_assign_lshift(xa, x_plus))
    assert tu.emit_to_string() == pat('a <<= x + y;')
    tu = ef(b, b.expr_assign_rshift(xa, x_plus))
    assert tu.emit_to_string() == pat('a >>= x + y;')
    tu = ef(b, b.expr_assign_bitwise_and(xa, x_plus))
    assert tu.emit_to_string() == pat('a &= x + y;')
    tu = ef(b, b.expr_assign_bitwise_xor(xa, x_plus))
    assert tu.emit_to_string() == pat('a ^= x + y;')
    tu = ef(b, b.expr_assign_bitwise_or(xa, x_plus))
    assert tu.emit_to_string() == pat('a |= x + y;')
    tu = ef(b, b.expr_comma(xa, x_plus))
    assert tu.emit_to_string() == pat('a, x + y;')
    tu = ef(b, b.expr_conditional(xa, xb, x_plus))
    assert tu.emit_to_string() == pat('a ? b : x + y;')

    tu = ef(b, b.expr_index(x_minus, xa))
    assert tu.emit_to_string() == pat('(x - y)[a];')
    tu = ef(b, b.expr_call(x_minus, [xa]))
    assert tu.emit_to_string() == pat('(x - y)(a);')
    tu = ef(b, b.expr_direct_member(x_minus, 'f'))
    assert tu.emit_to_string() == pat('(x - y).f;')
    tu = ef(b, b.expr_indirect_member(x_minus, 'g'))
    assert tu.emit_to_string() == pat('(x - y)->g;')
    tu = ef(b, b.expr_post_inc(x_minus))
    assert tu.emit_to_string() == pat('(x - y)++;')
    tu = ef(b, b.expr_post_dec(x_minus))
    assert tu.emit_to_string() == pat('(x - y)--;')
    tu = ef(b, b.expr_pre_inc(x_minus))
    assert tu.emit_to_string() == pat('++(x - y);')
    tu = ef(b, b.expr_pre_dec(x_minus))
    assert tu.emit_to_string() == pat('--(x - y);')
    tu = ef(b, b.expr_addressof(x_minus))
    assert tu.emit_to_string() == pat('&(x - y);')
    tu = ef(b, b.expr_deref(x_minus))
    assert tu.emit_to_string() == pat('*(x - y);')
    tu = ef(b, b.expr_unary_plus(x_minus))
    assert tu.emit_to_string() == pat('+(x - y);')
    tu = ef(b, b.expr_unary_minus(x_minus))
    assert tu.emit_to_string() == pat('-(x - y);')
    tu = ef(b, b.expr_bitwise_not(x_minus))
    assert tu.emit_to_string() == pat('~(x - y);')
    tu = ef(b, b.expr_logical_not(x_minus))
    assert tu.emit_to_string() == pat('!(x - y);')
    tu = ef(b, b.expr_sizeof_expr(x_minus))
    assert tu.emit_to_string() == pat('sizeof(x - y);')
    tu = ef(b, b.expr_cast(tv, x_minus))
    assert tu.emit_to_string() == pat('(V)(x - y);')
    tu = ef(b, b.expr_times(x_minus, xa))
    assert tu.emit_to_string() == pat('(x - y) * a;')
    tu = ef(b, b.expr_divide(x_minus, xa))
    assert tu.emit_to_string() == pat('(x - y) / a;')
    tu = ef(b, b.expr_modulus(x_minus, xa))
    assert tu.emit_to_string() == pat('(x - y) % a;')
    tu = ef(b, b.expr_plus(x_minus, xa))
    assert tu.emit_to_string() == pat('x - y + a;')
    tu = ef(b, b.expr_minus(x_minus, xa))
    assert tu.emit_to_string() == pat('x - y - a;')
    tu = ef(b, b.expr_lshift(x_minus, xa))
    assert tu.emit_to_string() == pat('x - y << a;')
    tu = ef(b, b.expr_rshift(x_minus, xa))
    assert tu.emit_to_string() == pat('x - y >> a;')
    tu = ef(b, b.expr_cmp_lt(x_minus, xa))
    assert tu.emit_to_string() == pat('x - y < a;')
    tu = ef(b, b.expr_cmp_gt(x_minus, xa))
    assert tu.emit_to_string() == pat('x - y > a;')
    tu = ef(b, b.expr_cmp_le(x_minus, xa))
    assert tu.emit_to_string() == pat('x - y <= a;')
    tu = ef(b, b.expr_cmp_ge(x_minus, xa))
    assert tu.emit_to_string() == pat('x - y >= a;')
    tu = ef(b, b.expr_cmp_eq(x_minus, xa))
    assert tu.emit_to_string() == pat('x - y == a;')
    tu = ef(b, b.expr_cmp_ne(x_minus, xa))
    assert tu.emit_to_string() == pat('x - y != a;')
    tu = ef(b, b.expr_bitwise_and(x_minus, xa))
    assert tu.emit_to_string() == pat('x - y & a;')
    tu = ef(b, b.expr_bitwise_xor(x_minus, xa))
    assert tu.emit_to_string() == pat('x - y ^ a;')
    tu = ef(b, b.expr_bitwise_or(x_minus, xa))
    assert tu.emit_to_string() == pat('x - y | a;')
    tu = ef(b, b.expr_logical_and(x_minus, xa))
    assert tu.emit_to_string() == pat('x - y && a;')
    tu = ef(b, b.expr_logical_or(x_minus, xa))
    assert tu.emit_to_string() == pat('x - y || a;')
    tu = ef(b, b.expr_conditional(x_minus, xa, xb))
    assert tu.emit_to_string() == pat('x - y ? a : b;')
    tu = ef(b, b.expr_assign(x_minus, xa))
    assert tu.emit_to_string() == pat('(x - y) = a;')
    tu = ef(b, b.expr_assign_times(x_minus, xa))
    assert tu.emit_to_string() == pat('(x - y) *= a;')
    tu = ef(b, b.expr_assign_divide(x_minus, xa))
    assert tu.emit_to_string() == pat('(x - y) /= a;')
    tu = ef(b, b.expr_assign_modulus(x_minus, xa))
    assert tu.emit_to_string() == pat('(x - y) %= a;')
    tu = ef(b, b.expr_assign_plus(x_minus, xa))
    assert tu.emit_to_string() == pat('(x - y) += a;')
    tu = ef(b, b.expr_assign_minus(x_minus, xa))
    assert tu.emit_to_string() == pat('(x - y) -= a;')
    tu = ef(b, b.expr_assign_lshift(x_minus, xa))
    assert tu.emit_to_string() == pat('(x - y) <<= a;')
    tu = ef(b, b.expr_assign_rshift(x_minus, xa))
    assert tu.emit_to_string() == pat('(x - y) >>= a;')
    tu = ef(b, b.expr_assign_bitwise_and(x_minus, xa))
    assert tu.emit_to_string() == pat('(x - y) &= a;')
    tu = ef(b, b.expr_assign_bitwise_xor(x_minus, xa))
    assert tu.emit_to_string() == pat('(x - y) ^= a;')
    tu = ef(b, b.expr_assign_bitwise_or(x_minus, xa))
    assert tu.emit_to_string() == pat('(x - y) |= a;')
    tu = ef(b, b.expr_comma(x_minus, xa))
    assert tu.emit_to_string() == pat('x - y, a;')
    tu = ef(b, b.expr_index(xa, x_minus))
    assert tu.emit_to_string() == pat('a[x - y];')
    tu = ef(b, b.expr_call(xa, [x_minus]))
    assert tu.emit_to_string() == pat('a(x - y);')
    tu = ef(b, b.expr_times(xa, x_minus))
    assert tu.emit_to_string() == pat('a * (x - y);')
    tu = ef(b, b.expr_divide(xa, x_minus))
    assert tu.emit_to_string() == pat('a / (x - y);')
    tu = ef(b, b.expr_modulus(xa, x_minus))
    assert tu.emit_to_string() == pat('a % (x - y);')
    tu = ef(b, b.expr_plus(xa, x_minus))
    assert tu.emit_to_string() == pat('a + (x - y);')
    tu = ef(b, b.expr_minus(xa, x_minus))
    assert tu.emit_to_string() == pat('a - (x - y);')
    tu = ef(b, b.expr_lshift(xa, x_minus))
    assert tu.emit_to_string() == pat('a << x - y;')
    tu = ef(b, b.expr_rshift(xa, x_minus))
    assert tu.emit_to_string() == pat('a >> x - y;')
    tu = ef(b, b.expr_cmp_lt(xa, x_minus))
    assert tu.emit_to_string() == pat('a < x - y;')
    tu = ef(b, b.expr_cmp_gt(xa, x_minus))
    assert tu.emit_to_string() == pat('a > x - y;')
    tu = ef(b, b.expr_cmp_le(xa, x_minus))
    assert tu.emit_to_string() == pat('a <= x - y;')
    tu = ef(b, b.expr_cmp_ge(xa, x_minus))
    assert tu.emit_to_string() == pat('a >= x - y;')
    tu = ef(b, b.expr_cmp_eq(xa, x_minus))
    assert tu.emit_to_string() == pat('a == x - y;')
    tu = ef(b, b.expr_cmp_ne(xa, x_minus))
    assert tu.emit_to_string() == pat('a != x - y;')
    tu = ef(b, b.expr_bitwise_and(xa, x_minus))
    assert tu.emit_to_string() == pat('a & x - y;')
    tu = ef(b, b.expr_bitwise_xor(xa, x_minus))
    assert tu.emit_to_string() == pat('a ^ x - y;')
    tu = ef(b, b.expr_bitwise_or(xa, x_minus))
    assert tu.emit_to_string() == pat('a | x - y;')
    tu = ef(b, b.expr_logical_and(xa, x_minus))
    assert tu.emit_to_string() == pat('a && x - y;')
    tu = ef(b, b.expr_logical_or(xa, x_minus))
    assert tu.emit_to_string() == pat('a || x - y;')
    tu = ef(b, b.expr_conditional(xa, x_minus, xb))
    assert tu.emit_to_string() == pat('a ? x - y : b;')
    tu = ef(b, b.expr_assign(xa, x_minus))
    assert tu.emit_to_string() == pat('a = x - y;')
    tu = ef(b, b.expr_assign_times(xa, x_minus))
    assert tu.emit_to_string() == pat('a *= x - y;')
    tu = ef(b, b.expr_assign_divide(xa, x_minus))
    assert tu.emit_to_string() == pat('a /= x - y;')
    tu = ef(b, b.expr_assign_modulus(xa, x_minus))
    assert tu.emit_to_string() == pat('a %= x - y;')
    tu = ef(b, b.expr_assign_plus(xa, x_minus))
    assert tu.emit_to_string() == pat('a += x - y;')
    tu = ef(b, b.expr_assign_minus(xa, x_minus))
    assert tu.emit_to_string() == pat('a -= x - y;')
    tu = ef(b, b.expr_assign_lshift(xa, x_minus))
    assert tu.emit_to_string() == pat('a <<= x - y;')
    tu = ef(b, b.expr_assign_rshift(xa, x_minus))
    assert tu.emit_to_string() == pat('a >>= x - y;')
    tu = ef(b, b.expr_assign_bitwise_and(xa, x_minus))
    assert tu.emit_to_string() == pat('a &= x - y;')
    tu = ef(b, b.expr_assign_bitwise_xor(xa, x_minus))
    assert tu.emit_to_string() == pat('a ^= x - y;')
    tu = ef(b, b.expr_assign_bitwise_or(xa, x_minus))
    assert tu.emit_to_string() == pat('a |= x - y;')
    tu = ef(b, b.expr_comma(xa, x_minus))
    assert tu.emit_to_string() == pat('a, x - y;')
    tu = ef(b, b.expr_conditional(xa, xb, x_minus))
    assert tu.emit_to_string() == pat('a ? b : x - y;')

    tu = ef(b, b.expr_index(x_lshift, xa))
    assert tu.emit_to_string() == pat('(x << y)[a];')
    tu = ef(b, b.expr_call(x_lshift, [xa]))
    assert tu.emit_to_string() == pat('(x << y)(a);')
    tu = ef(b, b.expr_direct_member(x_lshift, 'f'))
    assert tu.emit_to_string() == pat('(x << y).f;')
    tu = ef(b, b.expr_indirect_member(x_lshift, 'g'))
    assert tu.emit_to_string() == pat('(x << y)->g;')
    tu = ef(b, b.expr_post_inc(x_lshift))
    assert tu.emit_to_string() == pat('(x << y)++;')
    tu = ef(b, b.expr_post_dec(x_lshift))
    assert tu.emit_to_string() == pat('(x << y)--;')
    tu = ef(b, b.expr_pre_inc(x_lshift))
    assert tu.emit_to_string() == pat('++(x << y);')
    tu = ef(b, b.expr_pre_dec(x_lshift))
    assert tu.emit_to_string() == pat('--(x << y);')
    tu = ef(b, b.expr_addressof(x_lshift))
    assert tu.emit_to_string() == pat('&(x << y);')
    tu = ef(b, b.expr_deref(x_lshift))
    assert tu.emit_to_string() == pat('*(x << y);')
    tu = ef(b, b.expr_unary_plus(x_lshift))
    assert tu.emit_to_string() == pat('+(x << y);')
    tu = ef(b, b.expr_unary_minus(x_lshift))
    assert tu.emit_to_string() == pat('-(x << y);')
    tu = ef(b, b.expr_bitwise_not(x_lshift))
    assert tu.emit_to_string() == pat('~(x << y);')
    tu = ef(b, b.expr_logical_not(x_lshift))
    assert tu.emit_to_string() == pat('!(x << y);')
    tu = ef(b, b.expr_sizeof_expr(x_lshift))
    assert tu.emit_to_string() == pat('sizeof(x << y);')
    tu = ef(b, b.expr_cast(tv, x_lshift))
    assert tu.emit_to_string() == pat('(V)(x << y);')
    tu = ef(b, b.expr_times(x_lshift, xa))
    assert tu.emit_to_string() == pat('(x << y) * a;')
    tu = ef(b, b.expr_divide(x_lshift, xa))
    assert tu.emit_to_string() == pat('(x << y) / a;')
    tu = ef(b, b.expr_modulus(x_lshift, xa))
    assert tu.emit_to_string() == pat('(x << y) % a;')
    tu = ef(b, b.expr_plus(x_lshift, xa))
    assert tu.emit_to_string() == pat('(x << y) + a;')
    tu = ef(b, b.expr_minus(x_lshift, xa))
    assert tu.emit_to_string() == pat('(x << y) - a;')
    tu = ef(b, b.expr_lshift(x_lshift, xa))
    assert tu.emit_to_string() == pat('x << y << a;')
    tu = ef(b, b.expr_rshift(x_lshift, xa))
    assert tu.emit_to_string() == pat('x << y >> a;')
    tu = ef(b, b.expr_cmp_lt(x_lshift, xa))
    assert tu.emit_to_string() == pat('x << y < a;')
    tu = ef(b, b.expr_cmp_gt(x_lshift, xa))
    assert tu.emit_to_string() == pat('x << y > a;')
    tu = ef(b, b.expr_cmp_le(x_lshift, xa))
    assert tu.emit_to_string() == pat('x << y <= a;')
    tu = ef(b, b.expr_cmp_ge(x_lshift, xa))
    assert tu.emit_to_string() == pat('x << y >= a;')
    tu = ef(b, b.expr_cmp_eq(x_lshift, xa))
    assert tu.emit_to_string() == pat('x << y == a;')
    tu = ef(b, b.expr_cmp_ne(x_lshift, xa))
    assert tu.emit_to_string() == pat('x << y != a;')
    tu = ef(b, b.expr_bitwise_and(x_lshift, xa))
    assert tu.emit_to_string() == pat('x << y & a;')
    tu = ef(b, b.expr_bitwise_xor(x_lshift, xa))
    assert tu.emit_to_string() == pat('x << y ^ a;')
    tu = ef(b, b.expr_bitwise_or(x_lshift, xa))
    assert tu.emit_to_string() == pat('x << y | a;')
    tu = ef(b, b.expr_logical_and(x_lshift, xa))
    assert tu.emit_to_string() == pat('x << y && a;')
    tu = ef(b, b.expr_logical_or(x_lshift, xa))
    assert tu.emit_to_string() == pat('x << y || a;')
    tu = ef(b, b.expr_conditional(x_lshift, xa, xb))
    assert tu.emit_to_string() == pat('x << y ? a : b;')
    tu = ef(b, b.expr_assign(x_lshift, xa))
    assert tu.emit_to_string() == pat('(x << y) = a;')
    tu = ef(b, b.expr_assign_times(x_lshift, xa))
    assert tu.emit_to_string() == pat('(x << y) *= a;')
    tu = ef(b, b.expr_assign_divide(x_lshift, xa))
    assert tu.emit_to_string() == pat('(x << y) /= a;')
    tu = ef(b, b.expr_assign_modulus(x_lshift, xa))
    assert tu.emit_to_string() == pat('(x << y) %= a;')
    tu = ef(b, b.expr_assign_plus(x_lshift, xa))
    assert tu.emit_to_string() == pat('(x << y) += a;')
    tu = ef(b, b.expr_assign_minus(x_lshift, xa))
    assert tu.emit_to_string() == pat('(x << y) -= a;')
    tu = ef(b, b.expr_assign_lshift(x_lshift, xa))
    assert tu.emit_to_string() == pat('(x << y) <<= a;')
    tu = ef(b, b.expr_assign_rshift(x_lshift, xa))
    assert tu.emit_to_string() == pat('(x << y) >>= a;')
    tu = ef(b, b.expr_assign_bitwise_and(x_lshift, xa))
    assert tu.emit_to_string() == pat('(x << y) &= a;')
    tu = ef(b, b.expr_assign_bitwise_xor(x_lshift, xa))
    assert tu.emit_to_string() == pat('(x << y) ^= a;')
    tu = ef(b, b.expr_assign_bitwise_or(x_lshift, xa))
    assert tu.emit_to_string() == pat('(x << y) |= a;')
    tu = ef(b, b.expr_comma(x_lshift, xa))
    assert tu.emit_to_string() == pat('x << y, a;')
    tu = ef(b, b.expr_index(xa, x_lshift))
    assert tu.emit_to_string() == pat('a[x << y];')
    tu = ef(b, b.expr_call(xa, [x_lshift]))
    assert tu.emit_to_string() == pat('a(x << y);')
    tu = ef(b, b.expr_times(xa, x_lshift))
    assert tu.emit_to_string() == pat('a * (x << y);')
    tu = ef(b, b.expr_divide(xa, x_lshift))
    assert tu.emit_to_string() == pat('a / (x << y);')
    tu = ef(b, b.expr_modulus(xa, x_lshift))
    assert tu.emit_to_string() == pat('a % (x << y);')
    tu = ef(b, b.expr_plus(xa, x_lshift))
    assert tu.emit_to_string() == pat('a + (x << y);')
    tu = ef(b, b.expr_minus(xa, x_lshift))
    assert tu.emit_to_string() == pat('a - (x << y);')
    tu = ef(b, b.expr_lshift(xa, x_lshift))
    assert tu.emit_to_string() == pat('a << (x << y);')
    tu = ef(b, b.expr_rshift(xa, x_lshift))
    assert tu.emit_to_string() == pat('a >> (x << y);')
    tu = ef(b, b.expr_cmp_lt(xa, x_lshift))
    assert tu.emit_to_string() == pat('a < x << y;')
    tu = ef(b, b.expr_cmp_gt(xa, x_lshift))
    assert tu.emit_to_string() == pat('a > x << y;')
    tu = ef(b, b.expr_cmp_le(xa, x_lshift))
    assert tu.emit_to_string() == pat('a <= x << y;')
    tu = ef(b, b.expr_cmp_ge(xa, x_lshift))
    assert tu.emit_to_string() == pat('a >= x << y;')
    tu = ef(b, b.expr_cmp_eq(xa, x_lshift))
    assert tu.emit_to_string() == pat('a == x << y;')
    tu = ef(b, b.expr_cmp_ne(xa, x_lshift))
    assert tu.emit_to_string() == pat('a != x << y;')
    tu = ef(b, b.expr_bitwise_and(xa, x_lshift))
    assert tu.emit_to_string() == pat('a & x << y;')
    tu = ef(b, b.expr_bitwise_xor(xa, x_lshift))
    assert tu.emit_to_string() == pat('a ^ x << y;')
    tu = ef(b, b.expr_bitwise_or(xa, x_lshift))
    assert tu.emit_to_string() == pat('a | x << y;')
    tu = ef(b, b.expr_logical_and(xa, x_lshift))
    assert tu.emit_to_string() == pat('a && x << y;')
    tu = ef(b, b.expr_logical_or(xa, x_lshift))
    assert tu.emit_to_string() == pat('a || x << y;')
    tu = ef(b, b.expr_conditional(xa, x_lshift, xb))
    assert tu.emit_to_string() == pat('a ? x << y : b;')
    tu = ef(b, b.expr_assign(xa, x_lshift))
    assert tu.emit_to_string() == pat('a = x << y;')
    tu = ef(b, b.expr_assign_times(xa, x_lshift))
    assert tu.emit_to_string() == pat('a *= x << y;')
    tu = ef(b, b.expr_assign_divide(xa, x_lshift))
    assert tu.emit_to_string() == pat('a /= x << y;')
    tu = ef(b, b.expr_assign_modulus(xa, x_lshift))
    assert tu.emit_to_string() == pat('a %= x << y;')
    tu = ef(b, b.expr_assign_plus(xa, x_lshift))
    assert tu.emit_to_string() == pat('a += x << y;')
    tu = ef(b, b.expr_assign_minus(xa, x_lshift))
    assert tu.emit_to_string() == pat('a -= x << y;')
    tu = ef(b, b.expr_assign_lshift(xa, x_lshift))
    assert tu.emit_to_string() == pat('a <<= x << y;')
    tu = ef(b, b.expr_assign_rshift(xa, x_lshift))
    assert tu.emit_to_string() == pat('a >>= x << y;')
    tu = ef(b, b.expr_assign_bitwise_and(xa, x_lshift))
    assert tu.emit_to_string() == pat('a &= x << y;')
    tu = ef(b, b.expr_assign_bitwise_xor(xa, x_lshift))
    assert tu.emit_to_string() == pat('a ^= x << y;')
    tu = ef(b, b.expr_assign_bitwise_or(xa, x_lshift))
    assert tu.emit_to_string() == pat('a |= x << y;')
    tu = ef(b, b.expr_comma(xa, x_lshift))
    assert tu.emit_to_string() == pat('a, x << y;')
    tu = ef(b, b.expr_conditional(xa, xb, x_lshift))
    assert tu.emit_to_string() == pat('a ? b : x << y;')

    tu = ef(b, b.expr_index(x_rshift, xa))
    assert tu.emit_to_string() == pat('(x >> y)[a];')
    tu = ef(b, b.expr_call(x_rshift, [xa]))
    assert tu.emit_to_string() == pat('(x >> y)(a);')
    tu = ef(b, b.expr_direct_member(x_rshift, 'f'))
    assert tu.emit_to_string() == pat('(x >> y).f;')
    tu = ef(b, b.expr_indirect_member(x_rshift, 'g'))
    assert tu.emit_to_string() == pat('(x >> y)->g;')
    tu = ef(b, b.expr_post_inc(x_rshift))
    assert tu.emit_to_string() == pat('(x >> y)++;')
    tu = ef(b, b.expr_post_dec(x_rshift))
    assert tu.emit_to_string() == pat('(x >> y)--;')
    tu = ef(b, b.expr_pre_inc(x_rshift))
    assert tu.emit_to_string() == pat('++(x >> y);')
    tu = ef(b, b.expr_pre_dec(x_rshift))
    assert tu.emit_to_string() == pat('--(x >> y);')
    tu = ef(b, b.expr_addressof(x_rshift))
    assert tu.emit_to_string() == pat('&(x >> y);')
    tu = ef(b, b.expr_deref(x_rshift))
    assert tu.emit_to_string() == pat('*(x >> y);')
    tu = ef(b, b.expr_unary_plus(x_rshift))
    assert tu.emit_to_string() == pat('+(x >> y);')
    tu = ef(b, b.expr_unary_minus(x_rshift))
    assert tu.emit_to_string() == pat('-(x >> y);')
    tu = ef(b, b.expr_bitwise_not(x_rshift))
    assert tu.emit_to_string() == pat('~(x >> y);')
    tu = ef(b, b.expr_logical_not(x_rshift))
    assert tu.emit_to_string() == pat('!(x >> y);')
    tu = ef(b, b.expr_sizeof_expr(x_rshift))
    assert tu.emit_to_string() == pat('sizeof(x >> y);')
    tu = ef(b, b.expr_cast(tv, x_rshift))
    assert tu.emit_to_string() == pat('(V)(x >> y);')
    tu = ef(b, b.expr_times(x_rshift, xa))
    assert tu.emit_to_string() == pat('(x >> y) * a;')
    tu = ef(b, b.expr_divide(x_rshift, xa))
    assert tu.emit_to_string() == pat('(x >> y) / a;')
    tu = ef(b, b.expr_modulus(x_rshift, xa))
    assert tu.emit_to_string() == pat('(x >> y) % a;')
    tu = ef(b, b.expr_plus(x_rshift, xa))
    assert tu.emit_to_string() == pat('(x >> y) + a;')
    tu = ef(b, b.expr_minus(x_rshift, xa))
    assert tu.emit_to_string() == pat('(x >> y) - a;')
    tu = ef(b, b.expr_lshift(x_rshift, xa))
    assert tu.emit_to_string() == pat('x >> y << a;')
    tu = ef(b, b.expr_rshift(x_rshift, xa))
    assert tu.emit_to_string() == pat('x >> y >> a;')
    tu = ef(b, b.expr_cmp_lt(x_rshift, xa))
    assert tu.emit_to_string() == pat('x >> y < a;')
    tu = ef(b, b.expr_cmp_gt(x_rshift, xa))
    assert tu.emit_to_string() == pat('x >> y > a;')
    tu = ef(b, b.expr_cmp_le(x_rshift, xa))
    assert tu.emit_to_string() == pat('x >> y <= a;')
    tu = ef(b, b.expr_cmp_ge(x_rshift, xa))
    assert tu.emit_to_string() == pat('x >> y >= a;')
    tu = ef(b, b.expr_cmp_eq(x_rshift, xa))
    assert tu.emit_to_string() == pat('x >> y == a;')
    tu = ef(b, b.expr_cmp_ne(x_rshift, xa))
    assert tu.emit_to_string() == pat('x >> y != a;')
    tu = ef(b, b.expr_bitwise_and(x_rshift, xa))
    assert tu.emit_to_string() == pat('x >> y & a;')
    tu = ef(b, b.expr_bitwise_xor(x_rshift, xa))
    assert tu.emit_to_string() == pat('x >> y ^ a;')
    tu = ef(b, b.expr_bitwise_or(x_rshift, xa))
    assert tu.emit_to_string() == pat('x >> y | a;')
    tu = ef(b, b.expr_logical_and(x_rshift, xa))
    assert tu.emit_to_string() == pat('x >> y && a;')
    tu = ef(b, b.expr_logical_or(x_rshift, xa))
    assert tu.emit_to_string() == pat('x >> y || a;')
    tu = ef(b, b.expr_conditional(x_rshift, xa, xb))
    assert tu.emit_to_string() == pat('x >> y ? a : b;')
    tu = ef(b, b.expr_assign(x_rshift, xa))
    assert tu.emit_to_string() == pat('(x >> y) = a;')
    tu = ef(b, b.expr_assign_times(x_rshift, xa))
    assert tu.emit_to_string() == pat('(x >> y) *= a;')
    tu = ef(b, b.expr_assign_divide(x_rshift, xa))
    assert tu.emit_to_string() == pat('(x >> y) /= a;')
    tu = ef(b, b.expr_assign_modulus(x_rshift, xa))
    assert tu.emit_to_string() == pat('(x >> y) %= a;')
    tu = ef(b, b.expr_assign_plus(x_rshift, xa))
    assert tu.emit_to_string() == pat('(x >> y) += a;')
    tu = ef(b, b.expr_assign_minus(x_rshift, xa))
    assert tu.emit_to_string() == pat('(x >> y) -= a;')
    tu = ef(b, b.expr_assign_lshift(x_rshift, xa))
    assert tu.emit_to_string() == pat('(x >> y) <<= a;')
    tu = ef(b, b.expr_assign_rshift(x_rshift, xa))
    assert tu.emit_to_string() == pat('(x >> y) >>= a;')
    tu = ef(b, b.expr_assign_bitwise_and(x_rshift, xa))
    assert tu.emit_to_string() == pat('(x >> y) &= a;')
    tu = ef(b, b.expr_assign_bitwise_xor(x_rshift, xa))
    assert tu.emit_to_string() == pat('(x >> y) ^= a;')
    tu = ef(b, b.expr_assign_bitwise_or(x_rshift, xa))
    assert tu.emit_to_string() == pat('(x >> y) |= a;')
    tu = ef(b, b.expr_comma(x_rshift, xa))
    assert tu.emit_to_string() == pat('x >> y, a;')
    tu = ef(b, b.expr_index(xa, x_rshift))
    assert tu.emit_to_string() == pat('a[x >> y];')
    tu = ef(b, b.expr_call(xa, [x_rshift]))
    assert tu.emit_to_string() == pat('a(x >> y);')
    tu = ef(b, b.expr_times(xa, x_rshift))
    assert tu.emit_to_string() == pat('a * (x >> y);')
    tu = ef(b, b.expr_divide(xa, x_rshift))
    assert tu.emit_to_string() == pat('a / (x >> y);')
    tu = ef(b, b.expr_modulus(xa, x_rshift))
    assert tu.emit_to_string() == pat('a % (x >> y);')
    tu = ef(b, b.expr_plus(xa, x_rshift))
    assert tu.emit_to_string() == pat('a + (x >> y);')
    tu = ef(b, b.expr_minus(xa, x_rshift))
    assert tu.emit_to_string() == pat('a - (x >> y);')
    tu = ef(b, b.expr_lshift(xa, x_rshift))
    assert tu.emit_to_string() == pat('a << (x >> y);')
    tu = ef(b, b.expr_rshift(xa, x_rshift))
    assert tu.emit_to_string() == pat('a >> (x >> y);')
    tu = ef(b, b.expr_cmp_lt(xa, x_rshift))
    assert tu.emit_to_string() == pat('a < x >> y;')
    tu = ef(b, b.expr_cmp_gt(xa, x_rshift))
    assert tu.emit_to_string() == pat('a > x >> y;')
    tu = ef(b, b.expr_cmp_le(xa, x_rshift))
    assert tu.emit_to_string() == pat('a <= x >> y;')
    tu = ef(b, b.expr_cmp_ge(xa, x_rshift))
    assert tu.emit_to_string() == pat('a >= x >> y;')
    tu = ef(b, b.expr_cmp_eq(xa, x_rshift))
    assert tu.emit_to_string() == pat('a == x >> y;')
    tu = ef(b, b.expr_cmp_ne(xa, x_rshift))
    assert tu.emit_to_string() == pat('a != x >> y;')
    tu = ef(b, b.expr_bitwise_and(xa, x_rshift))
    assert tu.emit_to_string() == pat('a & x >> y;')
    tu = ef(b, b.expr_bitwise_xor(xa, x_rshift))
    assert tu.emit_to_string() == pat('a ^ x >> y;')
    tu = ef(b, b.expr_bitwise_or(xa, x_rshift))
    assert tu.emit_to_string() == pat('a | x >> y;')
    tu = ef(b, b.expr_logical_and(xa, x_rshift))
    assert tu.emit_to_string() == pat('a && x >> y;')
    tu = ef(b, b.expr_logical_or(xa, x_rshift))
    assert tu.emit_to_string() == pat('a || x >> y;')
    tu = ef(b, b.expr_conditional(xa, x_rshift, xb))
    assert tu.emit_to_string() == pat('a ? x >> y : b;')
    tu = ef(b, b.expr_assign(xa, x_rshift))
    assert tu.emit_to_string() == pat('a = x >> y;')
    tu = ef(b, b.expr_assign_times(xa, x_rshift))
    assert tu.emit_to_string() == pat('a *= x >> y;')
    tu = ef(b, b.expr_assign_divide(xa, x_rshift))
    assert tu.emit_to_string() == pat('a /= x >> y;')
    tu = ef(b, b.expr_assign_modulus(xa, x_rshift))
    assert tu.emit_to_string() == pat('a %= x >> y;')
    tu = ef(b, b.expr_assign_plus(xa, x_rshift))
    assert tu.emit_to_string() == pat('a += x >> y;')
    tu = ef(b, b.expr_assign_minus(xa, x_rshift))
    assert tu.emit_to_string() == pat('a -= x >> y;')
    tu = ef(b, b.expr_assign_lshift(xa, x_rshift))
    assert tu.emit_to_string() == pat('a <<= x >> y;')
    tu = ef(b, b.expr_assign_rshift(xa, x_rshift))
    assert tu.emit_to_string() == pat('a >>= x >> y;')
    tu = ef(b, b.expr_assign_bitwise_and(xa, x_rshift))
    assert tu.emit_to_string() == pat('a &= x >> y;')
    tu = ef(b, b.expr_assign_bitwise_xor(xa, x_rshift))
    assert tu.emit_to_string() == pat('a ^= x >> y;')
    tu = ef(b, b.expr_assign_bitwise_or(xa, x_rshift))
    assert tu.emit_to_string() == pat('a |= x >> y;')
    tu = ef(b, b.expr_comma(xa, x_rshift))
    assert tu.emit_to_string() == pat('a, x >> y;')
    tu = ef(b, b.expr_conditional(xa, xb, x_rshift))
    assert tu.emit_to_string() == pat('a ? b : x >> y;')

    tu = ef(b, b.expr_index(x_cmp_lt, xa))
    assert tu.emit_to_string() == pat('(x < y)[a];')
    tu = ef(b, b.expr_call(x_cmp_lt, [xa]))
    assert tu.emit_to_string() == pat('(x < y)(a);')
    tu = ef(b, b.expr_direct_member(x_cmp_lt, 'f'))
    assert tu.emit_to_string() == pat('(x < y).f;')
    tu = ef(b, b.expr_indirect_member(x_cmp_lt, 'g'))
    assert tu.emit_to_string() == pat('(x < y)->g;')
    tu = ef(b, b.expr_post_inc(x_cmp_lt))
    assert tu.emit_to_string() == pat('(x < y)++;')
    tu = ef(b, b.expr_post_dec(x_cmp_lt))
    assert tu.emit_to_string() == pat('(x < y)--;')
    tu = ef(b, b.expr_pre_inc(x_cmp_lt))
    assert tu.emit_to_string() == pat('++(x < y);')
    tu = ef(b, b.expr_pre_dec(x_cmp_lt))
    assert tu.emit_to_string() == pat('--(x < y);')
    tu = ef(b, b.expr_addressof(x_cmp_lt))
    assert tu.emit_to_string() == pat('&(x < y);')
    tu = ef(b, b.expr_deref(x_cmp_lt))
    assert tu.emit_to_string() == pat('*(x < y);')
    tu = ef(b, b.expr_unary_plus(x_cmp_lt))
    assert tu.emit_to_string() == pat('+(x < y);')
    tu = ef(b, b.expr_unary_minus(x_cmp_lt))
    assert tu.emit_to_string() == pat('-(x < y);')
    tu = ef(b, b.expr_bitwise_not(x_cmp_lt))
    assert tu.emit_to_string() == pat('~(x < y);')
    tu = ef(b, b.expr_logical_not(x_cmp_lt))
    assert tu.emit_to_string() == pat('!(x < y);')
    tu = ef(b, b.expr_sizeof_expr(x_cmp_lt))
    assert tu.emit_to_string() == pat('sizeof(x < y);')
    tu = ef(b, b.expr_cast(tv, x_cmp_lt))
    assert tu.emit_to_string() == pat('(V)(x < y);')
    tu = ef(b, b.expr_times(x_cmp_lt, xa))
    assert tu.emit_to_string() == pat('(x < y) * a;')
    tu = ef(b, b.expr_divide(x_cmp_lt, xa))
    assert tu.emit_to_string() == pat('(x < y) / a;')
    tu = ef(b, b.expr_modulus(x_cmp_lt, xa))
    assert tu.emit_to_string() == pat('(x < y) % a;')
    tu = ef(b, b.expr_plus(x_cmp_lt, xa))
    assert tu.emit_to_string() == pat('(x < y) + a;')
    tu = ef(b, b.expr_minus(x_cmp_lt, xa))
    assert tu.emit_to_string() == pat('(x < y) - a;')
    tu = ef(b, b.expr_lshift(x_cmp_lt, xa))
    assert tu.emit_to_string() == pat('(x < y) << a;')
    tu = ef(b, b.expr_rshift(x_cmp_lt, xa))
    assert tu.emit_to_string() == pat('(x < y) >> a;')
    tu = ef(b, b.expr_cmp_lt(x_cmp_lt, xa))
    assert tu.emit_to_string() == pat('x < y < a;')
    tu = ef(b, b.expr_cmp_gt(x_cmp_lt, xa))
    assert tu.emit_to_string() == pat('x < y > a;')
    tu = ef(b, b.expr_cmp_le(x_cmp_lt, xa))
    assert tu.emit_to_string() == pat('x < y <= a;')
    tu = ef(b, b.expr_cmp_ge(x_cmp_lt, xa))
    assert tu.emit_to_string() == pat('x < y >= a;')
    tu = ef(b, b.expr_cmp_eq(x_cmp_lt, xa))
    assert tu.emit_to_string() == pat('x < y == a;')
    tu = ef(b, b.expr_cmp_ne(x_cmp_lt, xa))
    assert tu.emit_to_string() == pat('x < y != a;')
    tu = ef(b, b.expr_bitwise_and(x_cmp_lt, xa))
    assert tu.emit_to_string() == pat('x < y & a;')
    tu = ef(b, b.expr_bitwise_xor(x_cmp_lt, xa))
    assert tu.emit_to_string() == pat('x < y ^ a;')
    tu = ef(b, b.expr_bitwise_or(x_cmp_lt, xa))
    assert tu.emit_to_string() == pat('x < y | a;')
    tu = ef(b, b.expr_logical_and(x_cmp_lt, xa))
    assert tu.emit_to_string() == pat('x < y && a;')
    tu = ef(b, b.expr_logical_or(x_cmp_lt, xa))
    assert tu.emit_to_string() == pat('x < y || a;')
    tu = ef(b, b.expr_conditional(x_cmp_lt, xa, xb))
    assert tu.emit_to_string() == pat('x < y ? a : b;')
    tu = ef(b, b.expr_assign(x_cmp_lt, xa))
    assert tu.emit_to_string() == pat('(x < y) = a;')
    tu = ef(b, b.expr_assign_times(x_cmp_lt, xa))
    assert tu.emit_to_string() == pat('(x < y) *= a;')
    tu = ef(b, b.expr_assign_divide(x_cmp_lt, xa))
    assert tu.emit_to_string() == pat('(x < y) /= a;')
    tu = ef(b, b.expr_assign_modulus(x_cmp_lt, xa))
    assert tu.emit_to_string() == pat('(x < y) %= a;')
    tu = ef(b, b.expr_assign_plus(x_cmp_lt, xa))
    assert tu.emit_to_string() == pat('(x < y) += a;')
    tu = ef(b, b.expr_assign_minus(x_cmp_lt, xa))
    assert tu.emit_to_string() == pat('(x < y) -= a;')
    tu = ef(b, b.expr_assign_lshift(x_cmp_lt, xa))
    assert tu.emit_to_string() == pat('(x < y) <<= a;')
    tu = ef(b, b.expr_assign_rshift(x_cmp_lt, xa))
    assert tu.emit_to_string() == pat('(x < y) >>= a;')
    tu = ef(b, b.expr_assign_bitwise_and(x_cmp_lt, xa))
    assert tu.emit_to_string() == pat('(x < y) &= a;')
    tu = ef(b, b.expr_assign_bitwise_xor(x_cmp_lt, xa))
    assert tu.emit_to_string() == pat('(x < y) ^= a;')
    tu = ef(b, b.expr_assign_bitwise_or(x_cmp_lt, xa))
    assert tu.emit_to_string() == pat('(x < y) |= a;')
    tu = ef(b, b.expr_comma(x_cmp_lt, xa))
    assert tu.emit_to_string() == pat('x < y, a;')
    tu = ef(b, b.expr_index(xa, x_cmp_lt))
    assert tu.emit_to_string() == pat('a[x < y];')
    tu = ef(b, b.expr_call(xa, [x_cmp_lt]))
    assert tu.emit_to_string() == pat('a(x < y);')
    tu = ef(b, b.expr_times(xa, x_cmp_lt))
    assert tu.emit_to_string() == pat('a * (x < y);')
    tu = ef(b, b.expr_divide(xa, x_cmp_lt))
    assert tu.emit_to_string() == pat('a / (x < y);')
    tu = ef(b, b.expr_modulus(xa, x_cmp_lt))
    assert tu.emit_to_string() == pat('a % (x < y);')
    tu = ef(b, b.expr_plus(xa, x_cmp_lt))
    assert tu.emit_to_string() == pat('a + (x < y);')
    tu = ef(b, b.expr_minus(xa, x_cmp_lt))
    assert tu.emit_to_string() == pat('a - (x < y);')
    tu = ef(b, b.expr_lshift(xa, x_cmp_lt))
    assert tu.emit_to_string() == pat('a << (x < y);')
    tu = ef(b, b.expr_rshift(xa, x_cmp_lt))
    assert tu.emit_to_string() == pat('a >> (x < y);')
    tu = ef(b, b.expr_cmp_lt(xa, x_cmp_lt))
    assert tu.emit_to_string() == pat('a < (x < y);')
    tu = ef(b, b.expr_cmp_gt(xa, x_cmp_lt))
    assert tu.emit_to_string() == pat('a > (x < y);')
    tu = ef(b, b.expr_cmp_le(xa, x_cmp_lt))
    assert tu.emit_to_string() == pat('a <= (x < y);')
    tu = ef(b, b.expr_cmp_ge(xa, x_cmp_lt))
    assert tu.emit_to_string() == pat('a >= (x < y);')
    tu = ef(b, b.expr_cmp_eq(xa, x_cmp_lt))
    assert tu.emit_to_string() == pat('a == x < y;')
    tu = ef(b, b.expr_cmp_ne(xa, x_cmp_lt))
    assert tu.emit_to_string() == pat('a != x < y;')
    tu = ef(b, b.expr_bitwise_and(xa, x_cmp_lt))
    assert tu.emit_to_string() == pat('a & x < y;')
    tu = ef(b, b.expr_bitwise_xor(xa, x_cmp_lt))
    assert tu.emit_to_string() == pat('a ^ x < y;')
    tu = ef(b, b.expr_bitwise_or(xa, x_cmp_lt))
    assert tu.emit_to_string() == pat('a | x < y;')
    tu = ef(b, b.expr_logical_and(xa, x_cmp_lt))
    assert tu.emit_to_string() == pat('a && x < y;')
    tu = ef(b, b.expr_logical_or(xa, x_cmp_lt))
    assert tu.emit_to_string() == pat('a || x < y;')
    tu = ef(b, b.expr_conditional(xa, x_cmp_lt, xb))
    assert tu.emit_to_string() == pat('a ? x < y : b;')
    tu = ef(b, b.expr_assign(xa, x_cmp_lt))
    assert tu.emit_to_string() == pat('a = x < y;')
    tu = ef(b, b.expr_assign_times(xa, x_cmp_lt))
    assert tu.emit_to_string() == pat('a *= x < y;')
    tu = ef(b, b.expr_assign_divide(xa, x_cmp_lt))
    assert tu.emit_to_string() == pat('a /= x < y;')
    tu = ef(b, b.expr_assign_modulus(xa, x_cmp_lt))
    assert tu.emit_to_string() == pat('a %= x < y;')
    tu = ef(b, b.expr_assign_plus(xa, x_cmp_lt))
    assert tu.emit_to_string() == pat('a += x < y;')
    tu = ef(b, b.expr_assign_minus(xa, x_cmp_lt))
    assert tu.emit_to_string() == pat('a -= x < y;')
    tu = ef(b, b.expr_assign_lshift(xa, x_cmp_lt))
    assert tu.emit_to_string() == pat('a <<= x < y;')
    tu = ef(b, b.expr_assign_rshift(xa, x_cmp_lt))
    assert tu.emit_to_string() == pat('a >>= x < y;')
    tu = ef(b, b.expr_assign_bitwise_and(xa, x_cmp_lt))
    assert tu.emit_to_string() == pat('a &= x < y;')
    tu = ef(b, b.expr_assign_bitwise_xor(xa, x_cmp_lt))
    assert tu.emit_to_string() == pat('a ^= x < y;')
    tu = ef(b, b.expr_assign_bitwise_or(xa, x_cmp_lt))
    assert tu.emit_to_string() == pat('a |= x < y;')
    tu = ef(b, b.expr_comma(xa, x_cmp_lt))
    assert tu.emit_to_string() == pat('a, x < y;')
    tu = ef(b, b.expr_conditional(xa, xb, x_cmp_lt))
    assert tu.emit_to_string() == pat('a ? b : x < y;')

    tu = ef(b, b.expr_index(x_cmp_gt, xa))
    assert tu.emit_to_string() == pat('(x > y)[a];')
    tu = ef(b, b.expr_call(x_cmp_gt, [xa]))
    assert tu.emit_to_string() == pat('(x > y)(a);')
    tu = ef(b, b.expr_direct_member(x_cmp_gt, 'f'))
    assert tu.emit_to_string() == pat('(x > y).f;')
    tu = ef(b, b.expr_indirect_member(x_cmp_gt, 'g'))
    assert tu.emit_to_string() == pat('(x > y)->g;')
    tu = ef(b, b.expr_post_inc(x_cmp_gt))
    assert tu.emit_to_string() == pat('(x > y)++;')
    tu = ef(b, b.expr_post_dec(x_cmp_gt))
    assert tu.emit_to_string() == pat('(x > y)--;')
    tu = ef(b, b.expr_pre_inc(x_cmp_gt))
    assert tu.emit_to_string() == pat('++(x > y);')
    tu = ef(b, b.expr_pre_dec(x_cmp_gt))
    assert tu.emit_to_string() == pat('--(x > y);')
    tu = ef(b, b.expr_addressof(x_cmp_gt))
    assert tu.emit_to_string() == pat('&(x > y);')
    tu = ef(b, b.expr_deref(x_cmp_gt))
    assert tu.emit_to_string() == pat('*(x > y);')
    tu = ef(b, b.expr_unary_plus(x_cmp_gt))
    assert tu.emit_to_string() == pat('+(x > y);')
    tu = ef(b, b.expr_unary_minus(x_cmp_gt))
    assert tu.emit_to_string() == pat('-(x > y);')
    tu = ef(b, b.expr_bitwise_not(x_cmp_gt))
    assert tu.emit_to_string() == pat('~(x > y);')
    tu = ef(b, b.expr_logical_not(x_cmp_gt))
    assert tu.emit_to_string() == pat('!(x > y);')
    tu = ef(b, b.expr_sizeof_expr(x_cmp_gt))
    assert tu.emit_to_string() == pat('sizeof(x > y);')
    tu = ef(b, b.expr_cast(tv, x_cmp_gt))
    assert tu.emit_to_string() == pat('(V)(x > y);')
    tu = ef(b, b.expr_times(x_cmp_gt, xa))
    assert tu.emit_to_string() == pat('(x > y) * a;')
    tu = ef(b, b.expr_divide(x_cmp_gt, xa))
    assert tu.emit_to_string() == pat('(x > y) / a;')
    tu = ef(b, b.expr_modulus(x_cmp_gt, xa))
    assert tu.emit_to_string() == pat('(x > y) % a;')
    tu = ef(b, b.expr_plus(x_cmp_gt, xa))
    assert tu.emit_to_string() == pat('(x > y) + a;')
    tu = ef(b, b.expr_minus(x_cmp_gt, xa))
    assert tu.emit_to_string() == pat('(x > y) - a;')
    tu = ef(b, b.expr_lshift(x_cmp_gt, xa))
    assert tu.emit_to_string() == pat('(x > y) << a;')
    tu = ef(b, b.expr_rshift(x_cmp_gt, xa))
    assert tu.emit_to_string() == pat('(x > y) >> a;')
    tu = ef(b, b.expr_cmp_lt(x_cmp_gt, xa))
    assert tu.emit_to_string() == pat('x > y < a;')
    tu = ef(b, b.expr_cmp_gt(x_cmp_gt, xa))
    assert tu.emit_to_string() == pat('x > y > a;')
    tu = ef(b, b.expr_cmp_le(x_cmp_gt, xa))
    assert tu.emit_to_string() == pat('x > y <= a;')
    tu = ef(b, b.expr_cmp_ge(x_cmp_gt, xa))
    assert tu.emit_to_string() == pat('x > y >= a;')
    tu = ef(b, b.expr_cmp_eq(x_cmp_gt, xa))
    assert tu.emit_to_string() == pat('x > y == a;')
    tu = ef(b, b.expr_cmp_ne(x_cmp_gt, xa))
    assert tu.emit_to_string() == pat('x > y != a;')
    tu = ef(b, b.expr_bitwise_and(x_cmp_gt, xa))
    assert tu.emit_to_string() == pat('x > y & a;')
    tu = ef(b, b.expr_bitwise_xor(x_cmp_gt, xa))
    assert tu.emit_to_string() == pat('x > y ^ a;')
    tu = ef(b, b.expr_bitwise_or(x_cmp_gt, xa))
    assert tu.emit_to_string() == pat('x > y | a;')
    tu = ef(b, b.expr_logical_and(x_cmp_gt, xa))
    assert tu.emit_to_string() == pat('x > y && a;')
    tu = ef(b, b.expr_logical_or(x_cmp_gt, xa))
    assert tu.emit_to_string() == pat('x > y || a;')
    tu = ef(b, b.expr_conditional(x_cmp_gt, xa, xb))
    assert tu.emit_to_string() == pat('x > y ? a : b;')
    tu = ef(b, b.expr_assign(x_cmp_gt, xa))
    assert tu.emit_to_string() == pat('(x > y) = a;')
    tu = ef(b, b.expr_assign_times(x_cmp_gt, xa))
    assert tu.emit_to_string() == pat('(x > y) *= a;')
    tu = ef(b, b.expr_assign_divide(x_cmp_gt, xa))
    assert tu.emit_to_string() == pat('(x > y) /= a;')
    tu = ef(b, b.expr_assign_modulus(x_cmp_gt, xa))
    assert tu.emit_to_string() == pat('(x > y) %= a;')
    tu = ef(b, b.expr_assign_plus(x_cmp_gt, xa))
    assert tu.emit_to_string() == pat('(x > y) += a;')
    tu = ef(b, b.expr_assign_minus(x_cmp_gt, xa))
    assert tu.emit_to_string() == pat('(x > y) -= a;')
    tu = ef(b, b.expr_assign_lshift(x_cmp_gt, xa))
    assert tu.emit_to_string() == pat('(x > y) <<= a;')
    tu = ef(b, b.expr_assign_rshift(x_cmp_gt, xa))
    assert tu.emit_to_string() == pat('(x > y) >>= a;')
    tu = ef(b, b.expr_assign_bitwise_and(x_cmp_gt, xa))
    assert tu.emit_to_string() == pat('(x > y) &= a;')
    tu = ef(b, b.expr_assign_bitwise_xor(x_cmp_gt, xa))
    assert tu.emit_to_string() == pat('(x > y) ^= a;')
    tu = ef(b, b.expr_assign_bitwise_or(x_cmp_gt, xa))
    assert tu.emit_to_string() == pat('(x > y) |= a;')
    tu = ef(b, b.expr_comma(x_cmp_gt, xa))
    assert tu.emit_to_string() == pat('x > y, a;')
    tu = ef(b, b.expr_index(xa, x_cmp_gt))
    assert tu.emit_to_string() == pat('a[x > y];')
    tu = ef(b, b.expr_call(xa, [x_cmp_gt]))
    assert tu.emit_to_string() == pat('a(x > y);')
    tu = ef(b, b.expr_times(xa, x_cmp_gt))
    assert tu.emit_to_string() == pat('a * (x > y);')
    tu = ef(b, b.expr_divide(xa, x_cmp_gt))
    assert tu.emit_to_string() == pat('a / (x > y);')
    tu = ef(b, b.expr_modulus(xa, x_cmp_gt))
    assert tu.emit_to_string() == pat('a % (x > y);')
    tu = ef(b, b.expr_plus(xa, x_cmp_gt))
    assert tu.emit_to_string() == pat('a + (x > y);')
    tu = ef(b, b.expr_minus(xa, x_cmp_gt))
    assert tu.emit_to_string() == pat('a - (x > y);')
    tu = ef(b, b.expr_lshift(xa, x_cmp_gt))
    assert tu.emit_to_string() == pat('a << (x > y);')
    tu = ef(b, b.expr_rshift(xa, x_cmp_gt))
    assert tu.emit_to_string() == pat('a >> (x > y);')
    tu = ef(b, b.expr_cmp_lt(xa, x_cmp_gt))
    assert tu.emit_to_string() == pat('a < (x > y);')
    tu = ef(b, b.expr_cmp_gt(xa, x_cmp_gt))
    assert tu.emit_to_string() == pat('a > (x > y);')
    tu = ef(b, b.expr_cmp_le(xa, x_cmp_gt))
    assert tu.emit_to_string() == pat('a <= (x > y);')
    tu = ef(b, b.expr_cmp_ge(xa, x_cmp_gt))
    assert tu.emit_to_string() == pat('a >= (x > y);')
    tu = ef(b, b.expr_cmp_eq(xa, x_cmp_gt))
    assert tu.emit_to_string() == pat('a == x > y;')
    tu = ef(b, b.expr_cmp_ne(xa, x_cmp_gt))
    assert tu.emit_to_string() == pat('a != x > y;')
    tu = ef(b, b.expr_bitwise_and(xa, x_cmp_gt))
    assert tu.emit_to_string() == pat('a & x > y;')
    tu = ef(b, b.expr_bitwise_xor(xa, x_cmp_gt))
    assert tu.emit_to_string() == pat('a ^ x > y;')
    tu = ef(b, b.expr_bitwise_or(xa, x_cmp_gt))
    assert tu.emit_to_string() == pat('a | x > y;')
    tu = ef(b, b.expr_logical_and(xa, x_cmp_gt))
    assert tu.emit_to_string() == pat('a && x > y;')
    tu = ef(b, b.expr_logical_or(xa, x_cmp_gt))
    assert tu.emit_to_string() == pat('a || x > y;')
    tu = ef(b, b.expr_conditional(xa, x_cmp_gt, xb))
    assert tu.emit_to_string() == pat('a ? x > y : b;')
    tu = ef(b, b.expr_assign(xa, x_cmp_gt))
    assert tu.emit_to_string() == pat('a = x > y;')
    tu = ef(b, b.expr_assign_times(xa, x_cmp_gt))
    assert tu.emit_to_string() == pat('a *= x > y;')
    tu = ef(b, b.expr_assign_divide(xa, x_cmp_gt))
    assert tu.emit_to_string() == pat('a /= x > y;')
    tu = ef(b, b.expr_assign_modulus(xa, x_cmp_gt))
    assert tu.emit_to_string() == pat('a %= x > y;')
    tu = ef(b, b.expr_assign_plus(xa, x_cmp_gt))
    assert tu.emit_to_string() == pat('a += x > y;')
    tu = ef(b, b.expr_assign_minus(xa, x_cmp_gt))
    assert tu.emit_to_string() == pat('a -= x > y;')
    tu = ef(b, b.expr_assign_lshift(xa, x_cmp_gt))
    assert tu.emit_to_string() == pat('a <<= x > y;')
    tu = ef(b, b.expr_assign_rshift(xa, x_cmp_gt))
    assert tu.emit_to_string() == pat('a >>= x > y;')
    tu = ef(b, b.expr_assign_bitwise_and(xa, x_cmp_gt))
    assert tu.emit_to_string() == pat('a &= x > y;')
    tu = ef(b, b.expr_assign_bitwise_xor(xa, x_cmp_gt))
    assert tu.emit_to_string() == pat('a ^= x > y;')
    tu = ef(b, b.expr_assign_bitwise_or(xa, x_cmp_gt))
    assert tu.emit_to_string() == pat('a |= x > y;')
    tu = ef(b, b.expr_comma(xa, x_cmp_gt))
    assert tu.emit_to_string() == pat('a, x > y;')
    tu = ef(b, b.expr_conditional(xa, xb, x_cmp_gt))
    assert tu.emit_to_string() == pat('a ? b : x > y;')

    tu = ef(b, b.expr_index(x_cmp_le, xa))
    assert tu.emit_to_string() == pat('(x <= y)[a];')
    tu = ef(b, b.expr_call(x_cmp_le, [xa]))
    assert tu.emit_to_string() == pat('(x <= y)(a);')
    tu = ef(b, b.expr_direct_member(x_cmp_le, 'f'))
    assert tu.emit_to_string() == pat('(x <= y).f;')
    tu = ef(b, b.expr_indirect_member(x_cmp_le, 'g'))
    assert tu.emit_to_string() == pat('(x <= y)->g;')
    tu = ef(b, b.expr_post_inc(x_cmp_le))
    assert tu.emit_to_string() == pat('(x <= y)++;')
    tu = ef(b, b.expr_post_dec(x_cmp_le))
    assert tu.emit_to_string() == pat('(x <= y)--;')
    tu = ef(b, b.expr_pre_inc(x_cmp_le))
    assert tu.emit_to_string() == pat('++(x <= y);')
    tu = ef(b, b.expr_pre_dec(x_cmp_le))
    assert tu.emit_to_string() == pat('--(x <= y);')
    tu = ef(b, b.expr_addressof(x_cmp_le))
    assert tu.emit_to_string() == pat('&(x <= y);')
    tu = ef(b, b.expr_deref(x_cmp_le))
    assert tu.emit_to_string() == pat('*(x <= y);')
    tu = ef(b, b.expr_unary_plus(x_cmp_le))
    assert tu.emit_to_string() == pat('+(x <= y);')
    tu = ef(b, b.expr_unary_minus(x_cmp_le))
    assert tu.emit_to_string() == pat('-(x <= y);')
    tu = ef(b, b.expr_bitwise_not(x_cmp_le))
    assert tu.emit_to_string() == pat('~(x <= y);')
    tu = ef(b, b.expr_logical_not(x_cmp_le))
    assert tu.emit_to_string() == pat('!(x <= y);')
    tu = ef(b, b.expr_sizeof_expr(x_cmp_le))
    assert tu.emit_to_string() == pat('sizeof(x <= y);')
    tu = ef(b, b.expr_cast(tv, x_cmp_le))
    assert tu.emit_to_string() == pat('(V)(x <= y);')
    tu = ef(b, b.expr_times(x_cmp_le, xa))
    assert tu.emit_to_string() == pat('(x <= y) * a;')
    tu = ef(b, b.expr_divide(x_cmp_le, xa))
    assert tu.emit_to_string() == pat('(x <= y) / a;')
    tu = ef(b, b.expr_modulus(x_cmp_le, xa))
    assert tu.emit_to_string() == pat('(x <= y) % a;')
    tu = ef(b, b.expr_plus(x_cmp_le, xa))
    assert tu.emit_to_string() == pat('(x <= y) + a;')
    tu = ef(b, b.expr_minus(x_cmp_le, xa))
    assert tu.emit_to_string() == pat('(x <= y) - a;')
    tu = ef(b, b.expr_lshift(x_cmp_le, xa))
    assert tu.emit_to_string() == pat('(x <= y) << a;')
    tu = ef(b, b.expr_rshift(x_cmp_le, xa))
    assert tu.emit_to_string() == pat('(x <= y) >> a;')
    tu = ef(b, b.expr_cmp_lt(x_cmp_le, xa))
    assert tu.emit_to_string() == pat('x <= y < a;')
    tu = ef(b, b.expr_cmp_gt(x_cmp_le, xa))
    assert tu.emit_to_string() == pat('x <= y > a;')
    tu = ef(b, b.expr_cmp_le(x_cmp_le, xa))
    assert tu.emit_to_string() == pat('x <= y <= a;')
    tu = ef(b, b.expr_cmp_ge(x_cmp_le, xa))
    assert tu.emit_to_string() == pat('x <= y >= a;')
    tu = ef(b, b.expr_cmp_eq(x_cmp_le, xa))
    assert tu.emit_to_string() == pat('x <= y == a;')
    tu = ef(b, b.expr_cmp_ne(x_cmp_le, xa))
    assert tu.emit_to_string() == pat('x <= y != a;')
    tu = ef(b, b.expr_bitwise_and(x_cmp_le, xa))
    assert tu.emit_to_string() == pat('x <= y & a;')
    tu = ef(b, b.expr_bitwise_xor(x_cmp_le, xa))
    assert tu.emit_to_string() == pat('x <= y ^ a;')
    tu = ef(b, b.expr_bitwise_or(x_cmp_le, xa))
    assert tu.emit_to_string() == pat('x <= y | a;')
    tu = ef(b, b.expr_logical_and(x_cmp_le, xa))
    assert tu.emit_to_string() == pat('x <= y && a;')
    tu = ef(b, b.expr_logical_or(x_cmp_le, xa))
    assert tu.emit_to_string() == pat('x <= y || a;')
    tu = ef(b, b.expr_conditional(x_cmp_le, xa, xb))
    assert tu.emit_to_string() == pat('x <= y ? a : b;')
    tu = ef(b, b.expr_assign(x_cmp_le, xa))
    assert tu.emit_to_string() == pat('(x <= y) = a;')
    tu = ef(b, b.expr_assign_times(x_cmp_le, xa))
    assert tu.emit_to_string() == pat('(x <= y) *= a;')
    tu = ef(b, b.expr_assign_divide(x_cmp_le, xa))
    assert tu.emit_to_string() == pat('(x <= y) /= a;')
    tu = ef(b, b.expr_assign_modulus(x_cmp_le, xa))
    assert tu.emit_to_string() == pat('(x <= y) %= a;')
    tu = ef(b, b.expr_assign_plus(x_cmp_le, xa))
    assert tu.emit_to_string() == pat('(x <= y) += a;')
    tu = ef(b, b.expr_assign_minus(x_cmp_le, xa))
    assert tu.emit_to_string() == pat('(x <= y) -= a;')
    tu = ef(b, b.expr_assign_lshift(x_cmp_le, xa))
    assert tu.emit_to_string() == pat('(x <= y) <<= a;')
    tu = ef(b, b.expr_assign_rshift(x_cmp_le, xa))
    assert tu.emit_to_string() == pat('(x <= y) >>= a;')
    tu = ef(b, b.expr_assign_bitwise_and(x_cmp_le, xa))
    assert tu.emit_to_string() == pat('(x <= y) &= a;')
    tu = ef(b, b.expr_assign_bitwise_xor(x_cmp_le, xa))
    assert tu.emit_to_string() == pat('(x <= y) ^= a;')
    tu = ef(b, b.expr_assign_bitwise_or(x_cmp_le, xa))
    assert tu.emit_to_string() == pat('(x <= y) |= a;')
    tu = ef(b, b.expr_comma(x_cmp_le, xa))
    assert tu.emit_to_string() == pat('x <= y, a;')
    tu = ef(b, b.expr_index(xa, x_cmp_le))
    assert tu.emit_to_string() == pat('a[x <= y];')
    tu = ef(b, b.expr_call(xa, [x_cmp_le]))
    assert tu.emit_to_string() == pat('a(x <= y);')
    tu = ef(b, b.expr_times(xa, x_cmp_le))
    assert tu.emit_to_string() == pat('a * (x <= y);')
    tu = ef(b, b.expr_divide(xa, x_cmp_le))
    assert tu.emit_to_string() == pat('a / (x <= y);')
    tu = ef(b, b.expr_modulus(xa, x_cmp_le))
    assert tu.emit_to_string() == pat('a % (x <= y);')
    tu = ef(b, b.expr_plus(xa, x_cmp_le))
    assert tu.emit_to_string() == pat('a + (x <= y);')
    tu = ef(b, b.expr_minus(xa, x_cmp_le))
    assert tu.emit_to_string() == pat('a - (x <= y);')
    tu = ef(b, b.expr_lshift(xa, x_cmp_le))
    assert tu.emit_to_string() == pat('a << (x <= y);')
    tu = ef(b, b.expr_rshift(xa, x_cmp_le))
    assert tu.emit_to_string() == pat('a >> (x <= y);')
    tu = ef(b, b.expr_cmp_lt(xa, x_cmp_le))
    assert tu.emit_to_string() == pat('a < (x <= y);')
    tu = ef(b, b.expr_cmp_gt(xa, x_cmp_le))
    assert tu.emit_to_string() == pat('a > (x <= y);')
    tu = ef(b, b.expr_cmp_le(xa, x_cmp_le))
    assert tu.emit_to_string() == pat('a <= (x <= y);')
    tu = ef(b, b.expr_cmp_ge(xa, x_cmp_le))
    assert tu.emit_to_string() == pat('a >= (x <= y);')
    tu = ef(b, b.expr_cmp_eq(xa, x_cmp_le))
    assert tu.emit_to_string() == pat('a == x <= y;')
    tu = ef(b, b.expr_cmp_ne(xa, x_cmp_le))
    assert tu.emit_to_string() == pat('a != x <= y;')
    tu = ef(b, b.expr_bitwise_and(xa, x_cmp_le))
    assert tu.emit_to_string() == pat('a & x <= y;')
    tu = ef(b, b.expr_bitwise_xor(xa, x_cmp_le))
    assert tu.emit_to_string() == pat('a ^ x <= y;')
    tu = ef(b, b.expr_bitwise_or(xa, x_cmp_le))
    assert tu.emit_to_string() == pat('a | x <= y;')
    tu = ef(b, b.expr_logical_and(xa, x_cmp_le))
    assert tu.emit_to_string() == pat('a && x <= y;')
    tu = ef(b, b.expr_logical_or(xa, x_cmp_le))
    assert tu.emit_to_string() == pat('a || x <= y;')
    tu = ef(b, b.expr_conditional(xa, x_cmp_le, xb))
    assert tu.emit_to_string() == pat('a ? x <= y : b;')
    tu = ef(b, b.expr_assign(xa, x_cmp_le))
    assert tu.emit_to_string() == pat('a = x <= y;')
    tu = ef(b, b.expr_assign_times(xa, x_cmp_le))
    assert tu.emit_to_string() == pat('a *= x <= y;')
    tu = ef(b, b.expr_assign_divide(xa, x_cmp_le))
    assert tu.emit_to_string() == pat('a /= x <= y;')
    tu = ef(b, b.expr_assign_modulus(xa, x_cmp_le))
    assert tu.emit_to_string() == pat('a %= x <= y;')
    tu = ef(b, b.expr_assign_plus(xa, x_cmp_le))
    assert tu.emit_to_string() == pat('a += x <= y;')
    tu = ef(b, b.expr_assign_minus(xa, x_cmp_le))
    assert tu.emit_to_string() == pat('a -= x <= y;')
    tu = ef(b, b.expr_assign_lshift(xa, x_cmp_le))
    assert tu.emit_to_string() == pat('a <<= x <= y;')
    tu = ef(b, b.expr_assign_rshift(xa, x_cmp_le))
    assert tu.emit_to_string() == pat('a >>= x <= y;')
    tu = ef(b, b.expr_assign_bitwise_and(xa, x_cmp_le))
    assert tu.emit_to_string() == pat('a &= x <= y;')
    tu = ef(b, b.expr_assign_bitwise_xor(xa, x_cmp_le))
    assert tu.emit_to_string() == pat('a ^= x <= y;')
    tu = ef(b, b.expr_assign_bitwise_or(xa, x_cmp_le))
    assert tu.emit_to_string() == pat('a |= x <= y;')
    tu = ef(b, b.expr_comma(xa, x_cmp_le))
    assert tu.emit_to_string() == pat('a, x <= y;')
    tu = ef(b, b.expr_conditional(xa, xb, x_cmp_le))
    assert tu.emit_to_string() == pat('a ? b : x <= y;')

    tu = ef(b, b.expr_index(x_cmp_ge, xa))
    assert tu.emit_to_string() == pat('(x >= y)[a];')
    tu = ef(b, b.expr_call(x_cmp_ge, [xa]))
    assert tu.emit_to_string() == pat('(x >= y)(a);')
    tu = ef(b, b.expr_direct_member(x_cmp_ge, 'f'))
    assert tu.emit_to_string() == pat('(x >= y).f;')
    tu = ef(b, b.expr_indirect_member(x_cmp_ge, 'g'))
    assert tu.emit_to_string() == pat('(x >= y)->g;')
    tu = ef(b, b.expr_post_inc(x_cmp_ge))
    assert tu.emit_to_string() == pat('(x >= y)++;')
    tu = ef(b, b.expr_post_dec(x_cmp_ge))
    assert tu.emit_to_string() == pat('(x >= y)--;')
    tu = ef(b, b.expr_pre_inc(x_cmp_ge))
    assert tu.emit_to_string() == pat('++(x >= y);')
    tu = ef(b, b.expr_pre_dec(x_cmp_ge))
    assert tu.emit_to_string() == pat('--(x >= y);')
    tu = ef(b, b.expr_addressof(x_cmp_ge))
    assert tu.emit_to_string() == pat('&(x >= y);')
    tu = ef(b, b.expr_deref(x_cmp_ge))
    assert tu.emit_to_string() == pat('*(x >= y);')
    tu = ef(b, b.expr_unary_plus(x_cmp_ge))
    assert tu.emit_to_string() == pat('+(x >= y);')
    tu = ef(b, b.expr_unary_minus(x_cmp_ge))
    assert tu.emit_to_string() == pat('-(x >= y);')
    tu = ef(b, b.expr_bitwise_not(x_cmp_ge))
    assert tu.emit_to_string() == pat('~(x >= y);')
    tu = ef(b, b.expr_logical_not(x_cmp_ge))
    assert tu.emit_to_string() == pat('!(x >= y);')
    tu = ef(b, b.expr_sizeof_expr(x_cmp_ge))
    assert tu.emit_to_string() == pat('sizeof(x >= y);')
    tu = ef(b, b.expr_cast(tv, x_cmp_ge))
    assert tu.emit_to_string() == pat('(V)(x >= y);')
    tu = ef(b, b.expr_times(x_cmp_ge, xa))
    assert tu.emit_to_string() == pat('(x >= y) * a;')
    tu = ef(b, b.expr_divide(x_cmp_ge, xa))
    assert tu.emit_to_string() == pat('(x >= y) / a;')
    tu = ef(b, b.expr_modulus(x_cmp_ge, xa))
    assert tu.emit_to_string() == pat('(x >= y) % a;')
    tu = ef(b, b.expr_plus(x_cmp_ge, xa))
    assert tu.emit_to_string() == pat('(x >= y) + a;')
    tu = ef(b, b.expr_minus(x_cmp_ge, xa))
    assert tu.emit_to_string() == pat('(x >= y) - a;')
    tu = ef(b, b.expr_lshift(x_cmp_ge, xa))
    assert tu.emit_to_string() == pat('(x >= y) << a;')
    tu = ef(b, b.expr_rshift(x_cmp_ge, xa))
    assert tu.emit_to_string() == pat('(x >= y) >> a;')
    tu = ef(b, b.expr_cmp_lt(x_cmp_ge, xa))
    assert tu.emit_to_string() == pat('x >= y < a;')
    tu = ef(b, b.expr_cmp_gt(x_cmp_ge, xa))
    assert tu.emit_to_string() == pat('x >= y > a;')
    tu = ef(b, b.expr_cmp_le(x_cmp_ge, xa))
    assert tu.emit_to_string() == pat('x >= y <= a;')
    tu = ef(b, b.expr_cmp_ge(x_cmp_ge, xa))
    assert tu.emit_to_string() == pat('x >= y >= a;')
    tu = ef(b, b.expr_cmp_eq(x_cmp_ge, xa))
    assert tu.emit_to_string() == pat('x >= y == a;')
    tu = ef(b, b.expr_cmp_ne(x_cmp_ge, xa))
    assert tu.emit_to_string() == pat('x >= y != a;')
    tu = ef(b, b.expr_bitwise_and(x_cmp_ge, xa))
    assert tu.emit_to_string() == pat('x >= y & a;')
    tu = ef(b, b.expr_bitwise_xor(x_cmp_ge, xa))
    assert tu.emit_to_string() == pat('x >= y ^ a;')
    tu = ef(b, b.expr_bitwise_or(x_cmp_ge, xa))
    assert tu.emit_to_string() == pat('x >= y | a;')
    tu = ef(b, b.expr_logical_and(x_cmp_ge, xa))
    assert tu.emit_to_string() == pat('x >= y && a;')
    tu = ef(b, b.expr_logical_or(x_cmp_ge, xa))
    assert tu.emit_to_string() == pat('x >= y || a;')
    tu = ef(b, b.expr_conditional(x_cmp_ge, xa, xb))
    assert tu.emit_to_string() == pat('x >= y ? a : b;')
    tu = ef(b, b.expr_assign(x_cmp_ge, xa))
    assert tu.emit_to_string() == pat('(x >= y) = a;')
    tu = ef(b, b.expr_assign_times(x_cmp_ge, xa))
    assert tu.emit_to_string() == pat('(x >= y) *= a;')
    tu = ef(b, b.expr_assign_divide(x_cmp_ge, xa))
    assert tu.emit_to_string() == pat('(x >= y) /= a;')
    tu = ef(b, b.expr_assign_modulus(x_cmp_ge, xa))
    assert tu.emit_to_string() == pat('(x >= y) %= a;')
    tu = ef(b, b.expr_assign_plus(x_cmp_ge, xa))
    assert tu.emit_to_string() == pat('(x >= y) += a;')
    tu = ef(b, b.expr_assign_minus(x_cmp_ge, xa))
    assert tu.emit_to_string() == pat('(x >= y) -= a;')
    tu = ef(b, b.expr_assign_lshift(x_cmp_ge, xa))
    assert tu.emit_to_string() == pat('(x >= y) <<= a;')
    tu = ef(b, b.expr_assign_rshift(x_cmp_ge, xa))
    assert tu.emit_to_string() == pat('(x >= y) >>= a;')
    tu = ef(b, b.expr_assign_bitwise_and(x_cmp_ge, xa))
    assert tu.emit_to_string() == pat('(x >= y) &= a;')
    tu = ef(b, b.expr_assign_bitwise_xor(x_cmp_ge, xa))
    assert tu.emit_to_string() == pat('(x >= y) ^= a;')
    tu = ef(b, b.expr_assign_bitwise_or(x_cmp_ge, xa))
    assert tu.emit_to_string() == pat('(x >= y) |= a;')
    tu = ef(b, b.expr_comma(x_cmp_ge, xa))
    assert tu.emit_to_string() == pat('x >= y, a;')
    tu = ef(b, b.expr_index(xa, x_cmp_ge))
    assert tu.emit_to_string() == pat('a[x >= y];')
    tu = ef(b, b.expr_call(xa, [x_cmp_ge]))
    assert tu.emit_to_string() == pat('a(x >= y);')
    tu = ef(b, b.expr_times(xa, x_cmp_ge))
    assert tu.emit_to_string() == pat('a * (x >= y);')
    tu = ef(b, b.expr_divide(xa, x_cmp_ge))
    assert tu.emit_to_string() == pat('a / (x >= y);')
    tu = ef(b, b.expr_modulus(xa, x_cmp_ge))
    assert tu.emit_to_string() == pat('a % (x >= y);')
    tu = ef(b, b.expr_plus(xa, x_cmp_ge))
    assert tu.emit_to_string() == pat('a + (x >= y);')
    tu = ef(b, b.expr_minus(xa, x_cmp_ge))
    assert tu.emit_to_string() == pat('a - (x >= y);')
    tu = ef(b, b.expr_lshift(xa, x_cmp_ge))
    assert tu.emit_to_string() == pat('a << (x >= y);')
    tu = ef(b, b.expr_rshift(xa, x_cmp_ge))
    assert tu.emit_to_string() == pat('a >> (x >= y);')
    tu = ef(b, b.expr_cmp_lt(xa, x_cmp_ge))
    assert tu.emit_to_string() == pat('a < (x >= y);')
    tu = ef(b, b.expr_cmp_gt(xa, x_cmp_ge))
    assert tu.emit_to_string() == pat('a > (x >= y);')
    tu = ef(b, b.expr_cmp_le(xa, x_cmp_ge))
    assert tu.emit_to_string() == pat('a <= (x >= y);')
    tu = ef(b, b.expr_cmp_ge(xa, x_cmp_ge))
    assert tu.emit_to_string() == pat('a >= (x >= y);')
    tu = ef(b, b.expr_cmp_eq(xa, x_cmp_ge))
    assert tu.emit_to_string() == pat('a == x >= y;')
    tu = ef(b, b.expr_cmp_ne(xa, x_cmp_ge))
    assert tu.emit_to_string() == pat('a != x >= y;')
    tu = ef(b, b.expr_bitwise_and(xa, x_cmp_ge))
    assert tu.emit_to_string() == pat('a & x >= y;')
    tu = ef(b, b.expr_bitwise_xor(xa, x_cmp_ge))
    assert tu.emit_to_string() == pat('a ^ x >= y;')
    tu = ef(b, b.expr_bitwise_or(xa, x_cmp_ge))
    assert tu.emit_to_string() == pat('a | x >= y;')
    tu = ef(b, b.expr_logical_and(xa, x_cmp_ge))
    assert tu.emit_to_string() == pat('a && x >= y;')
    tu = ef(b, b.expr_logical_or(xa, x_cmp_ge))
    assert tu.emit_to_string() == pat('a || x >= y;')
    tu = ef(b, b.expr_conditional(xa, x_cmp_ge, xb))
    assert tu.emit_to_string() == pat('a ? x >= y : b;')
    tu = ef(b, b.expr_assign(xa, x_cmp_ge))
    assert tu.emit_to_string() == pat('a = x >= y;')
    tu = ef(b, b.expr_assign_times(xa, x_cmp_ge))
    assert tu.emit_to_string() == pat('a *= x >= y;')
    tu = ef(b, b.expr_assign_divide(xa, x_cmp_ge))
    assert tu.emit_to_string() == pat('a /= x >= y;')
    tu = ef(b, b.expr_assign_modulus(xa, x_cmp_ge))
    assert tu.emit_to_string() == pat('a %= x >= y;')
    tu = ef(b, b.expr_assign_plus(xa, x_cmp_ge))
    assert tu.emit_to_string() == pat('a += x >= y;')
    tu = ef(b, b.expr_assign_minus(xa, x_cmp_ge))
    assert tu.emit_to_string() == pat('a -= x >= y;')
    tu = ef(b, b.expr_assign_lshift(xa, x_cmp_ge))
    assert tu.emit_to_string() == pat('a <<= x >= y;')
    tu = ef(b, b.expr_assign_rshift(xa, x_cmp_ge))
    assert tu.emit_to_string() == pat('a >>= x >= y;')
    tu = ef(b, b.expr_assign_bitwise_and(xa, x_cmp_ge))
    assert tu.emit_to_string() == pat('a &= x >= y;')
    tu = ef(b, b.expr_assign_bitwise_xor(xa, x_cmp_ge))
    assert tu.emit_to_string() == pat('a ^= x >= y;')
    tu = ef(b, b.expr_assign_bitwise_or(xa, x_cmp_ge))
    assert tu.emit_to_string() == pat('a |= x >= y;')
    tu = ef(b, b.expr_comma(xa, x_cmp_ge))
    assert tu.emit_to_string() == pat('a, x >= y;')
    tu = ef(b, b.expr_conditional(xa, xb, x_cmp_ge))
    assert tu.emit_to_string() == pat('a ? b : x >= y;')

    tu = ef(b, b.expr_index(x_cmp_eq, xa))
    assert tu.emit_to_string() == pat('(x == y)[a];')
    tu = ef(b, b.expr_call(x_cmp_eq, [xa]))
    assert tu.emit_to_string() == pat('(x == y)(a);')
    tu = ef(b, b.expr_direct_member(x_cmp_eq, 'f'))
    assert tu.emit_to_string() == pat('(x == y).f;')
    tu = ef(b, b.expr_indirect_member(x_cmp_eq, 'g'))
    assert tu.emit_to_string() == pat('(x == y)->g;')
    tu = ef(b, b.expr_post_inc(x_cmp_eq))
    assert tu.emit_to_string() == pat('(x == y)++;')
    tu = ef(b, b.expr_post_dec(x_cmp_eq))
    assert tu.emit_to_string() == pat('(x == y)--;')
    tu = ef(b, b.expr_pre_inc(x_cmp_eq))
    assert tu.emit_to_string() == pat('++(x == y);')
    tu = ef(b, b.expr_pre_dec(x_cmp_eq))
    assert tu.emit_to_string() == pat('--(x == y);')
    tu = ef(b, b.expr_addressof(x_cmp_eq))
    assert tu.emit_to_string() == pat('&(x == y);')
    tu = ef(b, b.expr_deref(x_cmp_eq))
    assert tu.emit_to_string() == pat('*(x == y);')
    tu = ef(b, b.expr_unary_plus(x_cmp_eq))
    assert tu.emit_to_string() == pat('+(x == y);')
    tu = ef(b, b.expr_unary_minus(x_cmp_eq))
    assert tu.emit_to_string() == pat('-(x == y);')
    tu = ef(b, b.expr_bitwise_not(x_cmp_eq))
    assert tu.emit_to_string() == pat('~(x == y);')
    tu = ef(b, b.expr_logical_not(x_cmp_eq))
    assert tu.emit_to_string() == pat('!(x == y);')
    tu = ef(b, b.expr_sizeof_expr(x_cmp_eq))
    assert tu.emit_to_string() == pat('sizeof(x == y);')
    tu = ef(b, b.expr_cast(tv, x_cmp_eq))
    assert tu.emit_to_string() == pat('(V)(x == y);')
    tu = ef(b, b.expr_times(x_cmp_eq, xa))
    assert tu.emit_to_string() == pat('(x == y) * a;')
    tu = ef(b, b.expr_divide(x_cmp_eq, xa))
    assert tu.emit_to_string() == pat('(x == y) / a;')
    tu = ef(b, b.expr_modulus(x_cmp_eq, xa))
    assert tu.emit_to_string() == pat('(x == y) % a;')
    tu = ef(b, b.expr_plus(x_cmp_eq, xa))
    assert tu.emit_to_string() == pat('(x == y) + a;')
    tu = ef(b, b.expr_minus(x_cmp_eq, xa))
    assert tu.emit_to_string() == pat('(x == y) - a;')
    tu = ef(b, b.expr_lshift(x_cmp_eq, xa))
    assert tu.emit_to_string() == pat('(x == y) << a;')
    tu = ef(b, b.expr_rshift(x_cmp_eq, xa))
    assert tu.emit_to_string() == pat('(x == y) >> a;')
    tu = ef(b, b.expr_cmp_lt(x_cmp_eq, xa))
    assert tu.emit_to_string() == pat('(x == y) < a;')
    tu = ef(b, b.expr_cmp_gt(x_cmp_eq, xa))
    assert tu.emit_to_string() == pat('(x == y) > a;')
    tu = ef(b, b.expr_cmp_le(x_cmp_eq, xa))
    assert tu.emit_to_string() == pat('(x == y) <= a;')
    tu = ef(b, b.expr_cmp_ge(x_cmp_eq, xa))
    assert tu.emit_to_string() == pat('(x == y) >= a;')
    tu = ef(b, b.expr_cmp_eq(x_cmp_eq, xa))
    assert tu.emit_to_string() == pat('x == y == a;')
    tu = ef(b, b.expr_cmp_ne(x_cmp_eq, xa))
    assert tu.emit_to_string() == pat('x == y != a;')
    tu = ef(b, b.expr_bitwise_and(x_cmp_eq, xa))
    assert tu.emit_to_string() == pat('x == y & a;')
    tu = ef(b, b.expr_bitwise_xor(x_cmp_eq, xa))
    assert tu.emit_to_string() == pat('x == y ^ a;')
    tu = ef(b, b.expr_bitwise_or(x_cmp_eq, xa))
    assert tu.emit_to_string() == pat('x == y | a;')
    tu = ef(b, b.expr_logical_and(x_cmp_eq, xa))
    assert tu.emit_to_string() == pat('x == y && a;')
    tu = ef(b, b.expr_logical_or(x_cmp_eq, xa))
    assert tu.emit_to_string() == pat('x == y || a;')
    tu = ef(b, b.expr_conditional(x_cmp_eq, xa, xb))
    assert tu.emit_to_string() == pat('x == y ? a : b;')
    tu = ef(b, b.expr_assign(x_cmp_eq, xa))
    assert tu.emit_to_string() == pat('(x == y) = a;')
    tu = ef(b, b.expr_assign_times(x_cmp_eq, xa))
    assert tu.emit_to_string() == pat('(x == y) *= a;')
    tu = ef(b, b.expr_assign_divide(x_cmp_eq, xa))
    assert tu.emit_to_string() == pat('(x == y) /= a;')
    tu = ef(b, b.expr_assign_modulus(x_cmp_eq, xa))
    assert tu.emit_to_string() == pat('(x == y) %= a;')
    tu = ef(b, b.expr_assign_plus(x_cmp_eq, xa))
    assert tu.emit_to_string() == pat('(x == y) += a;')
    tu = ef(b, b.expr_assign_minus(x_cmp_eq, xa))
    assert tu.emit_to_string() == pat('(x == y) -= a;')
    tu = ef(b, b.expr_assign_lshift(x_cmp_eq, xa))
    assert tu.emit_to_string() == pat('(x == y) <<= a;')
    tu = ef(b, b.expr_assign_rshift(x_cmp_eq, xa))
    assert tu.emit_to_string() == pat('(x == y) >>= a;')
    tu = ef(b, b.expr_assign_bitwise_and(x_cmp_eq, xa))
    assert tu.emit_to_string() == pat('(x == y) &= a;')
    tu = ef(b, b.expr_assign_bitwise_xor(x_cmp_eq, xa))
    assert tu.emit_to_string() == pat('(x == y) ^= a;')
    tu = ef(b, b.expr_assign_bitwise_or(x_cmp_eq, xa))
    assert tu.emit_to_string() == pat('(x == y) |= a;')
    tu = ef(b, b.expr_comma(x_cmp_eq, xa))
    assert tu.emit_to_string() == pat('x == y, a;')
    tu = ef(b, b.expr_index(xa, x_cmp_eq))
    assert tu.emit_to_string() == pat('a[x == y];')
    tu = ef(b, b.expr_call(xa, [x_cmp_eq]))
    assert tu.emit_to_string() == pat('a(x == y);')
    tu = ef(b, b.expr_times(xa, x_cmp_eq))
    assert tu.emit_to_string() == pat('a * (x == y);')
    tu = ef(b, b.expr_divide(xa, x_cmp_eq))
    assert tu.emit_to_string() == pat('a / (x == y);')
    tu = ef(b, b.expr_modulus(xa, x_cmp_eq))
    assert tu.emit_to_string() == pat('a % (x == y);')
    tu = ef(b, b.expr_plus(xa, x_cmp_eq))
    assert tu.emit_to_string() == pat('a + (x == y);')
    tu = ef(b, b.expr_minus(xa, x_cmp_eq))
    assert tu.emit_to_string() == pat('a - (x == y);')
    tu = ef(b, b.expr_lshift(xa, x_cmp_eq))
    assert tu.emit_to_string() == pat('a << (x == y);')
    tu = ef(b, b.expr_rshift(xa, x_cmp_eq))
    assert tu.emit_to_string() == pat('a >> (x == y);')
    tu = ef(b, b.expr_cmp_lt(xa, x_cmp_eq))
    assert tu.emit_to_string() == pat('a < (x == y);')
    tu = ef(b, b.expr_cmp_gt(xa, x_cmp_eq))
    assert tu.emit_to_string() == pat('a > (x == y);')
    tu = ef(b, b.expr_cmp_le(xa, x_cmp_eq))
    assert tu.emit_to_string() == pat('a <= (x == y);')
    tu = ef(b, b.expr_cmp_ge(xa, x_cmp_eq))
    assert tu.emit_to_string() == pat('a >= (x == y);')
    tu = ef(b, b.expr_cmp_eq(xa, x_cmp_eq))
    assert tu.emit_to_string() == pat('a == (x == y);')
    tu = ef(b, b.expr_cmp_ne(xa, x_cmp_eq))
    assert tu.emit_to_string() == pat('a != (x == y);')
    tu = ef(b, b.expr_bitwise_and(xa, x_cmp_eq))
    assert tu.emit_to_string() == pat('a & x == y;')
    tu = ef(b, b.expr_bitwise_xor(xa, x_cmp_eq))
    assert tu.emit_to_string() == pat('a ^ x == y;')
    tu = ef(b, b.expr_bitwise_or(xa, x_cmp_eq))
    assert tu.emit_to_string() == pat('a | x == y;')
    tu = ef(b, b.expr_logical_and(xa, x_cmp_eq))
    assert tu.emit_to_string() == pat('a && x == y;')
    tu = ef(b, b.expr_logical_or(xa, x_cmp_eq))
    assert tu.emit_to_string() == pat('a || x == y;')
    tu = ef(b, b.expr_conditional(xa, x_cmp_eq, xb))
    assert tu.emit_to_string() == pat('a ? x == y : b;')
    tu = ef(b, b.expr_assign(xa, x_cmp_eq))
    assert tu.emit_to_string() == pat('a = x == y;')
    tu = ef(b, b.expr_assign_times(xa, x_cmp_eq))
    assert tu.emit_to_string() == pat('a *= x == y;')
    tu = ef(b, b.expr_assign_divide(xa, x_cmp_eq))
    assert tu.emit_to_string() == pat('a /= x == y;')
    tu = ef(b, b.expr_assign_modulus(xa, x_cmp_eq))
    assert tu.emit_to_string() == pat('a %= x == y;')
    tu = ef(b, b.expr_assign_plus(xa, x_cmp_eq))
    assert tu.emit_to_string() == pat('a += x == y;')
    tu = ef(b, b.expr_assign_minus(xa, x_cmp_eq))
    assert tu.emit_to_string() == pat('a -= x == y;')
    tu = ef(b, b.expr_assign_lshift(xa, x_cmp_eq))
    assert tu.emit_to_string() == pat('a <<= x == y;')
    tu = ef(b, b.expr_assign_rshift(xa, x_cmp_eq))
    assert tu.emit_to_string() == pat('a >>= x == y;')
    tu = ef(b, b.expr_assign_bitwise_and(xa, x_cmp_eq))
    assert tu.emit_to_string() == pat('a &= x == y;')
    tu = ef(b, b.expr_assign_bitwise_xor(xa, x_cmp_eq))
    assert tu.emit_to_string() == pat('a ^= x == y;')
    tu = ef(b, b.expr_assign_bitwise_or(xa, x_cmp_eq))
    assert tu.emit_to_string() == pat('a |= x == y;')
    tu = ef(b, b.expr_comma(xa, x_cmp_eq))
    assert tu.emit_to_string() == pat('a, x == y;')
    tu = ef(b, b.expr_conditional(xa, xb, x_cmp_eq))
    assert tu.emit_to_string() == pat('a ? b : x == y;')

    tu = ef(b, b.expr_index(x_cmp_ne, xa))
    assert tu.emit_to_string() == pat('(x != y)[a];')
    tu = ef(b, b.expr_call(x_cmp_ne, [xa]))
    assert tu.emit_to_string() == pat('(x != y)(a);')
    tu = ef(b, b.expr_direct_member(x_cmp_ne, 'f'))
    assert tu.emit_to_string() == pat('(x != y).f;')
    tu = ef(b, b.expr_indirect_member(x_cmp_ne, 'g'))
    assert tu.emit_to_string() == pat('(x != y)->g;')
    tu = ef(b, b.expr_post_inc(x_cmp_ne))
    assert tu.emit_to_string() == pat('(x != y)++;')
    tu = ef(b, b.expr_post_dec(x_cmp_ne))
    assert tu.emit_to_string() == pat('(x != y)--;')
    tu = ef(b, b.expr_pre_inc(x_cmp_ne))
    assert tu.emit_to_string() == pat('++(x != y);')
    tu = ef(b, b.expr_pre_dec(x_cmp_ne))
    assert tu.emit_to_string() == pat('--(x != y);')
    tu = ef(b, b.expr_addressof(x_cmp_ne))
    assert tu.emit_to_string() == pat('&(x != y);')
    tu = ef(b, b.expr_deref(x_cmp_ne))
    assert tu.emit_to_string() == pat('*(x != y);')
    tu = ef(b, b.expr_unary_plus(x_cmp_ne))
    assert tu.emit_to_string() == pat('+(x != y);')
    tu = ef(b, b.expr_unary_minus(x_cmp_ne))
    assert tu.emit_to_string() == pat('-(x != y);')
    tu = ef(b, b.expr_bitwise_not(x_cmp_ne))
    assert tu.emit_to_string() == pat('~(x != y);')
    tu = ef(b, b.expr_logical_not(x_cmp_ne))
    assert tu.emit_to_string() == pat('!(x != y);')
    tu = ef(b, b.expr_sizeof_expr(x_cmp_ne))
    assert tu.emit_to_string() == pat('sizeof(x != y);')
    tu = ef(b, b.expr_cast(tv, x_cmp_ne))
    assert tu.emit_to_string() == pat('(V)(x != y);')
    tu = ef(b, b.expr_times(x_cmp_ne, xa))
    assert tu.emit_to_string() == pat('(x != y) * a;')
    tu = ef(b, b.expr_divide(x_cmp_ne, xa))
    assert tu.emit_to_string() == pat('(x != y) / a;')
    tu = ef(b, b.expr_modulus(x_cmp_ne, xa))
    assert tu.emit_to_string() == pat('(x != y) % a;')
    tu = ef(b, b.expr_plus(x_cmp_ne, xa))
    assert tu.emit_to_string() == pat('(x != y) + a;')
    tu = ef(b, b.expr_minus(x_cmp_ne, xa))
    assert tu.emit_to_string() == pat('(x != y) - a;')
    tu = ef(b, b.expr_lshift(x_cmp_ne, xa))
    assert tu.emit_to_string() == pat('(x != y) << a;')
    tu = ef(b, b.expr_rshift(x_cmp_ne, xa))
    assert tu.emit_to_string() == pat('(x != y) >> a;')
    tu = ef(b, b.expr_cmp_lt(x_cmp_ne, xa))
    assert tu.emit_to_string() == pat('(x != y) < a;')
    tu = ef(b, b.expr_cmp_gt(x_cmp_ne, xa))
    assert tu.emit_to_string() == pat('(x != y) > a;')
    tu = ef(b, b.expr_cmp_le(x_cmp_ne, xa))
    assert tu.emit_to_string() == pat('(x != y) <= a;')
    tu = ef(b, b.expr_cmp_ge(x_cmp_ne, xa))
    assert tu.emit_to_string() == pat('(x != y) >= a;')
    tu = ef(b, b.expr_cmp_eq(x_cmp_ne, xa))
    assert tu.emit_to_string() == pat('x != y == a;')
    tu = ef(b, b.expr_cmp_ne(x_cmp_ne, xa))
    assert tu.emit_to_string() == pat('x != y != a;')
    tu = ef(b, b.expr_bitwise_and(x_cmp_ne, xa))
    assert tu.emit_to_string() == pat('x != y & a;')
    tu = ef(b, b.expr_bitwise_xor(x_cmp_ne, xa))
    assert tu.emit_to_string() == pat('x != y ^ a;')
    tu = ef(b, b.expr_bitwise_or(x_cmp_ne, xa))
    assert tu.emit_to_string() == pat('x != y | a;')
    tu = ef(b, b.expr_logical_and(x_cmp_ne, xa))
    assert tu.emit_to_string() == pat('x != y && a;')
    tu = ef(b, b.expr_logical_or(x_cmp_ne, xa))
    assert tu.emit_to_string() == pat('x != y || a;')
    tu = ef(b, b.expr_conditional(x_cmp_ne, xa, xb))
    assert tu.emit_to_string() == pat('x != y ? a : b;')
    tu = ef(b, b.expr_assign(x_cmp_ne, xa))
    assert tu.emit_to_string() == pat('(x != y) = a;')
    tu = ef(b, b.expr_assign_times(x_cmp_ne, xa))
    assert tu.emit_to_string() == pat('(x != y) *= a;')
    tu = ef(b, b.expr_assign_divide(x_cmp_ne, xa))
    assert tu.emit_to_string() == pat('(x != y) /= a;')
    tu = ef(b, b.expr_assign_modulus(x_cmp_ne, xa))
    assert tu.emit_to_string() == pat('(x != y) %= a;')
    tu = ef(b, b.expr_assign_plus(x_cmp_ne, xa))
    assert tu.emit_to_string() == pat('(x != y) += a;')
    tu = ef(b, b.expr_assign_minus(x_cmp_ne, xa))
    assert tu.emit_to_string() == pat('(x != y) -= a;')
    tu = ef(b, b.expr_assign_lshift(x_cmp_ne, xa))
    assert tu.emit_to_string() == pat('(x != y) <<= a;')
    tu = ef(b, b.expr_assign_rshift(x_cmp_ne, xa))
    assert tu.emit_to_string() == pat('(x != y) >>= a;')
    tu = ef(b, b.expr_assign_bitwise_and(x_cmp_ne, xa))
    assert tu.emit_to_string() == pat('(x != y) &= a;')
    tu = ef(b, b.expr_assign_bitwise_xor(x_cmp_ne, xa))
    assert tu.emit_to_string() == pat('(x != y) ^= a;')
    tu = ef(b, b.expr_assign_bitwise_or(x_cmp_ne, xa))
    assert tu.emit_to_string() == pat('(x != y) |= a;')
    tu = ef(b, b.expr_comma(x_cmp_ne, xa))
    assert tu.emit_to_string() == pat('x != y, a;')
    tu = ef(b, b.expr_index(xa, x_cmp_ne))
    assert tu.emit_to_string() == pat('a[x != y];')
    tu = ef(b, b.expr_call(xa, [x_cmp_ne]))
    assert tu.emit_to_string() == pat('a(x != y);')
    tu = ef(b, b.expr_times(xa, x_cmp_ne))
    assert tu.emit_to_string() == pat('a * (x != y);')
    tu = ef(b, b.expr_divide(xa, x_cmp_ne))
    assert tu.emit_to_string() == pat('a / (x != y);')
    tu = ef(b, b.expr_modulus(xa, x_cmp_ne))
    assert tu.emit_to_string() == pat('a % (x != y);')
    tu = ef(b, b.expr_plus(xa, x_cmp_ne))
    assert tu.emit_to_string() == pat('a + (x != y);')
    tu = ef(b, b.expr_minus(xa, x_cmp_ne))
    assert tu.emit_to_string() == pat('a - (x != y);')
    tu = ef(b, b.expr_lshift(xa, x_cmp_ne))
    assert tu.emit_to_string() == pat('a << (x != y);')
    tu = ef(b, b.expr_rshift(xa, x_cmp_ne))
    assert tu.emit_to_string() == pat('a >> (x != y);')
    tu = ef(b, b.expr_cmp_lt(xa, x_cmp_ne))
    assert tu.emit_to_string() == pat('a < (x != y);')
    tu = ef(b, b.expr_cmp_gt(xa, x_cmp_ne))
    assert tu.emit_to_string() == pat('a > (x != y);')
    tu = ef(b, b.expr_cmp_le(xa, x_cmp_ne))
    assert tu.emit_to_string() == pat('a <= (x != y);')
    tu = ef(b, b.expr_cmp_ge(xa, x_cmp_ne))
    assert tu.emit_to_string() == pat('a >= (x != y);')
    tu = ef(b, b.expr_cmp_eq(xa, x_cmp_ne))
    assert tu.emit_to_string() == pat('a == (x != y);')
    tu = ef(b, b.expr_cmp_ne(xa, x_cmp_ne))
    assert tu.emit_to_string() == pat('a != (x != y);')
    tu = ef(b, b.expr_bitwise_and(xa, x_cmp_ne))
    assert tu.emit_to_string() == pat('a & x != y;')
    tu = ef(b, b.expr_bitwise_xor(xa, x_cmp_ne))
    assert tu.emit_to_string() == pat('a ^ x != y;')
    tu = ef(b, b.expr_bitwise_or(xa, x_cmp_ne))
    assert tu.emit_to_string() == pat('a | x != y;')
    tu = ef(b, b.expr_logical_and(xa, x_cmp_ne))
    assert tu.emit_to_string() == pat('a && x != y;')
    tu = ef(b, b.expr_logical_or(xa, x_cmp_ne))
    assert tu.emit_to_string() == pat('a || x != y;')
    tu = ef(b, b.expr_conditional(xa, x_cmp_ne, xb))
    assert tu.emit_to_string() == pat('a ? x != y : b;')
    tu = ef(b, b.expr_assign(xa, x_cmp_ne))
    assert tu.emit_to_string() == pat('a = x != y;')
    tu = ef(b, b.expr_assign_times(xa, x_cmp_ne))
    assert tu.emit_to_string() == pat('a *= x != y;')
    tu = ef(b, b.expr_assign_divide(xa, x_cmp_ne))
    assert tu.emit_to_string() == pat('a /= x != y;')
    tu = ef(b, b.expr_assign_modulus(xa, x_cmp_ne))
    assert tu.emit_to_string() == pat('a %= x != y;')
    tu = ef(b, b.expr_assign_plus(xa, x_cmp_ne))
    assert tu.emit_to_string() == pat('a += x != y;')
    tu = ef(b, b.expr_assign_minus(xa, x_cmp_ne))
    assert tu.emit_to_string() == pat('a -= x != y;')
    tu = ef(b, b.expr_assign_lshift(xa, x_cmp_ne))
    assert tu.emit_to_string() == pat('a <<= x != y;')
    tu = ef(b, b.expr_assign_rshift(xa, x_cmp_ne))
    assert tu.emit_to_string() == pat('a >>= x != y;')
    tu = ef(b, b.expr_assign_bitwise_and(xa, x_cmp_ne))
    assert tu.emit_to_string() == pat('a &= x != y;')
    tu = ef(b, b.expr_assign_bitwise_xor(xa, x_cmp_ne))
    assert tu.emit_to_string() == pat('a ^= x != y;')
    tu = ef(b, b.expr_assign_bitwise_or(xa, x_cmp_ne))
    assert tu.emit_to_string() == pat('a |= x != y;')
    tu = ef(b, b.expr_comma(xa, x_cmp_ne))
    assert tu.emit_to_string() == pat('a, x != y;')
    tu = ef(b, b.expr_conditional(xa, xb, x_cmp_ne))
    assert tu.emit_to_string() == pat('a ? b : x != y;')

    tu = ef(b, b.expr_index(x_bitwise_and, xa))
    assert tu.emit_to_string() == pat('(x & y)[a];')
    tu = ef(b, b.expr_call(x_bitwise_and, [xa]))
    assert tu.emit_to_string() == pat('(x & y)(a);')
    tu = ef(b, b.expr_direct_member(x_bitwise_and, 'f'))
    assert tu.emit_to_string() == pat('(x & y).f;')
    tu = ef(b, b.expr_indirect_member(x_bitwise_and, 'g'))
    assert tu.emit_to_string() == pat('(x & y)->g;')
    tu = ef(b, b.expr_post_inc(x_bitwise_and))
    assert tu.emit_to_string() == pat('(x & y)++;')
    tu = ef(b, b.expr_post_dec(x_bitwise_and))
    assert tu.emit_to_string() == pat('(x & y)--;')
    tu = ef(b, b.expr_pre_inc(x_bitwise_and))
    assert tu.emit_to_string() == pat('++(x & y);')
    tu = ef(b, b.expr_pre_dec(x_bitwise_and))
    assert tu.emit_to_string() == pat('--(x & y);')
    tu = ef(b, b.expr_addressof(x_bitwise_and))
    assert tu.emit_to_string() == pat('&(x & y);')
    tu = ef(b, b.expr_deref(x_bitwise_and))
    assert tu.emit_to_string() == pat('*(x & y);')
    tu = ef(b, b.expr_unary_plus(x_bitwise_and))
    assert tu.emit_to_string() == pat('+(x & y);')
    tu = ef(b, b.expr_unary_minus(x_bitwise_and))
    assert tu.emit_to_string() == pat('-(x & y);')
    tu = ef(b, b.expr_bitwise_not(x_bitwise_and))
    assert tu.emit_to_string() == pat('~(x & y);')
    tu = ef(b, b.expr_logical_not(x_bitwise_and))
    assert tu.emit_to_string() == pat('!(x & y);')
    tu = ef(b, b.expr_sizeof_expr(x_bitwise_and))
    assert tu.emit_to_string() == pat('sizeof(x & y);')
    tu = ef(b, b.expr_cast(tv, x_bitwise_and))
    assert tu.emit_to_string() == pat('(V)(x & y);')
    tu = ef(b, b.expr_times(x_bitwise_and, xa))
    assert tu.emit_to_string() == pat('(x & y) * a;')
    tu = ef(b, b.expr_divide(x_bitwise_and, xa))
    assert tu.emit_to_string() == pat('(x & y) / a;')
    tu = ef(b, b.expr_modulus(x_bitwise_and, xa))
    assert tu.emit_to_string() == pat('(x & y) % a;')
    tu = ef(b, b.expr_plus(x_bitwise_and, xa))
    assert tu.emit_to_string() == pat('(x & y) + a;')
    tu = ef(b, b.expr_minus(x_bitwise_and, xa))
    assert tu.emit_to_string() == pat('(x & y) - a;')
    tu = ef(b, b.expr_lshift(x_bitwise_and, xa))
    assert tu.emit_to_string() == pat('(x & y) << a;')
    tu = ef(b, b.expr_rshift(x_bitwise_and, xa))
    assert tu.emit_to_string() == pat('(x & y) >> a;')
    tu = ef(b, b.expr_cmp_lt(x_bitwise_and, xa))
    assert tu.emit_to_string() == pat('(x & y) < a;')
    tu = ef(b, b.expr_cmp_gt(x_bitwise_and, xa))
    assert tu.emit_to_string() == pat('(x & y) > a;')
    tu = ef(b, b.expr_cmp_le(x_bitwise_and, xa))
    assert tu.emit_to_string() == pat('(x & y) <= a;')
    tu = ef(b, b.expr_cmp_ge(x_bitwise_and, xa))
    assert tu.emit_to_string() == pat('(x & y) >= a;')
    tu = ef(b, b.expr_cmp_eq(x_bitwise_and, xa))
    assert tu.emit_to_string() == pat('(x & y) == a;')
    tu = ef(b, b.expr_cmp_ne(x_bitwise_and, xa))
    assert tu.emit_to_string() == pat('(x & y) != a;')
    tu = ef(b, b.expr_bitwise_and(x_bitwise_and, xa))
    assert tu.emit_to_string() == pat('x & y & a;')
    tu = ef(b, b.expr_bitwise_xor(x_bitwise_and, xa))
    assert tu.emit_to_string() == pat('x & y ^ a;')
    tu = ef(b, b.expr_bitwise_or(x_bitwise_and, xa))
    assert tu.emit_to_string() == pat('x & y | a;')
    tu = ef(b, b.expr_logical_and(x_bitwise_and, xa))
    assert tu.emit_to_string() == pat('x & y && a;')
    tu = ef(b, b.expr_logical_or(x_bitwise_and, xa))
    assert tu.emit_to_string() == pat('x & y || a;')
    tu = ef(b, b.expr_conditional(x_bitwise_and, xa, xb))
    assert tu.emit_to_string() == pat('x & y ? a : b;')
    tu = ef(b, b.expr_assign(x_bitwise_and, xa))
    assert tu.emit_to_string() == pat('(x & y) = a;')
    tu = ef(b, b.expr_assign_times(x_bitwise_and, xa))
    assert tu.emit_to_string() == pat('(x & y) *= a;')
    tu = ef(b, b.expr_assign_divide(x_bitwise_and, xa))
    assert tu.emit_to_string() == pat('(x & y) /= a;')
    tu = ef(b, b.expr_assign_modulus(x_bitwise_and, xa))
    assert tu.emit_to_string() == pat('(x & y) %= a;')
    tu = ef(b, b.expr_assign_plus(x_bitwise_and, xa))
    assert tu.emit_to_string() == pat('(x & y) += a;')
    tu = ef(b, b.expr_assign_minus(x_bitwise_and, xa))
    assert tu.emit_to_string() == pat('(x & y) -= a;')
    tu = ef(b, b.expr_assign_lshift(x_bitwise_and, xa))
    assert tu.emit_to_string() == pat('(x & y) <<= a;')
    tu = ef(b, b.expr_assign_rshift(x_bitwise_and, xa))
    assert tu.emit_to_string() == pat('(x & y) >>= a;')
    tu = ef(b, b.expr_assign_bitwise_and(x_bitwise_and, xa))
    assert tu.emit_to_string() == pat('(x & y) &= a;')
    tu = ef(b, b.expr_assign_bitwise_xor(x_bitwise_and, xa))
    assert tu.emit_to_string() == pat('(x & y) ^= a;')
    tu = ef(b, b.expr_assign_bitwise_or(x_bitwise_and, xa))
    assert tu.emit_to_string() == pat('(x & y) |= a;')
    tu = ef(b, b.expr_comma(x_bitwise_and, xa))
    assert tu.emit_to_string() == pat('x & y, a;')
    tu = ef(b, b.expr_index(xa, x_bitwise_and))
    assert tu.emit_to_string() == pat('a[x & y];')
    tu = ef(b, b.expr_call(xa, [x_bitwise_and]))
    assert tu.emit_to_string() == pat('a(x & y);')
    tu = ef(b, b.expr_times(xa, x_bitwise_and))
    assert tu.emit_to_string() == pat('a * (x & y);')
    tu = ef(b, b.expr_divide(xa, x_bitwise_and))
    assert tu.emit_to_string() == pat('a / (x & y);')
    tu = ef(b, b.expr_modulus(xa, x_bitwise_and))
    assert tu.emit_to_string() == pat('a % (x & y);')
    tu = ef(b, b.expr_plus(xa, x_bitwise_and))
    assert tu.emit_to_string() == pat('a + (x & y);')
    tu = ef(b, b.expr_minus(xa, x_bitwise_and))
    assert tu.emit_to_string() == pat('a - (x & y);')
    tu = ef(b, b.expr_lshift(xa, x_bitwise_and))
    assert tu.emit_to_string() == pat('a << (x & y);')
    tu = ef(b, b.expr_rshift(xa, x_bitwise_and))
    assert tu.emit_to_string() == pat('a >> (x & y);')
    tu = ef(b, b.expr_cmp_lt(xa, x_bitwise_and))
    assert tu.emit_to_string() == pat('a < (x & y);')
    tu = ef(b, b.expr_cmp_gt(xa, x_bitwise_and))
    assert tu.emit_to_string() == pat('a > (x & y);')
    tu = ef(b, b.expr_cmp_le(xa, x_bitwise_and))
    assert tu.emit_to_string() == pat('a <= (x & y);')
    tu = ef(b, b.expr_cmp_ge(xa, x_bitwise_and))
    assert tu.emit_to_string() == pat('a >= (x & y);')
    tu = ef(b, b.expr_cmp_eq(xa, x_bitwise_and))
    assert tu.emit_to_string() == pat('a == (x & y);')
    tu = ef(b, b.expr_cmp_ne(xa, x_bitwise_and))
    assert tu.emit_to_string() == pat('a != (x & y);')
    tu = ef(b, b.expr_bitwise_and(xa, x_bitwise_and))
    assert tu.emit_to_string() == pat('a & (x & y);')
    tu = ef(b, b.expr_bitwise_xor(xa, x_bitwise_and))
    assert tu.emit_to_string() == pat('a ^ x & y;')
    tu = ef(b, b.expr_bitwise_or(xa, x_bitwise_and))
    assert tu.emit_to_string() == pat('a | x & y;')
    tu = ef(b, b.expr_logical_and(xa, x_bitwise_and))
    assert tu.emit_to_string() == pat('a && x & y;')
    tu = ef(b, b.expr_logical_or(xa, x_bitwise_and))
    assert tu.emit_to_string() == pat('a || x & y;')
    tu = ef(b, b.expr_conditional(xa, x_bitwise_and, xb))
    assert tu.emit_to_string() == pat('a ? x & y : b;')
    tu = ef(b, b.expr_assign(xa, x_bitwise_and))
    assert tu.emit_to_string() == pat('a = x & y;')
    tu = ef(b, b.expr_assign_times(xa, x_bitwise_and))
    assert tu.emit_to_string() == pat('a *= x & y;')
    tu = ef(b, b.expr_assign_divide(xa, x_bitwise_and))
    assert tu.emit_to_string() == pat('a /= x & y;')
    tu = ef(b, b.expr_assign_modulus(xa, x_bitwise_and))
    assert tu.emit_to_string() == pat('a %= x & y;')
    tu = ef(b, b.expr_assign_plus(xa, x_bitwise_and))
    assert tu.emit_to_string() == pat('a += x & y;')
    tu = ef(b, b.expr_assign_minus(xa, x_bitwise_and))
    assert tu.emit_to_string() == pat('a -= x & y;')
    tu = ef(b, b.expr_assign_lshift(xa, x_bitwise_and))
    assert tu.emit_to_string() == pat('a <<= x & y;')
    tu = ef(b, b.expr_assign_rshift(xa, x_bitwise_and))
    assert tu.emit_to_string() == pat('a >>= x & y;')
    tu = ef(b, b.expr_assign_bitwise_and(xa, x_bitwise_and))
    assert tu.emit_to_string() == pat('a &= x & y;')
    tu = ef(b, b.expr_assign_bitwise_xor(xa, x_bitwise_and))
    assert tu.emit_to_string() == pat('a ^= x & y;')
    tu = ef(b, b.expr_assign_bitwise_or(xa, x_bitwise_and))
    assert tu.emit_to_string() == pat('a |= x & y;')
    tu = ef(b, b.expr_comma(xa, x_bitwise_and))
    assert tu.emit_to_string() == pat('a, x & y;')
    tu = ef(b, b.expr_conditional(xa, xb, x_bitwise_and))
    assert tu.emit_to_string() == pat('a ? b : x & y;')

    tu = ef(b, b.expr_index(x_bitwise_xor, xa))
    assert tu.emit_to_string() == pat('(x ^ y)[a];')
    tu = ef(b, b.expr_call(x_bitwise_xor, [xa]))
    assert tu.emit_to_string() == pat('(x ^ y)(a);')
    tu = ef(b, b.expr_direct_member(x_bitwise_xor, 'f'))
    assert tu.emit_to_string() == pat('(x ^ y).f;')
    tu = ef(b, b.expr_indirect_member(x_bitwise_xor, 'g'))
    assert tu.emit_to_string() == pat('(x ^ y)->g;')
    tu = ef(b, b.expr_post_inc(x_bitwise_xor))
    assert tu.emit_to_string() == pat('(x ^ y)++;')
    tu = ef(b, b.expr_post_dec(x_bitwise_xor))
    assert tu.emit_to_string() == pat('(x ^ y)--;')
    tu = ef(b, b.expr_pre_inc(x_bitwise_xor))
    assert tu.emit_to_string() == pat('++(x ^ y);')
    tu = ef(b, b.expr_pre_dec(x_bitwise_xor))
    assert tu.emit_to_string() == pat('--(x ^ y);')
    tu = ef(b, b.expr_addressof(x_bitwise_xor))
    assert tu.emit_to_string() == pat('&(x ^ y);')
    tu = ef(b, b.expr_deref(x_bitwise_xor))
    assert tu.emit_to_string() == pat('*(x ^ y);')
    tu = ef(b, b.expr_unary_plus(x_bitwise_xor))
    assert tu.emit_to_string() == pat('+(x ^ y);')
    tu = ef(b, b.expr_unary_minus(x_bitwise_xor))
    assert tu.emit_to_string() == pat('-(x ^ y);')
    tu = ef(b, b.expr_bitwise_not(x_bitwise_xor))
    assert tu.emit_to_string() == pat('~(x ^ y);')
    tu = ef(b, b.expr_logical_not(x_bitwise_xor))
    assert tu.emit_to_string() == pat('!(x ^ y);')
    tu = ef(b, b.expr_sizeof_expr(x_bitwise_xor))
    assert tu.emit_to_string() == pat('sizeof(x ^ y);')
    tu = ef(b, b.expr_cast(tv, x_bitwise_xor))
    assert tu.emit_to_string() == pat('(V)(x ^ y);')
    tu = ef(b, b.expr_times(x_bitwise_xor, xa))
    assert tu.emit_to_string() == pat('(x ^ y) * a;')
    tu = ef(b, b.expr_divide(x_bitwise_xor, xa))
    assert tu.emit_to_string() == pat('(x ^ y) / a;')
    tu = ef(b, b.expr_modulus(x_bitwise_xor, xa))
    assert tu.emit_to_string() == pat('(x ^ y) % a;')
    tu = ef(b, b.expr_plus(x_bitwise_xor, xa))
    assert tu.emit_to_string() == pat('(x ^ y) + a;')
    tu = ef(b, b.expr_minus(x_bitwise_xor, xa))
    assert tu.emit_to_string() == pat('(x ^ y) - a;')
    tu = ef(b, b.expr_lshift(x_bitwise_xor, xa))
    assert tu.emit_to_string() == pat('(x ^ y) << a;')
    tu = ef(b, b.expr_rshift(x_bitwise_xor, xa))
    assert tu.emit_to_string() == pat('(x ^ y) >> a;')
    tu = ef(b, b.expr_cmp_lt(x_bitwise_xor, xa))
    assert tu.emit_to_string() == pat('(x ^ y) < a;')
    tu = ef(b, b.expr_cmp_gt(x_bitwise_xor, xa))
    assert tu.emit_to_string() == pat('(x ^ y) > a;')
    tu = ef(b, b.expr_cmp_le(x_bitwise_xor, xa))
    assert tu.emit_to_string() == pat('(x ^ y) <= a;')
    tu = ef(b, b.expr_cmp_ge(x_bitwise_xor, xa))
    assert tu.emit_to_string() == pat('(x ^ y) >= a;')
    tu = ef(b, b.expr_cmp_eq(x_bitwise_xor, xa))
    assert tu.emit_to_string() == pat('(x ^ y) == a;')
    tu = ef(b, b.expr_cmp_ne(x_bitwise_xor, xa))
    assert tu.emit_to_string() == pat('(x ^ y) != a;')
    tu = ef(b, b.expr_bitwise_and(x_bitwise_xor, xa))
    assert tu.emit_to_string() == pat('(x ^ y) & a;')
    tu = ef(b, b.expr_bitwise_xor(x_bitwise_xor, xa))
    assert tu.emit_to_string() == pat('x ^ y ^ a;')
    tu = ef(b, b.expr_bitwise_or(x_bitwise_xor, xa))
    assert tu.emit_to_string() == pat('x ^ y | a;')
    tu = ef(b, b.expr_logical_and(x_bitwise_xor, xa))
    assert tu.emit_to_string() == pat('x ^ y && a;')
    tu = ef(b, b.expr_logical_or(x_bitwise_xor, xa))
    assert tu.emit_to_string() == pat('x ^ y || a;')
    tu = ef(b, b.expr_conditional(x_bitwise_xor, xa, xb))
    assert tu.emit_to_string() == pat('x ^ y ? a : b;')
    tu = ef(b, b.expr_assign(x_bitwise_xor, xa))
    assert tu.emit_to_string() == pat('(x ^ y) = a;')
    tu = ef(b, b.expr_assign_times(x_bitwise_xor, xa))
    assert tu.emit_to_string() == pat('(x ^ y) *= a;')
    tu = ef(b, b.expr_assign_divide(x_bitwise_xor, xa))
    assert tu.emit_to_string() == pat('(x ^ y) /= a;')
    tu = ef(b, b.expr_assign_modulus(x_bitwise_xor, xa))
    assert tu.emit_to_string() == pat('(x ^ y) %= a;')
    tu = ef(b, b.expr_assign_plus(x_bitwise_xor, xa))
    assert tu.emit_to_string() == pat('(x ^ y) += a;')
    tu = ef(b, b.expr_assign_minus(x_bitwise_xor, xa))
    assert tu.emit_to_string() == pat('(x ^ y) -= a;')
    tu = ef(b, b.expr_assign_lshift(x_bitwise_xor, xa))
    assert tu.emit_to_string() == pat('(x ^ y) <<= a;')
    tu = ef(b, b.expr_assign_rshift(x_bitwise_xor, xa))
    assert tu.emit_to_string() == pat('(x ^ y) >>= a;')
    tu = ef(b, b.expr_assign_bitwise_and(x_bitwise_xor, xa))
    assert tu.emit_to_string() == pat('(x ^ y) &= a;')
    tu = ef(b, b.expr_assign_bitwise_xor(x_bitwise_xor, xa))
    assert tu.emit_to_string() == pat('(x ^ y) ^= a;')
    tu = ef(b, b.expr_assign_bitwise_or(x_bitwise_xor, xa))
    assert tu.emit_to_string() == pat('(x ^ y) |= a;')
    tu = ef(b, b.expr_comma(x_bitwise_xor, xa))
    assert tu.emit_to_string() == pat('x ^ y, a;')
    tu = ef(b, b.expr_index(xa, x_bitwise_xor))
    assert tu.emit_to_string() == pat('a[x ^ y];')
    tu = ef(b, b.expr_call(xa, [x_bitwise_xor]))
    assert tu.emit_to_string() == pat('a(x ^ y);')
    tu = ef(b, b.expr_times(xa, x_bitwise_xor))
    assert tu.emit_to_string() == pat('a * (x ^ y);')
    tu = ef(b, b.expr_divide(xa, x_bitwise_xor))
    assert tu.emit_to_string() == pat('a / (x ^ y);')
    tu = ef(b, b.expr_modulus(xa, x_bitwise_xor))
    assert tu.emit_to_string() == pat('a % (x ^ y);')
    tu = ef(b, b.expr_plus(xa, x_bitwise_xor))
    assert tu.emit_to_string() == pat('a + (x ^ y);')
    tu = ef(b, b.expr_minus(xa, x_bitwise_xor))
    assert tu.emit_to_string() == pat('a - (x ^ y);')
    tu = ef(b, b.expr_lshift(xa, x_bitwise_xor))
    assert tu.emit_to_string() == pat('a << (x ^ y);')
    tu = ef(b, b.expr_rshift(xa, x_bitwise_xor))
    assert tu.emit_to_string() == pat('a >> (x ^ y);')
    tu = ef(b, b.expr_cmp_lt(xa, x_bitwise_xor))
    assert tu.emit_to_string() == pat('a < (x ^ y);')
    tu = ef(b, b.expr_cmp_gt(xa, x_bitwise_xor))
    assert tu.emit_to_string() == pat('a > (x ^ y);')
    tu = ef(b, b.expr_cmp_le(xa, x_bitwise_xor))
    assert tu.emit_to_string() == pat('a <= (x ^ y);')
    tu = ef(b, b.expr_cmp_ge(xa, x_bitwise_xor))
    assert tu.emit_to_string() == pat('a >= (x ^ y);')
    tu = ef(b, b.expr_cmp_eq(xa, x_bitwise_xor))
    assert tu.emit_to_string() == pat('a == (x ^ y);')
    tu = ef(b, b.expr_cmp_ne(xa, x_bitwise_xor))
    assert tu.emit_to_string() == pat('a != (x ^ y);')
    tu = ef(b, b.expr_bitwise_and(xa, x_bitwise_xor))
    assert tu.emit_to_string() == pat('a & (x ^ y);')
    tu = ef(b, b.expr_bitwise_xor(xa, x_bitwise_xor))
    assert tu.emit_to_string() == pat('a ^ (x ^ y);')
    tu = ef(b, b.expr_bitwise_or(xa, x_bitwise_xor))
    assert tu.emit_to_string() == pat('a | x ^ y;')
    tu = ef(b, b.expr_logical_and(xa, x_bitwise_xor))
    assert tu.emit_to_string() == pat('a && x ^ y;')
    tu = ef(b, b.expr_logical_or(xa, x_bitwise_xor))
    assert tu.emit_to_string() == pat('a || x ^ y;')
    tu = ef(b, b.expr_conditional(xa, x_bitwise_xor, xb))
    assert tu.emit_to_string() == pat('a ? x ^ y : b;')
    tu = ef(b, b.expr_assign(xa, x_bitwise_xor))
    assert tu.emit_to_string() == pat('a = x ^ y;')
    tu = ef(b, b.expr_assign_times(xa, x_bitwise_xor))
    assert tu.emit_to_string() == pat('a *= x ^ y;')
    tu = ef(b, b.expr_assign_divide(xa, x_bitwise_xor))
    assert tu.emit_to_string() == pat('a /= x ^ y;')
    tu = ef(b, b.expr_assign_modulus(xa, x_bitwise_xor))
    assert tu.emit_to_string() == pat('a %= x ^ y;')
    tu = ef(b, b.expr_assign_plus(xa, x_bitwise_xor))
    assert tu.emit_to_string() == pat('a += x ^ y;')
    tu = ef(b, b.expr_assign_minus(xa, x_bitwise_xor))
    assert tu.emit_to_string() == pat('a -= x ^ y;')
    tu = ef(b, b.expr_assign_lshift(xa, x_bitwise_xor))
    assert tu.emit_to_string() == pat('a <<= x ^ y;')
    tu = ef(b, b.expr_assign_rshift(xa, x_bitwise_xor))
    assert tu.emit_to_string() == pat('a >>= x ^ y;')
    tu = ef(b, b.expr_assign_bitwise_and(xa, x_bitwise_xor))
    assert tu.emit_to_string() == pat('a &= x ^ y;')
    tu = ef(b, b.expr_assign_bitwise_xor(xa, x_bitwise_xor))
    assert tu.emit_to_string() == pat('a ^= x ^ y;')
    tu = ef(b, b.expr_assign_bitwise_or(xa, x_bitwise_xor))
    assert tu.emit_to_string() == pat('a |= x ^ y;')
    tu = ef(b, b.expr_comma(xa, x_bitwise_xor))
    assert tu.emit_to_string() == pat('a, x ^ y;')
    tu = ef(b, b.expr_conditional(xa, xb, x_bitwise_xor))
    assert tu.emit_to_string() == pat('a ? b : x ^ y;')

    tu = ef(b, b.expr_index(x_bitwise_or, xa))
    assert tu.emit_to_string() == pat('(x | y)[a];')
    tu = ef(b, b.expr_call(x_bitwise_or, [xa]))
    assert tu.emit_to_string() == pat('(x | y)(a);')
    tu = ef(b, b.expr_direct_member(x_bitwise_or, 'f'))
    assert tu.emit_to_string() == pat('(x | y).f;')
    tu = ef(b, b.expr_indirect_member(x_bitwise_or, 'g'))
    assert tu.emit_to_string() == pat('(x | y)->g;')
    tu = ef(b, b.expr_post_inc(x_bitwise_or))
    assert tu.emit_to_string() == pat('(x | y)++;')
    tu = ef(b, b.expr_post_dec(x_bitwise_or))
    assert tu.emit_to_string() == pat('(x | y)--;')
    tu = ef(b, b.expr_pre_inc(x_bitwise_or))
    assert tu.emit_to_string() == pat('++(x | y);')
    tu = ef(b, b.expr_pre_dec(x_bitwise_or))
    assert tu.emit_to_string() == pat('--(x | y);')
    tu = ef(b, b.expr_addressof(x_bitwise_or))
    assert tu.emit_to_string() == pat('&(x | y);')
    tu = ef(b, b.expr_deref(x_bitwise_or))
    assert tu.emit_to_string() == pat('*(x | y);')
    tu = ef(b, b.expr_unary_plus(x_bitwise_or))
    assert tu.emit_to_string() == pat('+(x | y);')
    tu = ef(b, b.expr_unary_minus(x_bitwise_or))
    assert tu.emit_to_string() == pat('-(x | y);')
    tu = ef(b, b.expr_bitwise_not(x_bitwise_or))
    assert tu.emit_to_string() == pat('~(x | y);')
    tu = ef(b, b.expr_logical_not(x_bitwise_or))
    assert tu.emit_to_string() == pat('!(x | y);')
    tu = ef(b, b.expr_sizeof_expr(x_bitwise_or))
    assert tu.emit_to_string() == pat('sizeof(x | y);')
    tu = ef(b, b.expr_cast(tv, x_bitwise_or))
    assert tu.emit_to_string() == pat('(V)(x | y);')
    tu = ef(b, b.expr_times(x_bitwise_or, xa))
    assert tu.emit_to_string() == pat('(x | y) * a;')
    tu = ef(b, b.expr_divide(x_bitwise_or, xa))
    assert tu.emit_to_string() == pat('(x | y) / a;')
    tu = ef(b, b.expr_modulus(x_bitwise_or, xa))
    assert tu.emit_to_string() == pat('(x | y) % a;')
    tu = ef(b, b.expr_plus(x_bitwise_or, xa))
    assert tu.emit_to_string() == pat('(x | y) + a;')
    tu = ef(b, b.expr_minus(x_bitwise_or, xa))
    assert tu.emit_to_string() == pat('(x | y) - a;')
    tu = ef(b, b.expr_lshift(x_bitwise_or, xa))
    assert tu.emit_to_string() == pat('(x | y) << a;')
    tu = ef(b, b.expr_rshift(x_bitwise_or, xa))
    assert tu.emit_to_string() == pat('(x | y) >> a;')
    tu = ef(b, b.expr_cmp_lt(x_bitwise_or, xa))
    assert tu.emit_to_string() == pat('(x | y) < a;')
    tu = ef(b, b.expr_cmp_gt(x_bitwise_or, xa))
    assert tu.emit_to_string() == pat('(x | y) > a;')
    tu = ef(b, b.expr_cmp_le(x_bitwise_or, xa))
    assert tu.emit_to_string() == pat('(x | y) <= a;')
    tu = ef(b, b.expr_cmp_ge(x_bitwise_or, xa))
    assert tu.emit_to_string() == pat('(x | y) >= a;')
    tu = ef(b, b.expr_cmp_eq(x_bitwise_or, xa))
    assert tu.emit_to_string() == pat('(x | y) == a;')
    tu = ef(b, b.expr_cmp_ne(x_bitwise_or, xa))
    assert tu.emit_to_string() == pat('(x | y) != a;')
    tu = ef(b, b.expr_bitwise_and(x_bitwise_or, xa))
    assert tu.emit_to_string() == pat('(x | y) & a;')
    tu = ef(b, b.expr_bitwise_xor(x_bitwise_or, xa))
    assert tu.emit_to_string() == pat('(x | y) ^ a;')
    tu = ef(b, b.expr_bitwise_or(x_bitwise_or, xa))
    assert tu.emit_to_string() == pat('x | y | a;')
    tu = ef(b, b.expr_logical_and(x_bitwise_or, xa))
    assert tu.emit_to_string() == pat('x | y && a;')
    tu = ef(b, b.expr_logical_or(x_bitwise_or, xa))
    assert tu.emit_to_string() == pat('x | y || a;')
    tu = ef(b, b.expr_conditional(x_bitwise_or, xa, xb))
    assert tu.emit_to_string() == pat('x | y ? a : b;')
    tu = ef(b, b.expr_assign(x_bitwise_or, xa))
    assert tu.emit_to_string() == pat('(x | y) = a;')
    tu = ef(b, b.expr_assign_times(x_bitwise_or, xa))
    assert tu.emit_to_string() == pat('(x | y) *= a;')
    tu = ef(b, b.expr_assign_divide(x_bitwise_or, xa))
    assert tu.emit_to_string() == pat('(x | y) /= a;')
    tu = ef(b, b.expr_assign_modulus(x_bitwise_or, xa))
    assert tu.emit_to_string() == pat('(x | y) %= a;')
    tu = ef(b, b.expr_assign_plus(x_bitwise_or, xa))
    assert tu.emit_to_string() == pat('(x | y) += a;')
    tu = ef(b, b.expr_assign_minus(x_bitwise_or, xa))
    assert tu.emit_to_string() == pat('(x | y) -= a;')
    tu = ef(b, b.expr_assign_lshift(x_bitwise_or, xa))
    assert tu.emit_to_string() == pat('(x | y) <<= a;')
    tu = ef(b, b.expr_assign_rshift(x_bitwise_or, xa))
    assert tu.emit_to_string() == pat('(x | y) >>= a;')
    tu = ef(b, b.expr_assign_bitwise_and(x_bitwise_or, xa))
    assert tu.emit_to_string() == pat('(x | y) &= a;')
    tu = ef(b, b.expr_assign_bitwise_xor(x_bitwise_or, xa))
    assert tu.emit_to_string() == pat('(x | y) ^= a;')
    tu = ef(b, b.expr_assign_bitwise_or(x_bitwise_or, xa))
    assert tu.emit_to_string() == pat('(x | y) |= a;')
    tu = ef(b, b.expr_comma(x_bitwise_or, xa))
    assert tu.emit_to_string() == pat('x | y, a;')
    tu = ef(b, b.expr_index(xa, x_bitwise_or))
    assert tu.emit_to_string() == pat('a[x | y];')
    tu = ef(b, b.expr_call(xa, [x_bitwise_or]))
    assert tu.emit_to_string() == pat('a(x | y);')
    tu = ef(b, b.expr_times(xa, x_bitwise_or))
    assert tu.emit_to_string() == pat('a * (x | y);')
    tu = ef(b, b.expr_divide(xa, x_bitwise_or))
    assert tu.emit_to_string() == pat('a / (x | y);')
    tu = ef(b, b.expr_modulus(xa, x_bitwise_or))
    assert tu.emit_to_string() == pat('a % (x | y);')
    tu = ef(b, b.expr_plus(xa, x_bitwise_or))
    assert tu.emit_to_string() == pat('a + (x | y);')
    tu = ef(b, b.expr_minus(xa, x_bitwise_or))
    assert tu.emit_to_string() == pat('a - (x | y);')
    tu = ef(b, b.expr_lshift(xa, x_bitwise_or))
    assert tu.emit_to_string() == pat('a << (x | y);')
    tu = ef(b, b.expr_rshift(xa, x_bitwise_or))
    assert tu.emit_to_string() == pat('a >> (x | y);')
    tu = ef(b, b.expr_cmp_lt(xa, x_bitwise_or))
    assert tu.emit_to_string() == pat('a < (x | y);')
    tu = ef(b, b.expr_cmp_gt(xa, x_bitwise_or))
    assert tu.emit_to_string() == pat('a > (x | y);')
    tu = ef(b, b.expr_cmp_le(xa, x_bitwise_or))
    assert tu.emit_to_string() == pat('a <= (x | y);')
    tu = ef(b, b.expr_cmp_ge(xa, x_bitwise_or))
    assert tu.emit_to_string() == pat('a >= (x | y);')
    tu = ef(b, b.expr_cmp_eq(xa, x_bitwise_or))
    assert tu.emit_to_string() == pat('a == (x | y);')
    tu = ef(b, b.expr_cmp_ne(xa, x_bitwise_or))
    assert tu.emit_to_string() == pat('a != (x | y);')
    tu = ef(b, b.expr_bitwise_and(xa, x_bitwise_or))
    assert tu.emit_to_string() == pat('a & (x | y);')
    tu = ef(b, b.expr_bitwise_xor(xa, x_bitwise_or))
    assert tu.emit_to_string() == pat('a ^ (x | y);')
    tu = ef(b, b.expr_bitwise_or(xa, x_bitwise_or))
    assert tu.emit_to_string() == pat('a | (x | y);')
    tu = ef(b, b.expr_logical_and(xa, x_bitwise_or))
    assert tu.emit_to_string() == pat('a && x | y;')
    tu = ef(b, b.expr_logical_or(xa, x_bitwise_or))
    assert tu.emit_to_string() == pat('a || x | y;')
    tu = ef(b, b.expr_conditional(xa, x_bitwise_or, xb))
    assert tu.emit_to_string() == pat('a ? x | y : b;')
    tu = ef(b, b.expr_assign(xa, x_bitwise_or))
    assert tu.emit_to_string() == pat('a = x | y;')
    tu = ef(b, b.expr_assign_times(xa, x_bitwise_or))
    assert tu.emit_to_string() == pat('a *= x | y;')
    tu = ef(b, b.expr_assign_divide(xa, x_bitwise_or))
    assert tu.emit_to_string() == pat('a /= x | y;')
    tu = ef(b, b.expr_assign_modulus(xa, x_bitwise_or))
    assert tu.emit_to_string() == pat('a %= x | y;')
    tu = ef(b, b.expr_assign_plus(xa, x_bitwise_or))
    assert tu.emit_to_string() == pat('a += x | y;')
    tu = ef(b, b.expr_assign_minus(xa, x_bitwise_or))
    assert tu.emit_to_string() == pat('a -= x | y;')
    tu = ef(b, b.expr_assign_lshift(xa, x_bitwise_or))
    assert tu.emit_to_string() == pat('a <<= x | y;')
    tu = ef(b, b.expr_assign_rshift(xa, x_bitwise_or))
    assert tu.emit_to_string() == pat('a >>= x | y;')
    tu = ef(b, b.expr_assign_bitwise_and(xa, x_bitwise_or))
    assert tu.emit_to_string() == pat('a &= x | y;')
    tu = ef(b, b.expr_assign_bitwise_xor(xa, x_bitwise_or))
    assert tu.emit_to_string() == pat('a ^= x | y;')
    tu = ef(b, b.expr_assign_bitwise_or(xa, x_bitwise_or))
    assert tu.emit_to_string() == pat('a |= x | y;')
    tu = ef(b, b.expr_comma(xa, x_bitwise_or))
    assert tu.emit_to_string() == pat('a, x | y;')
    tu = ef(b, b.expr_conditional(xa, xb, x_bitwise_or))
    assert tu.emit_to_string() == pat('a ? b : x | y;')

    tu = ef(b, b.expr_index(x_logical_and, xa))
    assert tu.emit_to_string() == pat('(x && y)[a];')
    tu = ef(b, b.expr_call(x_logical_and, [xa]))
    assert tu.emit_to_string() == pat('(x && y)(a);')
    tu = ef(b, b.expr_direct_member(x_logical_and, 'f'))
    assert tu.emit_to_string() == pat('(x && y).f;')
    tu = ef(b, b.expr_indirect_member(x_logical_and, 'g'))
    assert tu.emit_to_string() == pat('(x && y)->g;')
    tu = ef(b, b.expr_post_inc(x_logical_and))
    assert tu.emit_to_string() == pat('(x && y)++;')
    tu = ef(b, b.expr_post_dec(x_logical_and))
    assert tu.emit_to_string() == pat('(x && y)--;')
    tu = ef(b, b.expr_pre_inc(x_logical_and))
    assert tu.emit_to_string() == pat('++(x && y);')
    tu = ef(b, b.expr_pre_dec(x_logical_and))
    assert tu.emit_to_string() == pat('--(x && y);')
    tu = ef(b, b.expr_addressof(x_logical_and))
    assert tu.emit_to_string() == pat('&(x && y);')
    tu = ef(b, b.expr_deref(x_logical_and))
    assert tu.emit_to_string() == pat('*(x && y);')
    tu = ef(b, b.expr_unary_plus(x_logical_and))
    assert tu.emit_to_string() == pat('+(x && y);')
    tu = ef(b, b.expr_unary_minus(x_logical_and))
    assert tu.emit_to_string() == pat('-(x && y);')
    tu = ef(b, b.expr_bitwise_not(x_logical_and))
    assert tu.emit_to_string() == pat('~(x && y);')
    tu = ef(b, b.expr_logical_not(x_logical_and))
    assert tu.emit_to_string() == pat('!(x && y);')
    tu = ef(b, b.expr_sizeof_expr(x_logical_and))
    assert tu.emit_to_string() == pat('sizeof(x && y);')
    tu = ef(b, b.expr_cast(tv, x_logical_and))
    assert tu.emit_to_string() == pat('(V)(x && y);')
    tu = ef(b, b.expr_times(x_logical_and, xa))
    assert tu.emit_to_string() == pat('(x && y) * a;')
    tu = ef(b, b.expr_divide(x_logical_and, xa))
    assert tu.emit_to_string() == pat('(x && y) / a;')
    tu = ef(b, b.expr_modulus(x_logical_and, xa))
    assert tu.emit_to_string() == pat('(x && y) % a;')
    tu = ef(b, b.expr_plus(x_logical_and, xa))
    assert tu.emit_to_string() == pat('(x && y) + a;')
    tu = ef(b, b.expr_minus(x_logical_and, xa))
    assert tu.emit_to_string() == pat('(x && y) - a;')
    tu = ef(b, b.expr_lshift(x_logical_and, xa))
    assert tu.emit_to_string() == pat('(x && y) << a;')
    tu = ef(b, b.expr_rshift(x_logical_and, xa))
    assert tu.emit_to_string() == pat('(x && y) >> a;')
    tu = ef(b, b.expr_cmp_lt(x_logical_and, xa))
    assert tu.emit_to_string() == pat('(x && y) < a;')
    tu = ef(b, b.expr_cmp_gt(x_logical_and, xa))
    assert tu.emit_to_string() == pat('(x && y) > a;')
    tu = ef(b, b.expr_cmp_le(x_logical_and, xa))
    assert tu.emit_to_string() == pat('(x && y) <= a;')
    tu = ef(b, b.expr_cmp_ge(x_logical_and, xa))
    assert tu.emit_to_string() == pat('(x && y) >= a;')
    tu = ef(b, b.expr_cmp_eq(x_logical_and, xa))
    assert tu.emit_to_string() == pat('(x && y) == a;')
    tu = ef(b, b.expr_cmp_ne(x_logical_and, xa))
    assert tu.emit_to_string() == pat('(x && y) != a;')
    tu = ef(b, b.expr_bitwise_and(x_logical_and, xa))
    assert tu.emit_to_string() == pat('(x && y) & a;')
    tu = ef(b, b.expr_bitwise_xor(x_logical_and, xa))
    assert tu.emit_to_string() == pat('(x && y) ^ a;')
    tu = ef(b, b.expr_bitwise_or(x_logical_and, xa))
    assert tu.emit_to_string() == pat('(x && y) | a;')
    tu = ef(b, b.expr_logical_and(x_logical_and, xa))
    assert tu.emit_to_string() == pat('x && y && a;')
    tu = ef(b, b.expr_logical_or(x_logical_and, xa))
    assert tu.emit_to_string() == pat('x && y || a;')
    tu = ef(b, b.expr_conditional(x_logical_and, xa, xb))
    assert tu.emit_to_string() == pat('x && y ? a : b;')
    tu = ef(b, b.expr_assign(x_logical_and, xa))
    assert tu.emit_to_string() == pat('(x && y) = a;')
    tu = ef(b, b.expr_assign_times(x_logical_and, xa))
    assert tu.emit_to_string() == pat('(x && y) *= a;')
    tu = ef(b, b.expr_assign_divide(x_logical_and, xa))
    assert tu.emit_to_string() == pat('(x && y) /= a;')
    tu = ef(b, b.expr_assign_modulus(x_logical_and, xa))
    assert tu.emit_to_string() == pat('(x && y) %= a;')
    tu = ef(b, b.expr_assign_plus(x_logical_and, xa))
    assert tu.emit_to_string() == pat('(x && y) += a;')
    tu = ef(b, b.expr_assign_minus(x_logical_and, xa))
    assert tu.emit_to_string() == pat('(x && y) -= a;')
    tu = ef(b, b.expr_assign_lshift(x_logical_and, xa))
    assert tu.emit_to_string() == pat('(x && y) <<= a;')
    tu = ef(b, b.expr_assign_rshift(x_logical_and, xa))
    assert tu.emit_to_string() == pat('(x && y) >>= a;')
    tu = ef(b, b.expr_assign_bitwise_and(x_logical_and, xa))
    assert tu.emit_to_string() == pat('(x && y) &= a;')
    tu = ef(b, b.expr_assign_bitwise_xor(x_logical_and, xa))
    assert tu.emit_to_string() == pat('(x && y) ^= a;')
    tu = ef(b, b.expr_assign_bitwise_or(x_logical_and, xa))
    assert tu.emit_to_string() == pat('(x && y) |= a;')
    tu = ef(b, b.expr_comma(x_logical_and, xa))
    assert tu.emit_to_string() == pat('x && y, a;')
    tu = ef(b, b.expr_index(xa, x_logical_and))
    assert tu.emit_to_string() == pat('a[x && y];')
    tu = ef(b, b.expr_call(xa, [x_logical_and]))
    assert tu.emit_to_string() == pat('a(x && y);')
    tu = ef(b, b.expr_times(xa, x_logical_and))
    assert tu.emit_to_string() == pat('a * (x && y);')
    tu = ef(b, b.expr_divide(xa, x_logical_and))
    assert tu.emit_to_string() == pat('a / (x && y);')
    tu = ef(b, b.expr_modulus(xa, x_logical_and))
    assert tu.emit_to_string() == pat('a % (x && y);')
    tu = ef(b, b.expr_plus(xa, x_logical_and))
    assert tu.emit_to_string() == pat('a + (x && y);')
    tu = ef(b, b.expr_minus(xa, x_logical_and))
    assert tu.emit_to_string() == pat('a - (x && y);')
    tu = ef(b, b.expr_lshift(xa, x_logical_and))
    assert tu.emit_to_string() == pat('a << (x && y);')
    tu = ef(b, b.expr_rshift(xa, x_logical_and))
    assert tu.emit_to_string() == pat('a >> (x && y);')
    tu = ef(b, b.expr_cmp_lt(xa, x_logical_and))
    assert tu.emit_to_string() == pat('a < (x && y);')
    tu = ef(b, b.expr_cmp_gt(xa, x_logical_and))
    assert tu.emit_to_string() == pat('a > (x && y);')
    tu = ef(b, b.expr_cmp_le(xa, x_logical_and))
    assert tu.emit_to_string() == pat('a <= (x && y);')
    tu = ef(b, b.expr_cmp_ge(xa, x_logical_and))
    assert tu.emit_to_string() == pat('a >= (x && y);')
    tu = ef(b, b.expr_cmp_eq(xa, x_logical_and))
    assert tu.emit_to_string() == pat('a == (x && y);')
    tu = ef(b, b.expr_cmp_ne(xa, x_logical_and))
    assert tu.emit_to_string() == pat('a != (x && y);')
    tu = ef(b, b.expr_bitwise_and(xa, x_logical_and))
    assert tu.emit_to_string() == pat('a & (x && y);')
    tu = ef(b, b.expr_bitwise_xor(xa, x_logical_and))
    assert tu.emit_to_string() == pat('a ^ (x && y);')
    tu = ef(b, b.expr_bitwise_or(xa, x_logical_and))
    assert tu.emit_to_string() == pat('a | (x && y);')
    tu = ef(b, b.expr_logical_and(xa, x_logical_and))
    assert tu.emit_to_string() == pat('a && (x && y);')
    tu = ef(b, b.expr_logical_or(xa, x_logical_and))
    assert tu.emit_to_string() == pat('a || x && y;')
    tu = ef(b, b.expr_conditional(xa, x_logical_and, xb))
    assert tu.emit_to_string() == pat('a ? x && y : b;')
    tu = ef(b, b.expr_assign(xa, x_logical_and))
    assert tu.emit_to_string() == pat('a = x && y;')
    tu = ef(b, b.expr_assign_times(xa, x_logical_and))
    assert tu.emit_to_string() == pat('a *= x && y;')
    tu = ef(b, b.expr_assign_divide(xa, x_logical_and))
    assert tu.emit_to_string() == pat('a /= x && y;')
    tu = ef(b, b.expr_assign_modulus(xa, x_logical_and))
    assert tu.emit_to_string() == pat('a %= x && y;')
    tu = ef(b, b.expr_assign_plus(xa, x_logical_and))
    assert tu.emit_to_string() == pat('a += x && y;')
    tu = ef(b, b.expr_assign_minus(xa, x_logical_and))
    assert tu.emit_to_string() == pat('a -= x && y;')
    tu = ef(b, b.expr_assign_lshift(xa, x_logical_and))
    assert tu.emit_to_string() == pat('a <<= x && y;')
    tu = ef(b, b.expr_assign_rshift(xa, x_logical_and))
    assert tu.emit_to_string() == pat('a >>= x && y;')
    tu = ef(b, b.expr_assign_bitwise_and(xa, x_logical_and))
    assert tu.emit_to_string() == pat('a &= x && y;')
    tu = ef(b, b.expr_assign_bitwise_xor(xa, x_logical_and))
    assert tu.emit_to_string() == pat('a ^= x && y;')
    tu = ef(b, b.expr_assign_bitwise_or(xa, x_logical_and))
    assert tu.emit_to_string() == pat('a |= x && y;')
    tu = ef(b, b.expr_comma(xa, x_logical_and))
    assert tu.emit_to_string() == pat('a, x && y;')
    tu = ef(b, b.expr_conditional(xa, xb, x_logical_and))
    assert tu.emit_to_string() == pat('a ? b : x && y;')

    tu = ef(b, b.expr_index(x_logical_or, xa))
    assert tu.emit_to_string() == pat('(x || y)[a];')
    tu = ef(b, b.expr_call(x_logical_or, [xa]))
    assert tu.emit_to_string() == pat('(x || y)(a);')
    tu = ef(b, b.expr_direct_member(x_logical_or, 'f'))
    assert tu.emit_to_string() == pat('(x || y).f;')
    tu = ef(b, b.expr_indirect_member(x_logical_or, 'g'))
    assert tu.emit_to_string() == pat('(x || y)->g;')
    tu = ef(b, b.expr_post_inc(x_logical_or))
    assert tu.emit_to_string() == pat('(x || y)++;')
    tu = ef(b, b.expr_post_dec(x_logical_or))
    assert tu.emit_to_string() == pat('(x || y)--;')
    tu = ef(b, b.expr_pre_inc(x_logical_or))
    assert tu.emit_to_string() == pat('++(x || y);')
    tu = ef(b, b.expr_pre_dec(x_logical_or))
    assert tu.emit_to_string() == pat('--(x || y);')
    tu = ef(b, b.expr_addressof(x_logical_or))
    assert tu.emit_to_string() == pat('&(x || y);')
    tu = ef(b, b.expr_deref(x_logical_or))
    assert tu.emit_to_string() == pat('*(x || y);')
    tu = ef(b, b.expr_unary_plus(x_logical_or))
    assert tu.emit_to_string() == pat('+(x || y);')
    tu = ef(b, b.expr_unary_minus(x_logical_or))
    assert tu.emit_to_string() == pat('-(x || y);')
    tu = ef(b, b.expr_bitwise_not(x_logical_or))
    assert tu.emit_to_string() == pat('~(x || y);')
    tu = ef(b, b.expr_logical_not(x_logical_or))
    assert tu.emit_to_string() == pat('!(x || y);')
    tu = ef(b, b.expr_sizeof_expr(x_logical_or))
    assert tu.emit_to_string() == pat('sizeof(x || y);')
    tu = ef(b, b.expr_cast(tv, x_logical_or))
    assert tu.emit_to_string() == pat('(V)(x || y);')
    tu = ef(b, b.expr_times(x_logical_or, xa))
    assert tu.emit_to_string() == pat('(x || y) * a;')
    tu = ef(b, b.expr_divide(x_logical_or, xa))
    assert tu.emit_to_string() == pat('(x || y) / a;')
    tu = ef(b, b.expr_modulus(x_logical_or, xa))
    assert tu.emit_to_string() == pat('(x || y) % a;')
    tu = ef(b, b.expr_plus(x_logical_or, xa))
    assert tu.emit_to_string() == pat('(x || y) + a;')
    tu = ef(b, b.expr_minus(x_logical_or, xa))
    assert tu.emit_to_string() == pat('(x || y) - a;')
    tu = ef(b, b.expr_lshift(x_logical_or, xa))
    assert tu.emit_to_string() == pat('(x || y) << a;')
    tu = ef(b, b.expr_rshift(x_logical_or, xa))
    assert tu.emit_to_string() == pat('(x || y) >> a;')
    tu = ef(b, b.expr_cmp_lt(x_logical_or, xa))
    assert tu.emit_to_string() == pat('(x || y) < a;')
    tu = ef(b, b.expr_cmp_gt(x_logical_or, xa))
    assert tu.emit_to_string() == pat('(x || y) > a;')
    tu = ef(b, b.expr_cmp_le(x_logical_or, xa))
    assert tu.emit_to_string() == pat('(x || y) <= a;')
    tu = ef(b, b.expr_cmp_ge(x_logical_or, xa))
    assert tu.emit_to_string() == pat('(x || y) >= a;')
    tu = ef(b, b.expr_cmp_eq(x_logical_or, xa))
    assert tu.emit_to_string() == pat('(x || y) == a;')
    tu = ef(b, b.expr_cmp_ne(x_logical_or, xa))
    assert tu.emit_to_string() == pat('(x || y) != a;')
    tu = ef(b, b.expr_bitwise_and(x_logical_or, xa))
    assert tu.emit_to_string() == pat('(x || y) & a;')
    tu = ef(b, b.expr_bitwise_xor(x_logical_or, xa))
    assert tu.emit_to_string() == pat('(x || y) ^ a;')
    tu = ef(b, b.expr_bitwise_or(x_logical_or, xa))
    assert tu.emit_to_string() == pat('(x || y) | a;')
    tu = ef(b, b.expr_logical_and(x_logical_or, xa))
    assert tu.emit_to_string() == pat('(x || y) && a;')
    tu = ef(b, b.expr_logical_or(x_logical_or, xa))
    assert tu.emit_to_string() == pat('x || y || a;')
    tu = ef(b, b.expr_conditional(x_logical_or, xa, xb))
    assert tu.emit_to_string() == pat('x || y ? a : b;')
    tu = ef(b, b.expr_assign(x_logical_or, xa))
    assert tu.emit_to_string() == pat('(x || y) = a;')
    tu = ef(b, b.expr_assign_times(x_logical_or, xa))
    assert tu.emit_to_string() == pat('(x || y) *= a;')
    tu = ef(b, b.expr_assign_divide(x_logical_or, xa))
    assert tu.emit_to_string() == pat('(x || y) /= a;')
    tu = ef(b, b.expr_assign_modulus(x_logical_or, xa))
    assert tu.emit_to_string() == pat('(x || y) %= a;')
    tu = ef(b, b.expr_assign_plus(x_logical_or, xa))
    assert tu.emit_to_string() == pat('(x || y) += a;')
    tu = ef(b, b.expr_assign_minus(x_logical_or, xa))
    assert tu.emit_to_string() == pat('(x || y) -= a;')
    tu = ef(b, b.expr_assign_lshift(x_logical_or, xa))
    assert tu.emit_to_string() == pat('(x || y) <<= a;')
    tu = ef(b, b.expr_assign_rshift(x_logical_or, xa))
    assert tu.emit_to_string() == pat('(x || y) >>= a;')
    tu = ef(b, b.expr_assign_bitwise_and(x_logical_or, xa))
    assert tu.emit_to_string() == pat('(x || y) &= a;')
    tu = ef(b, b.expr_assign_bitwise_xor(x_logical_or, xa))
    assert tu.emit_to_string() == pat('(x || y) ^= a;')
    tu = ef(b, b.expr_assign_bitwise_or(x_logical_or, xa))
    assert tu.emit_to_string() == pat('(x || y) |= a;')
    tu = ef(b, b.expr_comma(x_logical_or, xa))
    assert tu.emit_to_string() == pat('x || y, a;')
    tu = ef(b, b.expr_index(xa, x_logical_or))
    assert tu.emit_to_string() == pat('a[x || y];')
    tu = ef(b, b.expr_call(xa, [x_logical_or]))
    assert tu.emit_to_string() == pat('a(x || y);')
    tu = ef(b, b.expr_times(xa, x_logical_or))
    assert tu.emit_to_string() == pat('a * (x || y);')
    tu = ef(b, b.expr_divide(xa, x_logical_or))
    assert tu.emit_to_string() == pat('a / (x || y);')
    tu = ef(b, b.expr_modulus(xa, x_logical_or))
    assert tu.emit_to_string() == pat('a % (x || y);')
    tu = ef(b, b.expr_plus(xa, x_logical_or))
    assert tu.emit_to_string() == pat('a + (x || y);')
    tu = ef(b, b.expr_minus(xa, x_logical_or))
    assert tu.emit_to_string() == pat('a - (x || y);')
    tu = ef(b, b.expr_lshift(xa, x_logical_or))
    assert tu.emit_to_string() == pat('a << (x || y);')
    tu = ef(b, b.expr_rshift(xa, x_logical_or))
    assert tu.emit_to_string() == pat('a >> (x || y);')
    tu = ef(b, b.expr_cmp_lt(xa, x_logical_or))
    assert tu.emit_to_string() == pat('a < (x || y);')
    tu = ef(b, b.expr_cmp_gt(xa, x_logical_or))
    assert tu.emit_to_string() == pat('a > (x || y);')
    tu = ef(b, b.expr_cmp_le(xa, x_logical_or))
    assert tu.emit_to_string() == pat('a <= (x || y);')
    tu = ef(b, b.expr_cmp_ge(xa, x_logical_or))
    assert tu.emit_to_string() == pat('a >= (x || y);')
    tu = ef(b, b.expr_cmp_eq(xa, x_logical_or))
    assert tu.emit_to_string() == pat('a == (x || y);')
    tu = ef(b, b.expr_cmp_ne(xa, x_logical_or))
    assert tu.emit_to_string() == pat('a != (x || y);')
    tu = ef(b, b.expr_bitwise_and(xa, x_logical_or))
    assert tu.emit_to_string() == pat('a & (x || y);')
    tu = ef(b, b.expr_bitwise_xor(xa, x_logical_or))
    assert tu.emit_to_string() == pat('a ^ (x || y);')
    tu = ef(b, b.expr_bitwise_or(xa, x_logical_or))
    assert tu.emit_to_string() == pat('a | (x || y);')
    tu = ef(b, b.expr_logical_and(xa, x_logical_or))
    assert tu.emit_to_string() == pat('a && (x || y);')
    tu = ef(b, b.expr_logical_or(xa, x_logical_or))
    assert tu.emit_to_string() == pat('a || (x || y);')
    tu = ef(b, b.expr_conditional(xa, x_logical_or, xb))
    assert tu.emit_to_string() == pat('a ? x || y : b;')
    tu = ef(b, b.expr_assign(xa, x_logical_or))
    assert tu.emit_to_string() == pat('a = x || y;')
    tu = ef(b, b.expr_assign_times(xa, x_logical_or))
    assert tu.emit_to_string() == pat('a *= x || y;')
    tu = ef(b, b.expr_assign_divide(xa, x_logical_or))
    assert tu.emit_to_string() == pat('a /= x || y;')
    tu = ef(b, b.expr_assign_modulus(xa, x_logical_or))
    assert tu.emit_to_string() == pat('a %= x || y;')
    tu = ef(b, b.expr_assign_plus(xa, x_logical_or))
    assert tu.emit_to_string() == pat('a += x || y;')
    tu = ef(b, b.expr_assign_minus(xa, x_logical_or))
    assert tu.emit_to_string() == pat('a -= x || y;')
    tu = ef(b, b.expr_assign_lshift(xa, x_logical_or))
    assert tu.emit_to_string() == pat('a <<= x || y;')
    tu = ef(b, b.expr_assign_rshift(xa, x_logical_or))
    assert tu.emit_to_string() == pat('a >>= x || y;')
    tu = ef(b, b.expr_assign_bitwise_and(xa, x_logical_or))
    assert tu.emit_to_string() == pat('a &= x || y;')
    tu = ef(b, b.expr_assign_bitwise_xor(xa, x_logical_or))
    assert tu.emit_to_string() == pat('a ^= x || y;')
    tu = ef(b, b.expr_assign_bitwise_or(xa, x_logical_or))
    assert tu.emit_to_string() == pat('a |= x || y;')
    tu = ef(b, b.expr_comma(xa, x_logical_or))
    assert tu.emit_to_string() == pat('a, x || y;')
    tu = ef(b, b.expr_conditional(xa, xb, x_logical_or))
    assert tu.emit_to_string() == pat('a ? b : x || y;')

    tu = ef(b, b.expr_index(x_conditional, xa))
    assert tu.emit_to_string() == pat('(x ? y : z)[a];')
    tu = ef(b, b.expr_call(x_conditional, [xa]))
    assert tu.emit_to_string() == pat('(x ? y : z)(a);')
    tu = ef(b, b.expr_direct_member(x_conditional, 'f'))
    assert tu.emit_to_string() == pat('(x ? y : z).f;')
    tu = ef(b, b.expr_indirect_member(x_conditional, 'g'))
    assert tu.emit_to_string() == pat('(x ? y : z)->g;')
    tu = ef(b, b.expr_post_inc(x_conditional))
    assert tu.emit_to_string() == pat('(x ? y : z)++;')
    tu = ef(b, b.expr_post_dec(x_conditional))
    assert tu.emit_to_string() == pat('(x ? y : z)--;')
    tu = ef(b, b.expr_pre_inc(x_conditional))
    assert tu.emit_to_string() == pat('++(x ? y : z);')
    tu = ef(b, b.expr_pre_dec(x_conditional))
    assert tu.emit_to_string() == pat('--(x ? y : z);')
    tu = ef(b, b.expr_addressof(x_conditional))
    assert tu.emit_to_string() == pat('&(x ? y : z);')
    tu = ef(b, b.expr_deref(x_conditional))
    assert tu.emit_to_string() == pat('*(x ? y : z);')
    tu = ef(b, b.expr_unary_plus(x_conditional))
    assert tu.emit_to_string() == pat('+(x ? y : z);')
    tu = ef(b, b.expr_unary_minus(x_conditional))
    assert tu.emit_to_string() == pat('-(x ? y : z);')
    tu = ef(b, b.expr_bitwise_not(x_conditional))
    assert tu.emit_to_string() == pat('~(x ? y : z);')
    tu = ef(b, b.expr_logical_not(x_conditional))
    assert tu.emit_to_string() == pat('!(x ? y : z);')
    tu = ef(b, b.expr_sizeof_expr(x_conditional))
    assert tu.emit_to_string() == pat('sizeof(x ? y : z);')
    tu = ef(b, b.expr_cast(tv, x_conditional))
    assert tu.emit_to_string() == pat('(V)(x ? y : z);')
    tu = ef(b, b.expr_times(x_conditional, xa))
    assert tu.emit_to_string() == pat('(x ? y : z) * a;')
    tu = ef(b, b.expr_divide(x_conditional, xa))
    assert tu.emit_to_string() == pat('(x ? y : z) / a;')
    tu = ef(b, b.expr_modulus(x_conditional, xa))
    assert tu.emit_to_string() == pat('(x ? y : z) % a;')
    tu = ef(b, b.expr_plus(x_conditional, xa))
    assert tu.emit_to_string() == pat('(x ? y : z) + a;')
    tu = ef(b, b.expr_minus(x_conditional, xa))
    assert tu.emit_to_string() == pat('(x ? y : z) - a;')
    tu = ef(b, b.expr_lshift(x_conditional, xa))
    assert tu.emit_to_string() == pat('(x ? y : z) << a;')
    tu = ef(b, b.expr_rshift(x_conditional, xa))
    assert tu.emit_to_string() == pat('(x ? y : z) >> a;')
    tu = ef(b, b.expr_cmp_lt(x_conditional, xa))
    assert tu.emit_to_string() == pat('(x ? y : z) < a;')
    tu = ef(b, b.expr_cmp_gt(x_conditional, xa))
    assert tu.emit_to_string() == pat('(x ? y : z) > a;')
    tu = ef(b, b.expr_cmp_le(x_conditional, xa))
    assert tu.emit_to_string() == pat('(x ? y : z) <= a;')
    tu = ef(b, b.expr_cmp_ge(x_conditional, xa))
    assert tu.emit_to_string() == pat('(x ? y : z) >= a;')
    tu = ef(b, b.expr_cmp_eq(x_conditional, xa))
    assert tu.emit_to_string() == pat('(x ? y : z) == a;')
    tu = ef(b, b.expr_cmp_ne(x_conditional, xa))
    assert tu.emit_to_string() == pat('(x ? y : z) != a;')
    tu = ef(b, b.expr_bitwise_and(x_conditional, xa))
    assert tu.emit_to_string() == pat('(x ? y : z) & a;')
    tu = ef(b, b.expr_bitwise_xor(x_conditional, xa))
    assert tu.emit_to_string() == pat('(x ? y : z) ^ a;')
    tu = ef(b, b.expr_bitwise_or(x_conditional, xa))
    assert tu.emit_to_string() == pat('(x ? y : z) | a;')
    tu = ef(b, b.expr_logical_and(x_conditional, xa))
    assert tu.emit_to_string() == pat('(x ? y : z) && a;')
    tu = ef(b, b.expr_logical_or(x_conditional, xa))
    assert tu.emit_to_string() == pat('(x ? y : z) || a;')
    tu = ef(b, b.expr_conditional(x_conditional, xa, xb))
    assert tu.emit_to_string() == pat('(x ? y : z) ? a : b;')
    tu = ef(b, b.expr_assign(x_conditional, xa))
    assert tu.emit_to_string() == pat('(x ? y : z) = a;')
    tu = ef(b, b.expr_assign_times(x_conditional, xa))
    assert tu.emit_to_string() == pat('(x ? y : z) *= a;')
    tu = ef(b, b.expr_assign_divide(x_conditional, xa))
    assert tu.emit_to_string() == pat('(x ? y : z) /= a;')
    tu = ef(b, b.expr_assign_modulus(x_conditional, xa))
    assert tu.emit_to_string() == pat('(x ? y : z) %= a;')
    tu = ef(b, b.expr_assign_plus(x_conditional, xa))
    assert tu.emit_to_string() == pat('(x ? y : z) += a;')
    tu = ef(b, b.expr_assign_minus(x_conditional, xa))
    assert tu.emit_to_string() == pat('(x ? y : z) -= a;')
    tu = ef(b, b.expr_assign_lshift(x_conditional, xa))
    assert tu.emit_to_string() == pat('(x ? y : z) <<= a;')
    tu = ef(b, b.expr_assign_rshift(x_conditional, xa))
    assert tu.emit_to_string() == pat('(x ? y : z) >>= a;')
    tu = ef(b, b.expr_assign_bitwise_and(x_conditional, xa))
    assert tu.emit_to_string() == pat('(x ? y : z) &= a;')
    tu = ef(b, b.expr_assign_bitwise_xor(x_conditional, xa))
    assert tu.emit_to_string() == pat('(x ? y : z) ^= a;')
    tu = ef(b, b.expr_assign_bitwise_or(x_conditional, xa))
    assert tu.emit_to_string() == pat('(x ? y : z) |= a;')
    tu = ef(b, b.expr_comma(x_conditional, xa))
    assert tu.emit_to_string() == pat('x ? y : z, a;')
    tu = ef(b, b.expr_index(xa, x_conditional))
    assert tu.emit_to_string() == pat('a[x ? y : z];')
    tu = ef(b, b.expr_call(xa, [x_conditional]))
    assert tu.emit_to_string() == pat('a(x ? y : z);')
    tu = ef(b, b.expr_times(xa, x_conditional))
    assert tu.emit_to_string() == pat('a * (x ? y : z);')
    tu = ef(b, b.expr_divide(xa, x_conditional))
    assert tu.emit_to_string() == pat('a / (x ? y : z);')
    tu = ef(b, b.expr_modulus(xa, x_conditional))
    assert tu.emit_to_string() == pat('a % (x ? y : z);')
    tu = ef(b, b.expr_plus(xa, x_conditional))
    assert tu.emit_to_string() == pat('a + (x ? y : z);')
    tu = ef(b, b.expr_minus(xa, x_conditional))
    assert tu.emit_to_string() == pat('a - (x ? y : z);')
    tu = ef(b, b.expr_lshift(xa, x_conditional))
    assert tu.emit_to_string() == pat('a << (x ? y : z);')
    tu = ef(b, b.expr_rshift(xa, x_conditional))
    assert tu.emit_to_string() == pat('a >> (x ? y : z);')
    tu = ef(b, b.expr_cmp_lt(xa, x_conditional))
    assert tu.emit_to_string() == pat('a < (x ? y : z);')
    tu = ef(b, b.expr_cmp_gt(xa, x_conditional))
    assert tu.emit_to_string() == pat('a > (x ? y : z);')
    tu = ef(b, b.expr_cmp_le(xa, x_conditional))
    assert tu.emit_to_string() == pat('a <= (x ? y : z);')
    tu = ef(b, b.expr_cmp_ge(xa, x_conditional))
    assert tu.emit_to_string() == pat('a >= (x ? y : z);')
    tu = ef(b, b.expr_cmp_eq(xa, x_conditional))
    assert tu.emit_to_string() == pat('a == (x ? y : z);')
    tu = ef(b, b.expr_cmp_ne(xa, x_conditional))
    assert tu.emit_to_string() == pat('a != (x ? y : z);')
    tu = ef(b, b.expr_bitwise_and(xa, x_conditional))
    assert tu.emit_to_string() == pat('a & (x ? y : z);')
    tu = ef(b, b.expr_bitwise_xor(xa, x_conditional))
    assert tu.emit_to_string() == pat('a ^ (x ? y : z);')
    tu = ef(b, b.expr_bitwise_or(xa, x_conditional))
    assert tu.emit_to_string() == pat('a | (x ? y : z);')
    tu = ef(b, b.expr_logical_and(xa, x_conditional))
    assert tu.emit_to_string() == pat('a && (x ? y : z);')
    tu = ef(b, b.expr_logical_or(xa, x_conditional))
    assert tu.emit_to_string() == pat('a || (x ? y : z);')
    tu = ef(b, b.expr_conditional(xa, x_conditional, xb))
    assert tu.emit_to_string() == pat('a ? x ? y : z : b;')
    tu = ef(b, b.expr_assign(xa, x_conditional))
    assert tu.emit_to_string() == pat('a = x ? y : z;')
    tu = ef(b, b.expr_assign_times(xa, x_conditional))
    assert tu.emit_to_string() == pat('a *= x ? y : z;')
    tu = ef(b, b.expr_assign_divide(xa, x_conditional))
    assert tu.emit_to_string() == pat('a /= x ? y : z;')
    tu = ef(b, b.expr_assign_modulus(xa, x_conditional))
    assert tu.emit_to_string() == pat('a %= x ? y : z;')
    tu = ef(b, b.expr_assign_plus(xa, x_conditional))
    assert tu.emit_to_string() == pat('a += x ? y : z;')
    tu = ef(b, b.expr_assign_minus(xa, x_conditional))
    assert tu.emit_to_string() == pat('a -= x ? y : z;')
    tu = ef(b, b.expr_assign_lshift(xa, x_conditional))
    assert tu.emit_to_string() == pat('a <<= x ? y : z;')
    tu = ef(b, b.expr_assign_rshift(xa, x_conditional))
    assert tu.emit_to_string() == pat('a >>= x ? y : z;')
    tu = ef(b, b.expr_assign_bitwise_and(xa, x_conditional))
    assert tu.emit_to_string() == pat('a &= x ? y : z;')
    tu = ef(b, b.expr_assign_bitwise_xor(xa, x_conditional))
    assert tu.emit_to_string() == pat('a ^= x ? y : z;')
    tu = ef(b, b.expr_assign_bitwise_or(xa, x_conditional))
    assert tu.emit_to_string() == pat('a |= x ? y : z;')
    tu = ef(b, b.expr_comma(xa, x_conditional))
    assert tu.emit_to_string() == pat('a, x ? y : z;')
    tu = ef(b, b.expr_conditional(xa, xb, x_conditional))
    assert tu.emit_to_string() == pat('a ? b : x ? y : z;')

    tu = ef(b, b.expr_index(x_assign, xa))
    assert tu.emit_to_string() == pat('(x = y)[a];')
    tu = ef(b, b.expr_call(x_assign, [xa]))
    assert tu.emit_to_string() == pat('(x = y)(a);')
    tu = ef(b, b.expr_direct_member(x_assign, 'f'))
    assert tu.emit_to_string() == pat('(x = y).f;')
    tu = ef(b, b.expr_indirect_member(x_assign, 'g'))
    assert tu.emit_to_string() == pat('(x = y)->g;')
    tu = ef(b, b.expr_post_inc(x_assign))
    assert tu.emit_to_string() == pat('(x = y)++;')
    tu = ef(b, b.expr_post_dec(x_assign))
    assert tu.emit_to_string() == pat('(x = y)--;')
    tu = ef(b, b.expr_pre_inc(x_assign))
    assert tu.emit_to_string() == pat('++(x = y);')
    tu = ef(b, b.expr_pre_dec(x_assign))
    assert tu.emit_to_string() == pat('--(x = y);')
    tu = ef(b, b.expr_addressof(x_assign))
    assert tu.emit_to_string() == pat('&(x = y);')
    tu = ef(b, b.expr_deref(x_assign))
    assert tu.emit_to_string() == pat('*(x = y);')
    tu = ef(b, b.expr_unary_plus(x_assign))
    assert tu.emit_to_string() == pat('+(x = y);')
    tu = ef(b, b.expr_unary_minus(x_assign))
    assert tu.emit_to_string() == pat('-(x = y);')
    tu = ef(b, b.expr_bitwise_not(x_assign))
    assert tu.emit_to_string() == pat('~(x = y);')
    tu = ef(b, b.expr_logical_not(x_assign))
    assert tu.emit_to_string() == pat('!(x = y);')
    tu = ef(b, b.expr_sizeof_expr(x_assign))
    assert tu.emit_to_string() == pat('sizeof(x = y);')
    tu = ef(b, b.expr_cast(tv, x_assign))
    assert tu.emit_to_string() == pat('(V)(x = y);')
    tu = ef(b, b.expr_times(x_assign, xa))
    assert tu.emit_to_string() == pat('(x = y) * a;')
    tu = ef(b, b.expr_divide(x_assign, xa))
    assert tu.emit_to_string() == pat('(x = y) / a;')
    tu = ef(b, b.expr_modulus(x_assign, xa))
    assert tu.emit_to_string() == pat('(x = y) % a;')
    tu = ef(b, b.expr_plus(x_assign, xa))
    assert tu.emit_to_string() == pat('(x = y) + a;')
    tu = ef(b, b.expr_minus(x_assign, xa))
    assert tu.emit_to_string() == pat('(x = y) - a;')
    tu = ef(b, b.expr_lshift(x_assign, xa))
    assert tu.emit_to_string() == pat('(x = y) << a;')
    tu = ef(b, b.expr_rshift(x_assign, xa))
    assert tu.emit_to_string() == pat('(x = y) >> a;')
    tu = ef(b, b.expr_cmp_lt(x_assign, xa))
    assert tu.emit_to_string() == pat('(x = y) < a;')
    tu = ef(b, b.expr_cmp_gt(x_assign, xa))
    assert tu.emit_to_string() == pat('(x = y) > a;')
    tu = ef(b, b.expr_cmp_le(x_assign, xa))
    assert tu.emit_to_string() == pat('(x = y) <= a;')
    tu = ef(b, b.expr_cmp_ge(x_assign, xa))
    assert tu.emit_to_string() == pat('(x = y) >= a;')
    tu = ef(b, b.expr_cmp_eq(x_assign, xa))
    assert tu.emit_to_string() == pat('(x = y) == a;')
    tu = ef(b, b.expr_cmp_ne(x_assign, xa))
    assert tu.emit_to_string() == pat('(x = y) != a;')
    tu = ef(b, b.expr_bitwise_and(x_assign, xa))
    assert tu.emit_to_string() == pat('(x = y) & a;')
    tu = ef(b, b.expr_bitwise_xor(x_assign, xa))
    assert tu.emit_to_string() == pat('(x = y) ^ a;')
    tu = ef(b, b.expr_bitwise_or(x_assign, xa))
    assert tu.emit_to_string() == pat('(x = y) | a;')
    tu = ef(b, b.expr_logical_and(x_assign, xa))
    assert tu.emit_to_string() == pat('(x = y) && a;')
    tu = ef(b, b.expr_logical_or(x_assign, xa))
    assert tu.emit_to_string() == pat('(x = y) || a;')
    tu = ef(b, b.expr_conditional(x_assign, xa, xb))
    assert tu.emit_to_string() == pat('(x = y) ? a : b;')
    tu = ef(b, b.expr_assign(x_assign, xa))
    assert tu.emit_to_string() == pat('(x = y) = a;')
    tu = ef(b, b.expr_assign_times(x_assign, xa))
    assert tu.emit_to_string() == pat('(x = y) *= a;')
    tu = ef(b, b.expr_assign_divide(x_assign, xa))
    assert tu.emit_to_string() == pat('(x = y) /= a;')
    tu = ef(b, b.expr_assign_modulus(x_assign, xa))
    assert tu.emit_to_string() == pat('(x = y) %= a;')
    tu = ef(b, b.expr_assign_plus(x_assign, xa))
    assert tu.emit_to_string() == pat('(x = y) += a;')
    tu = ef(b, b.expr_assign_minus(x_assign, xa))
    assert tu.emit_to_string() == pat('(x = y) -= a;')
    tu = ef(b, b.expr_assign_lshift(x_assign, xa))
    assert tu.emit_to_string() == pat('(x = y) <<= a;')
    tu = ef(b, b.expr_assign_rshift(x_assign, xa))
    assert tu.emit_to_string() == pat('(x = y) >>= a;')
    tu = ef(b, b.expr_assign_bitwise_and(x_assign, xa))
    assert tu.emit_to_string() == pat('(x = y) &= a;')
    tu = ef(b, b.expr_assign_bitwise_xor(x_assign, xa))
    assert tu.emit_to_string() == pat('(x = y) ^= a;')
    tu = ef(b, b.expr_assign_bitwise_or(x_assign, xa))
    assert tu.emit_to_string() == pat('(x = y) |= a;')
    tu = ef(b, b.expr_comma(x_assign, xa))
    assert tu.emit_to_string() == pat('x = y, a;')
    tu = ef(b, b.expr_index(xa, x_assign))
    assert tu.emit_to_string() == pat('a[x = y];')
    tu = ef(b, b.expr_call(xa, [x_assign]))
    assert tu.emit_to_string() == pat('a(x = y);')
    tu = ef(b, b.expr_times(xa, x_assign))
    assert tu.emit_to_string() == pat('a * (x = y);')
    tu = ef(b, b.expr_divide(xa, x_assign))
    assert tu.emit_to_string() == pat('a / (x = y);')
    tu = ef(b, b.expr_modulus(xa, x_assign))
    assert tu.emit_to_string() == pat('a % (x = y);')
    tu = ef(b, b.expr_plus(xa, x_assign))
    assert tu.emit_to_string() == pat('a + (x = y);')
    tu = ef(b, b.expr_minus(xa, x_assign))
    assert tu.emit_to_string() == pat('a - (x = y);')
    tu = ef(b, b.expr_lshift(xa, x_assign))
    assert tu.emit_to_string() == pat('a << (x = y);')
    tu = ef(b, b.expr_rshift(xa, x_assign))
    assert tu.emit_to_string() == pat('a >> (x = y);')
    tu = ef(b, b.expr_cmp_lt(xa, x_assign))
    assert tu.emit_to_string() == pat('a < (x = y);')
    tu = ef(b, b.expr_cmp_gt(xa, x_assign))
    assert tu.emit_to_string() == pat('a > (x = y);')
    tu = ef(b, b.expr_cmp_le(xa, x_assign))
    assert tu.emit_to_string() == pat('a <= (x = y);')
    tu = ef(b, b.expr_cmp_ge(xa, x_assign))
    assert tu.emit_to_string() == pat('a >= (x = y);')
    tu = ef(b, b.expr_cmp_eq(xa, x_assign))
    assert tu.emit_to_string() == pat('a == (x = y);')
    tu = ef(b, b.expr_cmp_ne(xa, x_assign))
    assert tu.emit_to_string() == pat('a != (x = y);')
    tu = ef(b, b.expr_bitwise_and(xa, x_assign))
    assert tu.emit_to_string() == pat('a & (x = y);')
    tu = ef(b, b.expr_bitwise_xor(xa, x_assign))
    assert tu.emit_to_string() == pat('a ^ (x = y);')
    tu = ef(b, b.expr_bitwise_or(xa, x_assign))
    assert tu.emit_to_string() == pat('a | (x = y);')
    tu = ef(b, b.expr_logical_and(xa, x_assign))
    assert tu.emit_to_string() == pat('a && (x = y);')
    tu = ef(b, b.expr_logical_or(xa, x_assign))
    assert tu.emit_to_string() == pat('a || (x = y);')
    tu = ef(b, b.expr_conditional(xa, x_assign, xb))
    assert tu.emit_to_string() == pat('a ? x = y : b;')
    tu = ef(b, b.expr_assign(xa, x_assign))
    assert tu.emit_to_string() == pat('a = x = y;')
    tu = ef(b, b.expr_assign_times(xa, x_assign))
    assert tu.emit_to_string() == pat('a *= x = y;')
    tu = ef(b, b.expr_assign_divide(xa, x_assign))
    assert tu.emit_to_string() == pat('a /= x = y;')
    tu = ef(b, b.expr_assign_modulus(xa, x_assign))
    assert tu.emit_to_string() == pat('a %= x = y;')
    tu = ef(b, b.expr_assign_plus(xa, x_assign))
    assert tu.emit_to_string() == pat('a += x = y;')
    tu = ef(b, b.expr_assign_minus(xa, x_assign))
    assert tu.emit_to_string() == pat('a -= x = y;')
    tu = ef(b, b.expr_assign_lshift(xa, x_assign))
    assert tu.emit_to_string() == pat('a <<= x = y;')
    tu = ef(b, b.expr_assign_rshift(xa, x_assign))
    assert tu.emit_to_string() == pat('a >>= x = y;')
    tu = ef(b, b.expr_assign_bitwise_and(xa, x_assign))
    assert tu.emit_to_string() == pat('a &= x = y;')
    tu = ef(b, b.expr_assign_bitwise_xor(xa, x_assign))
    assert tu.emit_to_string() == pat('a ^= x = y;')
    tu = ef(b, b.expr_assign_bitwise_or(xa, x_assign))
    assert tu.emit_to_string() == pat('a |= x = y;')
    tu = ef(b, b.expr_comma(xa, x_assign))
    assert tu.emit_to_string() == pat('a, x = y;')
    tu = ef(b, b.expr_conditional(xa, xb, x_assign))
    assert tu.emit_to_string() == pat('a ? b : (x = y);')

    tu = ef(b, b.expr_index(x_assign_times, xa))
    assert tu.emit_to_string() == pat('(x *= y)[a];')
    tu = ef(b, b.expr_call(x_assign_times, [xa]))
    assert tu.emit_to_string() == pat('(x *= y)(a);')
    tu = ef(b, b.expr_direct_member(x_assign_times, 'f'))
    assert tu.emit_to_string() == pat('(x *= y).f;')
    tu = ef(b, b.expr_indirect_member(x_assign_times, 'g'))
    assert tu.emit_to_string() == pat('(x *= y)->g;')
    tu = ef(b, b.expr_post_inc(x_assign_times))
    assert tu.emit_to_string() == pat('(x *= y)++;')
    tu = ef(b, b.expr_post_dec(x_assign_times))
    assert tu.emit_to_string() == pat('(x *= y)--;')
    tu = ef(b, b.expr_pre_inc(x_assign_times))
    assert tu.emit_to_string() == pat('++(x *= y);')
    tu = ef(b, b.expr_pre_dec(x_assign_times))
    assert tu.emit_to_string() == pat('--(x *= y);')
    tu = ef(b, b.expr_addressof(x_assign_times))
    assert tu.emit_to_string() == pat('&(x *= y);')
    tu = ef(b, b.expr_deref(x_assign_times))
    assert tu.emit_to_string() == pat('*(x *= y);')
    tu = ef(b, b.expr_unary_plus(x_assign_times))
    assert tu.emit_to_string() == pat('+(x *= y);')
    tu = ef(b, b.expr_unary_minus(x_assign_times))
    assert tu.emit_to_string() == pat('-(x *= y);')
    tu = ef(b, b.expr_bitwise_not(x_assign_times))
    assert tu.emit_to_string() == pat('~(x *= y);')
    tu = ef(b, b.expr_logical_not(x_assign_times))
    assert tu.emit_to_string() == pat('!(x *= y);')
    tu = ef(b, b.expr_sizeof_expr(x_assign_times))
    assert tu.emit_to_string() == pat('sizeof(x *= y);')
    tu = ef(b, b.expr_cast(tv, x_assign_times))
    assert tu.emit_to_string() == pat('(V)(x *= y);')
    tu = ef(b, b.expr_times(x_assign_times, xa))
    assert tu.emit_to_string() == pat('(x *= y) * a;')
    tu = ef(b, b.expr_divide(x_assign_times, xa))
    assert tu.emit_to_string() == pat('(x *= y) / a;')
    tu = ef(b, b.expr_modulus(x_assign_times, xa))
    assert tu.emit_to_string() == pat('(x *= y) % a;')
    tu = ef(b, b.expr_plus(x_assign_times, xa))
    assert tu.emit_to_string() == pat('(x *= y) + a;')
    tu = ef(b, b.expr_minus(x_assign_times, xa))
    assert tu.emit_to_string() == pat('(x *= y) - a;')
    tu = ef(b, b.expr_lshift(x_assign_times, xa))
    assert tu.emit_to_string() == pat('(x *= y) << a;')
    tu = ef(b, b.expr_rshift(x_assign_times, xa))
    assert tu.emit_to_string() == pat('(x *= y) >> a;')
    tu = ef(b, b.expr_cmp_lt(x_assign_times, xa))
    assert tu.emit_to_string() == pat('(x *= y) < a;')
    tu = ef(b, b.expr_cmp_gt(x_assign_times, xa))
    assert tu.emit_to_string() == pat('(x *= y) > a;')
    tu = ef(b, b.expr_cmp_le(x_assign_times, xa))
    assert tu.emit_to_string() == pat('(x *= y) <= a;')
    tu = ef(b, b.expr_cmp_ge(x_assign_times, xa))
    assert tu.emit_to_string() == pat('(x *= y) >= a;')
    tu = ef(b, b.expr_cmp_eq(x_assign_times, xa))
    assert tu.emit_to_string() == pat('(x *= y) == a;')
    tu = ef(b, b.expr_cmp_ne(x_assign_times, xa))
    assert tu.emit_to_string() == pat('(x *= y) != a;')
    tu = ef(b, b.expr_bitwise_and(x_assign_times, xa))
    assert tu.emit_to_string() == pat('(x *= y) & a;')
    tu = ef(b, b.expr_bitwise_xor(x_assign_times, xa))
    assert tu.emit_to_string() == pat('(x *= y) ^ a;')
    tu = ef(b, b.expr_bitwise_or(x_assign_times, xa))
    assert tu.emit_to_string() == pat('(x *= y) | a;')
    tu = ef(b, b.expr_logical_and(x_assign_times, xa))
    assert tu.emit_to_string() == pat('(x *= y) && a;')
    tu = ef(b, b.expr_logical_or(x_assign_times, xa))
    assert tu.emit_to_string() == pat('(x *= y) || a;')
    tu = ef(b, b.expr_conditional(x_assign_times, xa, xb))
    assert tu.emit_to_string() == pat('(x *= y) ? a : b;')
    tu = ef(b, b.expr_assign(x_assign_times, xa))
    assert tu.emit_to_string() == pat('(x *= y) = a;')
    tu = ef(b, b.expr_assign_times(x_assign_times, xa))
    assert tu.emit_to_string() == pat('(x *= y) *= a;')
    tu = ef(b, b.expr_assign_divide(x_assign_times, xa))
    assert tu.emit_to_string() == pat('(x *= y) /= a;')
    tu = ef(b, b.expr_assign_modulus(x_assign_times, xa))
    assert tu.emit_to_string() == pat('(x *= y) %= a;')
    tu = ef(b, b.expr_assign_plus(x_assign_times, xa))
    assert tu.emit_to_string() == pat('(x *= y) += a;')
    tu = ef(b, b.expr_assign_minus(x_assign_times, xa))
    assert tu.emit_to_string() == pat('(x *= y) -= a;')
    tu = ef(b, b.expr_assign_lshift(x_assign_times, xa))
    assert tu.emit_to_string() == pat('(x *= y) <<= a;')
    tu = ef(b, b.expr_assign_rshift(x_assign_times, xa))
    assert tu.emit_to_string() == pat('(x *= y) >>= a;')
    tu = ef(b, b.expr_assign_bitwise_and(x_assign_times, xa))
    assert tu.emit_to_string() == pat('(x *= y) &= a;')
    tu = ef(b, b.expr_assign_bitwise_xor(x_assign_times, xa))
    assert tu.emit_to_string() == pat('(x *= y) ^= a;')
    tu = ef(b, b.expr_assign_bitwise_or(x_assign_times, xa))
    assert tu.emit_to_string() == pat('(x *= y) |= a;')
    tu = ef(b, b.expr_comma(x_assign_times, xa))
    assert tu.emit_to_string() == pat('x *= y, a;')
    tu = ef(b, b.expr_index(xa, x_assign_times))
    assert tu.emit_to_string() == pat('a[x *= y];')
    tu = ef(b, b.expr_call(xa, [x_assign_times]))
    assert tu.emit_to_string() == pat('a(x *= y);')
    tu = ef(b, b.expr_times(xa, x_assign_times))
    assert tu.emit_to_string() == pat('a * (x *= y);')
    tu = ef(b, b.expr_divide(xa, x_assign_times))
    assert tu.emit_to_string() == pat('a / (x *= y);')
    tu = ef(b, b.expr_modulus(xa, x_assign_times))
    assert tu.emit_to_string() == pat('a % (x *= y);')
    tu = ef(b, b.expr_plus(xa, x_assign_times))
    assert tu.emit_to_string() == pat('a + (x *= y);')
    tu = ef(b, b.expr_minus(xa, x_assign_times))
    assert tu.emit_to_string() == pat('a - (x *= y);')
    tu = ef(b, b.expr_lshift(xa, x_assign_times))
    assert tu.emit_to_string() == pat('a << (x *= y);')
    tu = ef(b, b.expr_rshift(xa, x_assign_times))
    assert tu.emit_to_string() == pat('a >> (x *= y);')
    tu = ef(b, b.expr_cmp_lt(xa, x_assign_times))
    assert tu.emit_to_string() == pat('a < (x *= y);')
    tu = ef(b, b.expr_cmp_gt(xa, x_assign_times))
    assert tu.emit_to_string() == pat('a > (x *= y);')
    tu = ef(b, b.expr_cmp_le(xa, x_assign_times))
    assert tu.emit_to_string() == pat('a <= (x *= y);')
    tu = ef(b, b.expr_cmp_ge(xa, x_assign_times))
    assert tu.emit_to_string() == pat('a >= (x *= y);')
    tu = ef(b, b.expr_cmp_eq(xa, x_assign_times))
    assert tu.emit_to_string() == pat('a == (x *= y);')
    tu = ef(b, b.expr_cmp_ne(xa, x_assign_times))
    assert tu.emit_to_string() == pat('a != (x *= y);')
    tu = ef(b, b.expr_bitwise_and(xa, x_assign_times))
    assert tu.emit_to_string() == pat('a & (x *= y);')
    tu = ef(b, b.expr_bitwise_xor(xa, x_assign_times))
    assert tu.emit_to_string() == pat('a ^ (x *= y);')
    tu = ef(b, b.expr_bitwise_or(xa, x_assign_times))
    assert tu.emit_to_string() == pat('a | (x *= y);')
    tu = ef(b, b.expr_logical_and(xa, x_assign_times))
    assert tu.emit_to_string() == pat('a && (x *= y);')
    tu = ef(b, b.expr_logical_or(xa, x_assign_times))
    assert tu.emit_to_string() == pat('a || (x *= y);')
    tu = ef(b, b.expr_conditional(xa, x_assign_times, xb))
    assert tu.emit_to_string() == pat('a ? x *= y : b;')
    tu = ef(b, b.expr_assign(xa, x_assign_times))
    assert tu.emit_to_string() == pat('a = x *= y;')
    tu = ef(b, b.expr_assign_times(xa, x_assign_times))
    assert tu.emit_to_string() == pat('a *= x *= y;')
    tu = ef(b, b.expr_assign_divide(xa, x_assign_times))
    assert tu.emit_to_string() == pat('a /= x *= y;')
    tu = ef(b, b.expr_assign_modulus(xa, x_assign_times))
    assert tu.emit_to_string() == pat('a %= x *= y;')
    tu = ef(b, b.expr_assign_plus(xa, x_assign_times))
    assert tu.emit_to_string() == pat('a += x *= y;')
    tu = ef(b, b.expr_assign_minus(xa, x_assign_times))
    assert tu.emit_to_string() == pat('a -= x *= y;')
    tu = ef(b, b.expr_assign_lshift(xa, x_assign_times))
    assert tu.emit_to_string() == pat('a <<= x *= y;')
    tu = ef(b, b.expr_assign_rshift(xa, x_assign_times))
    assert tu.emit_to_string() == pat('a >>= x *= y;')
    tu = ef(b, b.expr_assign_bitwise_and(xa, x_assign_times))
    assert tu.emit_to_string() == pat('a &= x *= y;')
    tu = ef(b, b.expr_assign_bitwise_xor(xa, x_assign_times))
    assert tu.emit_to_string() == pat('a ^= x *= y;')
    tu = ef(b, b.expr_assign_bitwise_or(xa, x_assign_times))
    assert tu.emit_to_string() == pat('a |= x *= y;')
    tu = ef(b, b.expr_comma(xa, x_assign_times))
    assert tu.emit_to_string() == pat('a, x *= y;')
    tu = ef(b, b.expr_conditional(xa, xb, x_assign_times))
    assert tu.emit_to_string() == pat('a ? b : (x *= y);')

    tu = ef(b, b.expr_index(x_assign_divide, xa))
    assert tu.emit_to_string() == pat('(x /= y)[a];')
    tu = ef(b, b.expr_call(x_assign_divide, [xa]))
    assert tu.emit_to_string() == pat('(x /= y)(a);')
    tu = ef(b, b.expr_direct_member(x_assign_divide, 'f'))
    assert tu.emit_to_string() == pat('(x /= y).f;')
    tu = ef(b, b.expr_indirect_member(x_assign_divide, 'g'))
    assert tu.emit_to_string() == pat('(x /= y)->g;')
    tu = ef(b, b.expr_post_inc(x_assign_divide))
    assert tu.emit_to_string() == pat('(x /= y)++;')
    tu = ef(b, b.expr_post_dec(x_assign_divide))
    assert tu.emit_to_string() == pat('(x /= y)--;')
    tu = ef(b, b.expr_pre_inc(x_assign_divide))
    assert tu.emit_to_string() == pat('++(x /= y);')
    tu = ef(b, b.expr_pre_dec(x_assign_divide))
    assert tu.emit_to_string() == pat('--(x /= y);')
    tu = ef(b, b.expr_addressof(x_assign_divide))
    assert tu.emit_to_string() == pat('&(x /= y);')
    tu = ef(b, b.expr_deref(x_assign_divide))
    assert tu.emit_to_string() == pat('*(x /= y);')
    tu = ef(b, b.expr_unary_plus(x_assign_divide))
    assert tu.emit_to_string() == pat('+(x /= y);')
    tu = ef(b, b.expr_unary_minus(x_assign_divide))
    assert tu.emit_to_string() == pat('-(x /= y);')
    tu = ef(b, b.expr_bitwise_not(x_assign_divide))
    assert tu.emit_to_string() == pat('~(x /= y);')
    tu = ef(b, b.expr_logical_not(x_assign_divide))
    assert tu.emit_to_string() == pat('!(x /= y);')
    tu = ef(b, b.expr_sizeof_expr(x_assign_divide))
    assert tu.emit_to_string() == pat('sizeof(x /= y);')
    tu = ef(b, b.expr_cast(tv, x_assign_divide))
    assert tu.emit_to_string() == pat('(V)(x /= y);')
    tu = ef(b, b.expr_times(x_assign_divide, xa))
    assert tu.emit_to_string() == pat('(x /= y) * a;')
    tu = ef(b, b.expr_divide(x_assign_divide, xa))
    assert tu.emit_to_string() == pat('(x /= y) / a;')
    tu = ef(b, b.expr_modulus(x_assign_divide, xa))
    assert tu.emit_to_string() == pat('(x /= y) % a;')
    tu = ef(b, b.expr_plus(x_assign_divide, xa))
    assert tu.emit_to_string() == pat('(x /= y) + a;')
    tu = ef(b, b.expr_minus(x_assign_divide, xa))
    assert tu.emit_to_string() == pat('(x /= y) - a;')
    tu = ef(b, b.expr_lshift(x_assign_divide, xa))
    assert tu.emit_to_string() == pat('(x /= y) << a;')
    tu = ef(b, b.expr_rshift(x_assign_divide, xa))
    assert tu.emit_to_string() == pat('(x /= y) >> a;')
    tu = ef(b, b.expr_cmp_lt(x_assign_divide, xa))
    assert tu.emit_to_string() == pat('(x /= y) < a;')
    tu = ef(b, b.expr_cmp_gt(x_assign_divide, xa))
    assert tu.emit_to_string() == pat('(x /= y) > a;')
    tu = ef(b, b.expr_cmp_le(x_assign_divide, xa))
    assert tu.emit_to_string() == pat('(x /= y) <= a;')
    tu = ef(b, b.expr_cmp_ge(x_assign_divide, xa))
    assert tu.emit_to_string() == pat('(x /= y) >= a;')
    tu = ef(b, b.expr_cmp_eq(x_assign_divide, xa))
    assert tu.emit_to_string() == pat('(x /= y) == a;')
    tu = ef(b, b.expr_cmp_ne(x_assign_divide, xa))
    assert tu.emit_to_string() == pat('(x /= y) != a;')
    tu = ef(b, b.expr_bitwise_and(x_assign_divide, xa))
    assert tu.emit_to_string() == pat('(x /= y) & a;')
    tu = ef(b, b.expr_bitwise_xor(x_assign_divide, xa))
    assert tu.emit_to_string() == pat('(x /= y) ^ a;')
    tu = ef(b, b.expr_bitwise_or(x_assign_divide, xa))
    assert tu.emit_to_string() == pat('(x /= y) | a;')
    tu = ef(b, b.expr_logical_and(x_assign_divide, xa))
    assert tu.emit_to_string() == pat('(x /= y) && a;')
    tu = ef(b, b.expr_logical_or(x_assign_divide, xa))
    assert tu.emit_to_string() == pat('(x /= y) || a;')
    tu = ef(b, b.expr_conditional(x_assign_divide, xa, xb))
    assert tu.emit_to_string() == pat('(x /= y) ? a : b;')
    tu = ef(b, b.expr_assign(x_assign_divide, xa))
    assert tu.emit_to_string() == pat('(x /= y) = a;')
    tu = ef(b, b.expr_assign_times(x_assign_divide, xa))
    assert tu.emit_to_string() == pat('(x /= y) *= a;')
    tu = ef(b, b.expr_assign_divide(x_assign_divide, xa))
    assert tu.emit_to_string() == pat('(x /= y) /= a;')
    tu = ef(b, b.expr_assign_modulus(x_assign_divide, xa))
    assert tu.emit_to_string() == pat('(x /= y) %= a;')
    tu = ef(b, b.expr_assign_plus(x_assign_divide, xa))
    assert tu.emit_to_string() == pat('(x /= y) += a;')
    tu = ef(b, b.expr_assign_minus(x_assign_divide, xa))
    assert tu.emit_to_string() == pat('(x /= y) -= a;')
    tu = ef(b, b.expr_assign_lshift(x_assign_divide, xa))
    assert tu.emit_to_string() == pat('(x /= y) <<= a;')
    tu = ef(b, b.expr_assign_rshift(x_assign_divide, xa))
    assert tu.emit_to_string() == pat('(x /= y) >>= a;')
    tu = ef(b, b.expr_assign_bitwise_and(x_assign_divide, xa))
    assert tu.emit_to_string() == pat('(x /= y) &= a;')
    tu = ef(b, b.expr_assign_bitwise_xor(x_assign_divide, xa))
    assert tu.emit_to_string() == pat('(x /= y) ^= a;')
    tu = ef(b, b.expr_assign_bitwise_or(x_assign_divide, xa))
    assert tu.emit_to_string() == pat('(x /= y) |= a;')
    tu = ef(b, b.expr_comma(x_assign_divide, xa))
    assert tu.emit_to_string() == pat('x /= y, a;')
    tu = ef(b, b.expr_index(xa, x_assign_divide))
    assert tu.emit_to_string() == pat('a[x /= y];')
    tu = ef(b, b.expr_call(xa, [x_assign_divide]))
    assert tu.emit_to_string() == pat('a(x /= y);')
    tu = ef(b, b.expr_times(xa, x_assign_divide))
    assert tu.emit_to_string() == pat('a * (x /= y);')
    tu = ef(b, b.expr_divide(xa, x_assign_divide))
    assert tu.emit_to_string() == pat('a / (x /= y);')
    tu = ef(b, b.expr_modulus(xa, x_assign_divide))
    assert tu.emit_to_string() == pat('a % (x /= y);')
    tu = ef(b, b.expr_plus(xa, x_assign_divide))
    assert tu.emit_to_string() == pat('a + (x /= y);')
    tu = ef(b, b.expr_minus(xa, x_assign_divide))
    assert tu.emit_to_string() == pat('a - (x /= y);')
    tu = ef(b, b.expr_lshift(xa, x_assign_divide))
    assert tu.emit_to_string() == pat('a << (x /= y);')
    tu = ef(b, b.expr_rshift(xa, x_assign_divide))
    assert tu.emit_to_string() == pat('a >> (x /= y);')
    tu = ef(b, b.expr_cmp_lt(xa, x_assign_divide))
    assert tu.emit_to_string() == pat('a < (x /= y);')
    tu = ef(b, b.expr_cmp_gt(xa, x_assign_divide))
    assert tu.emit_to_string() == pat('a > (x /= y);')
    tu = ef(b, b.expr_cmp_le(xa, x_assign_divide))
    assert tu.emit_to_string() == pat('a <= (x /= y);')
    tu = ef(b, b.expr_cmp_ge(xa, x_assign_divide))
    assert tu.emit_to_string() == pat('a >= (x /= y);')
    tu = ef(b, b.expr_cmp_eq(xa, x_assign_divide))
    assert tu.emit_to_string() == pat('a == (x /= y);')
    tu = ef(b, b.expr_cmp_ne(xa, x_assign_divide))
    assert tu.emit_to_string() == pat('a != (x /= y);')
    tu = ef(b, b.expr_bitwise_and(xa, x_assign_divide))
    assert tu.emit_to_string() == pat('a & (x /= y);')
    tu = ef(b, b.expr_bitwise_xor(xa, x_assign_divide))
    assert tu.emit_to_string() == pat('a ^ (x /= y);')
    tu = ef(b, b.expr_bitwise_or(xa, x_assign_divide))
    assert tu.emit_to_string() == pat('a | (x /= y);')
    tu = ef(b, b.expr_logical_and(xa, x_assign_divide))
    assert tu.emit_to_string() == pat('a && (x /= y);')
    tu = ef(b, b.expr_logical_or(xa, x_assign_divide))
    assert tu.emit_to_string() == pat('a || (x /= y);')
    tu = ef(b, b.expr_conditional(xa, x_assign_divide, xb))
    assert tu.emit_to_string() == pat('a ? x /= y : b;')
    tu = ef(b, b.expr_assign(xa, x_assign_divide))
    assert tu.emit_to_string() == pat('a = x /= y;')
    tu = ef(b, b.expr_assign_times(xa, x_assign_divide))
    assert tu.emit_to_string() == pat('a *= x /= y;')
    tu = ef(b, b.expr_assign_divide(xa, x_assign_divide))
    assert tu.emit_to_string() == pat('a /= x /= y;')
    tu = ef(b, b.expr_assign_modulus(xa, x_assign_divide))
    assert tu.emit_to_string() == pat('a %= x /= y;')
    tu = ef(b, b.expr_assign_plus(xa, x_assign_divide))
    assert tu.emit_to_string() == pat('a += x /= y;')
    tu = ef(b, b.expr_assign_minus(xa, x_assign_divide))
    assert tu.emit_to_string() == pat('a -= x /= y;')
    tu = ef(b, b.expr_assign_lshift(xa, x_assign_divide))
    assert tu.emit_to_string() == pat('a <<= x /= y;')
    tu = ef(b, b.expr_assign_rshift(xa, x_assign_divide))
    assert tu.emit_to_string() == pat('a >>= x /= y;')
    tu = ef(b, b.expr_assign_bitwise_and(xa, x_assign_divide))
    assert tu.emit_to_string() == pat('a &= x /= y;')
    tu = ef(b, b.expr_assign_bitwise_xor(xa, x_assign_divide))
    assert tu.emit_to_string() == pat('a ^= x /= y;')
    tu = ef(b, b.expr_assign_bitwise_or(xa, x_assign_divide))
    assert tu.emit_to_string() == pat('a |= x /= y;')
    tu = ef(b, b.expr_comma(xa, x_assign_divide))
    assert tu.emit_to_string() == pat('a, x /= y;')
    tu = ef(b, b.expr_conditional(xa, xb, x_assign_divide))
    assert tu.emit_to_string() == pat('a ? b : (x /= y);')

    tu = ef(b, b.expr_index(x_assign_modulus, xa))
    assert tu.emit_to_string() == pat('(x %= y)[a];')
    tu = ef(b, b.expr_call(x_assign_modulus, [xa]))
    assert tu.emit_to_string() == pat('(x %= y)(a);')
    tu = ef(b, b.expr_direct_member(x_assign_modulus, 'f'))
    assert tu.emit_to_string() == pat('(x %= y).f;')
    tu = ef(b, b.expr_indirect_member(x_assign_modulus, 'g'))
    assert tu.emit_to_string() == pat('(x %= y)->g;')
    tu = ef(b, b.expr_post_inc(x_assign_modulus))
    assert tu.emit_to_string() == pat('(x %= y)++;')
    tu = ef(b, b.expr_post_dec(x_assign_modulus))
    assert tu.emit_to_string() == pat('(x %= y)--;')
    tu = ef(b, b.expr_pre_inc(x_assign_modulus))
    assert tu.emit_to_string() == pat('++(x %= y);')
    tu = ef(b, b.expr_pre_dec(x_assign_modulus))
    assert tu.emit_to_string() == pat('--(x %= y);')
    tu = ef(b, b.expr_addressof(x_assign_modulus))
    assert tu.emit_to_string() == pat('&(x %= y);')
    tu = ef(b, b.expr_deref(x_assign_modulus))
    assert tu.emit_to_string() == pat('*(x %= y);')
    tu = ef(b, b.expr_unary_plus(x_assign_modulus))
    assert tu.emit_to_string() == pat('+(x %= y);')
    tu = ef(b, b.expr_unary_minus(x_assign_modulus))
    assert tu.emit_to_string() == pat('-(x %= y);')
    tu = ef(b, b.expr_bitwise_not(x_assign_modulus))
    assert tu.emit_to_string() == pat('~(x %= y);')
    tu = ef(b, b.expr_logical_not(x_assign_modulus))
    assert tu.emit_to_string() == pat('!(x %= y);')
    tu = ef(b, b.expr_sizeof_expr(x_assign_modulus))
    assert tu.emit_to_string() == pat('sizeof(x %= y);')
    tu = ef(b, b.expr_cast(tv, x_assign_modulus))
    assert tu.emit_to_string() == pat('(V)(x %= y);')
    tu = ef(b, b.expr_times(x_assign_modulus, xa))
    assert tu.emit_to_string() == pat('(x %= y) * a;')
    tu = ef(b, b.expr_divide(x_assign_modulus, xa))
    assert tu.emit_to_string() == pat('(x %= y) / a;')
    tu = ef(b, b.expr_modulus(x_assign_modulus, xa))
    assert tu.emit_to_string() == pat('(x %= y) % a;')
    tu = ef(b, b.expr_plus(x_assign_modulus, xa))
    assert tu.emit_to_string() == pat('(x %= y) + a;')
    tu = ef(b, b.expr_minus(x_assign_modulus, xa))
    assert tu.emit_to_string() == pat('(x %= y) - a;')
    tu = ef(b, b.expr_lshift(x_assign_modulus, xa))
    assert tu.emit_to_string() == pat('(x %= y) << a;')
    tu = ef(b, b.expr_rshift(x_assign_modulus, xa))
    assert tu.emit_to_string() == pat('(x %= y) >> a;')
    tu = ef(b, b.expr_cmp_lt(x_assign_modulus, xa))
    assert tu.emit_to_string() == pat('(x %= y) < a;')
    tu = ef(b, b.expr_cmp_gt(x_assign_modulus, xa))
    assert tu.emit_to_string() == pat('(x %= y) > a;')
    tu = ef(b, b.expr_cmp_le(x_assign_modulus, xa))
    assert tu.emit_to_string() == pat('(x %= y) <= a;')
    tu = ef(b, b.expr_cmp_ge(x_assign_modulus, xa))
    assert tu.emit_to_string() == pat('(x %= y) >= a;')
    tu = ef(b, b.expr_cmp_eq(x_assign_modulus, xa))
    assert tu.emit_to_string() == pat('(x %= y) == a;')
    tu = ef(b, b.expr_cmp_ne(x_assign_modulus, xa))
    assert tu.emit_to_string() == pat('(x %= y) != a;')
    tu = ef(b, b.expr_bitwise_and(x_assign_modulus, xa))
    assert tu.emit_to_string() == pat('(x %= y) & a;')
    tu = ef(b, b.expr_bitwise_xor(x_assign_modulus, xa))
    assert tu.emit_to_string() == pat('(x %= y) ^ a;')
    tu = ef(b, b.expr_bitwise_or(x_assign_modulus, xa))
    assert tu.emit_to_string() == pat('(x %= y) | a;')
    tu = ef(b, b.expr_logical_and(x_assign_modulus, xa))
    assert tu.emit_to_string() == pat('(x %= y) && a;')
    tu = ef(b, b.expr_logical_or(x_assign_modulus, xa))
    assert tu.emit_to_string() == pat('(x %= y) || a;')
    tu = ef(b, b.expr_conditional(x_assign_modulus, xa, xb))
    assert tu.emit_to_string() == pat('(x %= y) ? a : b;')
    tu = ef(b, b.expr_assign(x_assign_modulus, xa))
    assert tu.emit_to_string() == pat('(x %= y) = a;')
    tu = ef(b, b.expr_assign_times(x_assign_modulus, xa))
    assert tu.emit_to_string() == pat('(x %= y) *= a;')
    tu = ef(b, b.expr_assign_divide(x_assign_modulus, xa))
    assert tu.emit_to_string() == pat('(x %= y) /= a;')
    tu = ef(b, b.expr_assign_modulus(x_assign_modulus, xa))
    assert tu.emit_to_string() == pat('(x %= y) %= a;')
    tu = ef(b, b.expr_assign_plus(x_assign_modulus, xa))
    assert tu.emit_to_string() == pat('(x %= y) += a;')
    tu = ef(b, b.expr_assign_minus(x_assign_modulus, xa))
    assert tu.emit_to_string() == pat('(x %= y) -= a;')
    tu = ef(b, b.expr_assign_lshift(x_assign_modulus, xa))
    assert tu.emit_to_string() == pat('(x %= y) <<= a;')
    tu = ef(b, b.expr_assign_rshift(x_assign_modulus, xa))
    assert tu.emit_to_string() == pat('(x %= y) >>= a;')
    tu = ef(b, b.expr_assign_bitwise_and(x_assign_modulus, xa))
    assert tu.emit_to_string() == pat('(x %= y) &= a;')
    tu = ef(b, b.expr_assign_bitwise_xor(x_assign_modulus, xa))
    assert tu.emit_to_string() == pat('(x %= y) ^= a;')
    tu = ef(b, b.expr_assign_bitwise_or(x_assign_modulus, xa))
    assert tu.emit_to_string() == pat('(x %= y) |= a;')
    tu = ef(b, b.expr_comma(x_assign_modulus, xa))
    assert tu.emit_to_string() == pat('x %= y, a;')
    tu = ef(b, b.expr_index(xa, x_assign_modulus))
    assert tu.emit_to_string() == pat('a[x %= y];')
    tu = ef(b, b.expr_call(xa, [x_assign_modulus]))
    assert tu.emit_to_string() == pat('a(x %= y);')
    tu = ef(b, b.expr_times(xa, x_assign_modulus))
    assert tu.emit_to_string() == pat('a * (x %= y);')
    tu = ef(b, b.expr_divide(xa, x_assign_modulus))
    assert tu.emit_to_string() == pat('a / (x %= y);')
    tu = ef(b, b.expr_modulus(xa, x_assign_modulus))
    assert tu.emit_to_string() == pat('a % (x %= y);')
    tu = ef(b, b.expr_plus(xa, x_assign_modulus))
    assert tu.emit_to_string() == pat('a + (x %= y);')
    tu = ef(b, b.expr_minus(xa, x_assign_modulus))
    assert tu.emit_to_string() == pat('a - (x %= y);')
    tu = ef(b, b.expr_lshift(xa, x_assign_modulus))
    assert tu.emit_to_string() == pat('a << (x %= y);')
    tu = ef(b, b.expr_rshift(xa, x_assign_modulus))
    assert tu.emit_to_string() == pat('a >> (x %= y);')
    tu = ef(b, b.expr_cmp_lt(xa, x_assign_modulus))
    assert tu.emit_to_string() == pat('a < (x %= y);')
    tu = ef(b, b.expr_cmp_gt(xa, x_assign_modulus))
    assert tu.emit_to_string() == pat('a > (x %= y);')
    tu = ef(b, b.expr_cmp_le(xa, x_assign_modulus))
    assert tu.emit_to_string() == pat('a <= (x %= y);')
    tu = ef(b, b.expr_cmp_ge(xa, x_assign_modulus))
    assert tu.emit_to_string() == pat('a >= (x %= y);')
    tu = ef(b, b.expr_cmp_eq(xa, x_assign_modulus))
    assert tu.emit_to_string() == pat('a == (x %= y);')
    tu = ef(b, b.expr_cmp_ne(xa, x_assign_modulus))
    assert tu.emit_to_string() == pat('a != (x %= y);')
    tu = ef(b, b.expr_bitwise_and(xa, x_assign_modulus))
    assert tu.emit_to_string() == pat('a & (x %= y);')
    tu = ef(b, b.expr_bitwise_xor(xa, x_assign_modulus))
    assert tu.emit_to_string() == pat('a ^ (x %= y);')
    tu = ef(b, b.expr_bitwise_or(xa, x_assign_modulus))
    assert tu.emit_to_string() == pat('a | (x %= y);')
    tu = ef(b, b.expr_logical_and(xa, x_assign_modulus))
    assert tu.emit_to_string() == pat('a && (x %= y);')
    tu = ef(b, b.expr_logical_or(xa, x_assign_modulus))
    assert tu.emit_to_string() == pat('a || (x %= y);')
    tu = ef(b, b.expr_conditional(xa, x_assign_modulus, xb))
    assert tu.emit_to_string() == pat('a ? x %= y : b;')
    tu = ef(b, b.expr_assign(xa, x_assign_modulus))
    assert tu.emit_to_string() == pat('a = x %= y;')
    tu = ef(b, b.expr_assign_times(xa, x_assign_modulus))
    assert tu.emit_to_string() == pat('a *= x %= y;')
    tu = ef(b, b.expr_assign_divide(xa, x_assign_modulus))
    assert tu.emit_to_string() == pat('a /= x %= y;')
    tu = ef(b, b.expr_assign_modulus(xa, x_assign_modulus))
    assert tu.emit_to_string() == pat('a %= x %= y;')
    tu = ef(b, b.expr_assign_plus(xa, x_assign_modulus))
    assert tu.emit_to_string() == pat('a += x %= y;')
    tu = ef(b, b.expr_assign_minus(xa, x_assign_modulus))
    assert tu.emit_to_string() == pat('a -= x %= y;')
    tu = ef(b, b.expr_assign_lshift(xa, x_assign_modulus))
    assert tu.emit_to_string() == pat('a <<= x %= y;')
    tu = ef(b, b.expr_assign_rshift(xa, x_assign_modulus))
    assert tu.emit_to_string() == pat('a >>= x %= y;')
    tu = ef(b, b.expr_assign_bitwise_and(xa, x_assign_modulus))
    assert tu.emit_to_string() == pat('a &= x %= y;')
    tu = ef(b, b.expr_assign_bitwise_xor(xa, x_assign_modulus))
    assert tu.emit_to_string() == pat('a ^= x %= y;')
    tu = ef(b, b.expr_assign_bitwise_or(xa, x_assign_modulus))
    assert tu.emit_to_string() == pat('a |= x %= y;')
    tu = ef(b, b.expr_comma(xa, x_assign_modulus))
    assert tu.emit_to_string() == pat('a, x %= y;')
    tu = ef(b, b.expr_conditional(xa, xb, x_assign_modulus))
    assert tu.emit_to_string() == pat('a ? b : (x %= y);')

    tu = ef(b, b.expr_index(x_assign_plus, xa))
    assert tu.emit_to_string() == pat('(x += y)[a];')
    tu = ef(b, b.expr_call(x_assign_plus, [xa]))
    assert tu.emit_to_string() == pat('(x += y)(a);')
    tu = ef(b, b.expr_direct_member(x_assign_plus, 'f'))
    assert tu.emit_to_string() == pat('(x += y).f;')
    tu = ef(b, b.expr_indirect_member(x_assign_plus, 'g'))
    assert tu.emit_to_string() == pat('(x += y)->g;')
    tu = ef(b, b.expr_post_inc(x_assign_plus))
    assert tu.emit_to_string() == pat('(x += y)++;')
    tu = ef(b, b.expr_post_dec(x_assign_plus))
    assert tu.emit_to_string() == pat('(x += y)--;')
    tu = ef(b, b.expr_pre_inc(x_assign_plus))
    assert tu.emit_to_string() == pat('++(x += y);')
    tu = ef(b, b.expr_pre_dec(x_assign_plus))
    assert tu.emit_to_string() == pat('--(x += y);')
    tu = ef(b, b.expr_addressof(x_assign_plus))
    assert tu.emit_to_string() == pat('&(x += y);')
    tu = ef(b, b.expr_deref(x_assign_plus))
    assert tu.emit_to_string() == pat('*(x += y);')
    tu = ef(b, b.expr_unary_plus(x_assign_plus))
    assert tu.emit_to_string() == pat('+(x += y);')
    tu = ef(b, b.expr_unary_minus(x_assign_plus))
    assert tu.emit_to_string() == pat('-(x += y);')
    tu = ef(b, b.expr_bitwise_not(x_assign_plus))
    assert tu.emit_to_string() == pat('~(x += y);')
    tu = ef(b, b.expr_logical_not(x_assign_plus))
    assert tu.emit_to_string() == pat('!(x += y);')
    tu = ef(b, b.expr_sizeof_expr(x_assign_plus))
    assert tu.emit_to_string() == pat('sizeof(x += y);')
    tu = ef(b, b.expr_cast(tv, x_assign_plus))
    assert tu.emit_to_string() == pat('(V)(x += y);')
    tu = ef(b, b.expr_times(x_assign_plus, xa))
    assert tu.emit_to_string() == pat('(x += y) * a;')
    tu = ef(b, b.expr_divide(x_assign_plus, xa))
    assert tu.emit_to_string() == pat('(x += y) / a;')
    tu = ef(b, b.expr_modulus(x_assign_plus, xa))
    assert tu.emit_to_string() == pat('(x += y) % a;')
    tu = ef(b, b.expr_plus(x_assign_plus, xa))
    assert tu.emit_to_string() == pat('(x += y) + a;')
    tu = ef(b, b.expr_minus(x_assign_plus, xa))
    assert tu.emit_to_string() == pat('(x += y) - a;')
    tu = ef(b, b.expr_lshift(x_assign_plus, xa))
    assert tu.emit_to_string() == pat('(x += y) << a;')
    tu = ef(b, b.expr_rshift(x_assign_plus, xa))
    assert tu.emit_to_string() == pat('(x += y) >> a;')
    tu = ef(b, b.expr_cmp_lt(x_assign_plus, xa))
    assert tu.emit_to_string() == pat('(x += y) < a;')
    tu = ef(b, b.expr_cmp_gt(x_assign_plus, xa))
    assert tu.emit_to_string() == pat('(x += y) > a;')
    tu = ef(b, b.expr_cmp_le(x_assign_plus, xa))
    assert tu.emit_to_string() == pat('(x += y) <= a;')
    tu = ef(b, b.expr_cmp_ge(x_assign_plus, xa))
    assert tu.emit_to_string() == pat('(x += y) >= a;')
    tu = ef(b, b.expr_cmp_eq(x_assign_plus, xa))
    assert tu.emit_to_string() == pat('(x += y) == a;')
    tu = ef(b, b.expr_cmp_ne(x_assign_plus, xa))
    assert tu.emit_to_string() == pat('(x += y) != a;')
    tu = ef(b, b.expr_bitwise_and(x_assign_plus, xa))
    assert tu.emit_to_string() == pat('(x += y) & a;')
    tu = ef(b, b.expr_bitwise_xor(x_assign_plus, xa))
    assert tu.emit_to_string() == pat('(x += y) ^ a;')
    tu = ef(b, b.expr_bitwise_or(x_assign_plus, xa))
    assert tu.emit_to_string() == pat('(x += y) | a;')
    tu = ef(b, b.expr_logical_and(x_assign_plus, xa))
    assert tu.emit_to_string() == pat('(x += y) && a;')
    tu = ef(b, b.expr_logical_or(x_assign_plus, xa))
    assert tu.emit_to_string() == pat('(x += y) || a;')
    tu = ef(b, b.expr_conditional(x_assign_plus, xa, xb))
    assert tu.emit_to_string() == pat('(x += y) ? a : b;')
    tu = ef(b, b.expr_assign(x_assign_plus, xa))
    assert tu.emit_to_string() == pat('(x += y) = a;')
    tu = ef(b, b.expr_assign_times(x_assign_plus, xa))
    assert tu.emit_to_string() == pat('(x += y) *= a;')
    tu = ef(b, b.expr_assign_divide(x_assign_plus, xa))
    assert tu.emit_to_string() == pat('(x += y) /= a;')
    tu = ef(b, b.expr_assign_modulus(x_assign_plus, xa))
    assert tu.emit_to_string() == pat('(x += y) %= a;')
    tu = ef(b, b.expr_assign_plus(x_assign_plus, xa))
    assert tu.emit_to_string() == pat('(x += y) += a;')
    tu = ef(b, b.expr_assign_minus(x_assign_plus, xa))
    assert tu.emit_to_string() == pat('(x += y) -= a;')
    tu = ef(b, b.expr_assign_lshift(x_assign_plus, xa))
    assert tu.emit_to_string() == pat('(x += y) <<= a;')
    tu = ef(b, b.expr_assign_rshift(x_assign_plus, xa))
    assert tu.emit_to_string() == pat('(x += y) >>= a;')
    tu = ef(b, b.expr_assign_bitwise_and(x_assign_plus, xa))
    assert tu.emit_to_string() == pat('(x += y) &= a;')
    tu = ef(b, b.expr_assign_bitwise_xor(x_assign_plus, xa))
    assert tu.emit_to_string() == pat('(x += y) ^= a;')
    tu = ef(b, b.expr_assign_bitwise_or(x_assign_plus, xa))
    assert tu.emit_to_string() == pat('(x += y) |= a;')
    tu = ef(b, b.expr_comma(x_assign_plus, xa))
    assert tu.emit_to_string() == pat('x += y, a;')
    tu = ef(b, b.expr_index(xa, x_assign_plus))
    assert tu.emit_to_string() == pat('a[x += y];')
    tu = ef(b, b.expr_call(xa, [x_assign_plus]))
    assert tu.emit_to_string() == pat('a(x += y);')
    tu = ef(b, b.expr_times(xa, x_assign_plus))
    assert tu.emit_to_string() == pat('a * (x += y);')
    tu = ef(b, b.expr_divide(xa, x_assign_plus))
    assert tu.emit_to_string() == pat('a / (x += y);')
    tu = ef(b, b.expr_modulus(xa, x_assign_plus))
    assert tu.emit_to_string() == pat('a % (x += y);')
    tu = ef(b, b.expr_plus(xa, x_assign_plus))
    assert tu.emit_to_string() == pat('a + (x += y);')
    tu = ef(b, b.expr_minus(xa, x_assign_plus))
    assert tu.emit_to_string() == pat('a - (x += y);')
    tu = ef(b, b.expr_lshift(xa, x_assign_plus))
    assert tu.emit_to_string() == pat('a << (x += y);')
    tu = ef(b, b.expr_rshift(xa, x_assign_plus))
    assert tu.emit_to_string() == pat('a >> (x += y);')
    tu = ef(b, b.expr_cmp_lt(xa, x_assign_plus))
    assert tu.emit_to_string() == pat('a < (x += y);')
    tu = ef(b, b.expr_cmp_gt(xa, x_assign_plus))
    assert tu.emit_to_string() == pat('a > (x += y);')
    tu = ef(b, b.expr_cmp_le(xa, x_assign_plus))
    assert tu.emit_to_string() == pat('a <= (x += y);')
    tu = ef(b, b.expr_cmp_ge(xa, x_assign_plus))
    assert tu.emit_to_string() == pat('a >= (x += y);')
    tu = ef(b, b.expr_cmp_eq(xa, x_assign_plus))
    assert tu.emit_to_string() == pat('a == (x += y);')
    tu = ef(b, b.expr_cmp_ne(xa, x_assign_plus))
    assert tu.emit_to_string() == pat('a != (x += y);')
    tu = ef(b, b.expr_bitwise_and(xa, x_assign_plus))
    assert tu.emit_to_string() == pat('a & (x += y);')
    tu = ef(b, b.expr_bitwise_xor(xa, x_assign_plus))
    assert tu.emit_to_string() == pat('a ^ (x += y);')
    tu = ef(b, b.expr_bitwise_or(xa, x_assign_plus))
    assert tu.emit_to_string() == pat('a | (x += y);')
    tu = ef(b, b.expr_logical_and(xa, x_assign_plus))
    assert tu.emit_to_string() == pat('a && (x += y);')
    tu = ef(b, b.expr_logical_or(xa, x_assign_plus))
    assert tu.emit_to_string() == pat('a || (x += y);')
    tu = ef(b, b.expr_conditional(xa, x_assign_plus, xb))
    assert tu.emit_to_string() == pat('a ? x += y : b;')
    tu = ef(b, b.expr_assign(xa, x_assign_plus))
    assert tu.emit_to_string() == pat('a = x += y;')
    tu = ef(b, b.expr_assign_times(xa, x_assign_plus))
    assert tu.emit_to_string() == pat('a *= x += y;')
    tu = ef(b, b.expr_assign_divide(xa, x_assign_plus))
    assert tu.emit_to_string() == pat('a /= x += y;')
    tu = ef(b, b.expr_assign_modulus(xa, x_assign_plus))
    assert tu.emit_to_string() == pat('a %= x += y;')
    tu = ef(b, b.expr_assign_plus(xa, x_assign_plus))
    assert tu.emit_to_string() == pat('a += x += y;')
    tu = ef(b, b.expr_assign_minus(xa, x_assign_plus))
    assert tu.emit_to_string() == pat('a -= x += y;')
    tu = ef(b, b.expr_assign_lshift(xa, x_assign_plus))
    assert tu.emit_to_string() == pat('a <<= x += y;')
    tu = ef(b, b.expr_assign_rshift(xa, x_assign_plus))
    assert tu.emit_to_string() == pat('a >>= x += y;')
    tu = ef(b, b.expr_assign_bitwise_and(xa, x_assign_plus))
    assert tu.emit_to_string() == pat('a &= x += y;')
    tu = ef(b, b.expr_assign_bitwise_xor(xa, x_assign_plus))
    assert tu.emit_to_string() == pat('a ^= x += y;')
    tu = ef(b, b.expr_assign_bitwise_or(xa, x_assign_plus))
    assert tu.emit_to_string() == pat('a |= x += y;')
    tu = ef(b, b.expr_comma(xa, x_assign_plus))
    assert tu.emit_to_string() == pat('a, x += y;')
    tu = ef(b, b.expr_conditional(xa, xb, x_assign_plus))
    assert tu.emit_to_string() == pat('a ? b : (x += y);')

    tu = ef(b, b.expr_index(x_assign_minus, xa))
    assert tu.emit_to_string() == pat('(x -= y)[a];')
    tu = ef(b, b.expr_call(x_assign_minus, [xa]))
    assert tu.emit_to_string() == pat('(x -= y)(a);')
    tu = ef(b, b.expr_direct_member(x_assign_minus, 'f'))
    assert tu.emit_to_string() == pat('(x -= y).f;')
    tu = ef(b, b.expr_indirect_member(x_assign_minus, 'g'))
    assert tu.emit_to_string() == pat('(x -= y)->g;')
    tu = ef(b, b.expr_post_inc(x_assign_minus))
    assert tu.emit_to_string() == pat('(x -= y)++;')
    tu = ef(b, b.expr_post_dec(x_assign_minus))
    assert tu.emit_to_string() == pat('(x -= y)--;')
    tu = ef(b, b.expr_pre_inc(x_assign_minus))
    assert tu.emit_to_string() == pat('++(x -= y);')
    tu = ef(b, b.expr_pre_dec(x_assign_minus))
    assert tu.emit_to_string() == pat('--(x -= y);')
    tu = ef(b, b.expr_addressof(x_assign_minus))
    assert tu.emit_to_string() == pat('&(x -= y);')
    tu = ef(b, b.expr_deref(x_assign_minus))
    assert tu.emit_to_string() == pat('*(x -= y);')
    tu = ef(b, b.expr_unary_plus(x_assign_minus))
    assert tu.emit_to_string() == pat('+(x -= y);')
    tu = ef(b, b.expr_unary_minus(x_assign_minus))
    assert tu.emit_to_string() == pat('-(x -= y);')
    tu = ef(b, b.expr_bitwise_not(x_assign_minus))
    assert tu.emit_to_string() == pat('~(x -= y);')
    tu = ef(b, b.expr_logical_not(x_assign_minus))
    assert tu.emit_to_string() == pat('!(x -= y);')
    tu = ef(b, b.expr_sizeof_expr(x_assign_minus))
    assert tu.emit_to_string() == pat('sizeof(x -= y);')
    tu = ef(b, b.expr_cast(tv, x_assign_minus))
    assert tu.emit_to_string() == pat('(V)(x -= y);')
    tu = ef(b, b.expr_times(x_assign_minus, xa))
    assert tu.emit_to_string() == pat('(x -= y) * a;')
    tu = ef(b, b.expr_divide(x_assign_minus, xa))
    assert tu.emit_to_string() == pat('(x -= y) / a;')
    tu = ef(b, b.expr_modulus(x_assign_minus, xa))
    assert tu.emit_to_string() == pat('(x -= y) % a;')
    tu = ef(b, b.expr_plus(x_assign_minus, xa))
    assert tu.emit_to_string() == pat('(x -= y) + a;')
    tu = ef(b, b.expr_minus(x_assign_minus, xa))
    assert tu.emit_to_string() == pat('(x -= y) - a;')
    tu = ef(b, b.expr_lshift(x_assign_minus, xa))
    assert tu.emit_to_string() == pat('(x -= y) << a;')
    tu = ef(b, b.expr_rshift(x_assign_minus, xa))
    assert tu.emit_to_string() == pat('(x -= y) >> a;')
    tu = ef(b, b.expr_cmp_lt(x_assign_minus, xa))
    assert tu.emit_to_string() == pat('(x -= y) < a;')
    tu = ef(b, b.expr_cmp_gt(x_assign_minus, xa))
    assert tu.emit_to_string() == pat('(x -= y) > a;')
    tu = ef(b, b.expr_cmp_le(x_assign_minus, xa))
    assert tu.emit_to_string() == pat('(x -= y) <= a;')
    tu = ef(b, b.expr_cmp_ge(x_assign_minus, xa))
    assert tu.emit_to_string() == pat('(x -= y) >= a;')
    tu = ef(b, b.expr_cmp_eq(x_assign_minus, xa))
    assert tu.emit_to_string() == pat('(x -= y) == a;')
    tu = ef(b, b.expr_cmp_ne(x_assign_minus, xa))
    assert tu.emit_to_string() == pat('(x -= y) != a;')
    tu = ef(b, b.expr_bitwise_and(x_assign_minus, xa))
    assert tu.emit_to_string() == pat('(x -= y) & a;')
    tu = ef(b, b.expr_bitwise_xor(x_assign_minus, xa))
    assert tu.emit_to_string() == pat('(x -= y) ^ a;')
    tu = ef(b, b.expr_bitwise_or(x_assign_minus, xa))
    assert tu.emit_to_string() == pat('(x -= y) | a;')
    tu = ef(b, b.expr_logical_and(x_assign_minus, xa))
    assert tu.emit_to_string() == pat('(x -= y) && a;')
    tu = ef(b, b.expr_logical_or(x_assign_minus, xa))
    assert tu.emit_to_string() == pat('(x -= y) || a;')
    tu = ef(b, b.expr_conditional(x_assign_minus, xa, xb))
    assert tu.emit_to_string() == pat('(x -= y) ? a : b;')
    tu = ef(b, b.expr_assign(x_assign_minus, xa))
    assert tu.emit_to_string() == pat('(x -= y) = a;')
    tu = ef(b, b.expr_assign_times(x_assign_minus, xa))
    assert tu.emit_to_string() == pat('(x -= y) *= a;')
    tu = ef(b, b.expr_assign_divide(x_assign_minus, xa))
    assert tu.emit_to_string() == pat('(x -= y) /= a;')
    tu = ef(b, b.expr_assign_modulus(x_assign_minus, xa))
    assert tu.emit_to_string() == pat('(x -= y) %= a;')
    tu = ef(b, b.expr_assign_plus(x_assign_minus, xa))
    assert tu.emit_to_string() == pat('(x -= y) += a;')
    tu = ef(b, b.expr_assign_minus(x_assign_minus, xa))
    assert tu.emit_to_string() == pat('(x -= y) -= a;')
    tu = ef(b, b.expr_assign_lshift(x_assign_minus, xa))
    assert tu.emit_to_string() == pat('(x -= y) <<= a;')
    tu = ef(b, b.expr_assign_rshift(x_assign_minus, xa))
    assert tu.emit_to_string() == pat('(x -= y) >>= a;')
    tu = ef(b, b.expr_assign_bitwise_and(x_assign_minus, xa))
    assert tu.emit_to_string() == pat('(x -= y) &= a;')
    tu = ef(b, b.expr_assign_bitwise_xor(x_assign_minus, xa))
    assert tu.emit_to_string() == pat('(x -= y) ^= a;')
    tu = ef(b, b.expr_assign_bitwise_or(x_assign_minus, xa))
    assert tu.emit_to_string() == pat('(x -= y) |= a;')
    tu = ef(b, b.expr_comma(x_assign_minus, xa))
    assert tu.emit_to_string() == pat('x -= y, a;')
    tu = ef(b, b.expr_index(xa, x_assign_minus))
    assert tu.emit_to_string() == pat('a[x -= y];')
    tu = ef(b, b.expr_call(xa, [x_assign_minus]))
    assert tu.emit_to_string() == pat('a(x -= y);')
    tu = ef(b, b.expr_times(xa, x_assign_minus))
    assert tu.emit_to_string() == pat('a * (x -= y);')
    tu = ef(b, b.expr_divide(xa, x_assign_minus))
    assert tu.emit_to_string() == pat('a / (x -= y);')
    tu = ef(b, b.expr_modulus(xa, x_assign_minus))
    assert tu.emit_to_string() == pat('a % (x -= y);')
    tu = ef(b, b.expr_plus(xa, x_assign_minus))
    assert tu.emit_to_string() == pat('a + (x -= y);')
    tu = ef(b, b.expr_minus(xa, x_assign_minus))
    assert tu.emit_to_string() == pat('a - (x -= y);')
    tu = ef(b, b.expr_lshift(xa, x_assign_minus))
    assert tu.emit_to_string() == pat('a << (x -= y);')
    tu = ef(b, b.expr_rshift(xa, x_assign_minus))
    assert tu.emit_to_string() == pat('a >> (x -= y);')
    tu = ef(b, b.expr_cmp_lt(xa, x_assign_minus))
    assert tu.emit_to_string() == pat('a < (x -= y);')
    tu = ef(b, b.expr_cmp_gt(xa, x_assign_minus))
    assert tu.emit_to_string() == pat('a > (x -= y);')
    tu = ef(b, b.expr_cmp_le(xa, x_assign_minus))
    assert tu.emit_to_string() == pat('a <= (x -= y);')
    tu = ef(b, b.expr_cmp_ge(xa, x_assign_minus))
    assert tu.emit_to_string() == pat('a >= (x -= y);')
    tu = ef(b, b.expr_cmp_eq(xa, x_assign_minus))
    assert tu.emit_to_string() == pat('a == (x -= y);')
    tu = ef(b, b.expr_cmp_ne(xa, x_assign_minus))
    assert tu.emit_to_string() == pat('a != (x -= y);')
    tu = ef(b, b.expr_bitwise_and(xa, x_assign_minus))
    assert tu.emit_to_string() == pat('a & (x -= y);')
    tu = ef(b, b.expr_bitwise_xor(xa, x_assign_minus))
    assert tu.emit_to_string() == pat('a ^ (x -= y);')
    tu = ef(b, b.expr_bitwise_or(xa, x_assign_minus))
    assert tu.emit_to_string() == pat('a | (x -= y);')
    tu = ef(b, b.expr_logical_and(xa, x_assign_minus))
    assert tu.emit_to_string() == pat('a && (x -= y);')
    tu = ef(b, b.expr_logical_or(xa, x_assign_minus))
    assert tu.emit_to_string() == pat('a || (x -= y);')
    tu = ef(b, b.expr_conditional(xa, x_assign_minus, xb))
    assert tu.emit_to_string() == pat('a ? x -= y : b;')
    tu = ef(b, b.expr_assign(xa, x_assign_minus))
    assert tu.emit_to_string() == pat('a = x -= y;')
    tu = ef(b, b.expr_assign_times(xa, x_assign_minus))
    assert tu.emit_to_string() == pat('a *= x -= y;')
    tu = ef(b, b.expr_assign_divide(xa, x_assign_minus))
    assert tu.emit_to_string() == pat('a /= x -= y;')
    tu = ef(b, b.expr_assign_modulus(xa, x_assign_minus))
    assert tu.emit_to_string() == pat('a %= x -= y;')
    tu = ef(b, b.expr_assign_plus(xa, x_assign_minus))
    assert tu.emit_to_string() == pat('a += x -= y;')
    tu = ef(b, b.expr_assign_minus(xa, x_assign_minus))
    assert tu.emit_to_string() == pat('a -= x -= y;')
    tu = ef(b, b.expr_assign_lshift(xa, x_assign_minus))
    assert tu.emit_to_string() == pat('a <<= x -= y;')
    tu = ef(b, b.expr_assign_rshift(xa, x_assign_minus))
    assert tu.emit_to_string() == pat('a >>= x -= y;')
    tu = ef(b, b.expr_assign_bitwise_and(xa, x_assign_minus))
    assert tu.emit_to_string() == pat('a &= x -= y;')
    tu = ef(b, b.expr_assign_bitwise_xor(xa, x_assign_minus))
    assert tu.emit_to_string() == pat('a ^= x -= y;')
    tu = ef(b, b.expr_assign_bitwise_or(xa, x_assign_minus))
    assert tu.emit_to_string() == pat('a |= x -= y;')
    tu = ef(b, b.expr_comma(xa, x_assign_minus))
    assert tu.emit_to_string() == pat('a, x -= y;')
    tu = ef(b, b.expr_conditional(xa, xb, x_assign_minus))
    assert tu.emit_to_string() == pat('a ? b : (x -= y);')

    tu = ef(b, b.expr_index(x_assign_lshift, xa))
    assert tu.emit_to_string() == pat('(x <<= y)[a];')
    tu = ef(b, b.expr_call(x_assign_lshift, [xa]))
    assert tu.emit_to_string() == pat('(x <<= y)(a);')
    tu = ef(b, b.expr_direct_member(x_assign_lshift, 'f'))
    assert tu.emit_to_string() == pat('(x <<= y).f;')
    tu = ef(b, b.expr_indirect_member(x_assign_lshift, 'g'))
    assert tu.emit_to_string() == pat('(x <<= y)->g;')
    tu = ef(b, b.expr_post_inc(x_assign_lshift))
    assert tu.emit_to_string() == pat('(x <<= y)++;')
    tu = ef(b, b.expr_post_dec(x_assign_lshift))
    assert tu.emit_to_string() == pat('(x <<= y)--;')
    tu = ef(b, b.expr_pre_inc(x_assign_lshift))
    assert tu.emit_to_string() == pat('++(x <<= y);')
    tu = ef(b, b.expr_pre_dec(x_assign_lshift))
    assert tu.emit_to_string() == pat('--(x <<= y);')
    tu = ef(b, b.expr_addressof(x_assign_lshift))
    assert tu.emit_to_string() == pat('&(x <<= y);')
    tu = ef(b, b.expr_deref(x_assign_lshift))
    assert tu.emit_to_string() == pat('*(x <<= y);')
    tu = ef(b, b.expr_unary_plus(x_assign_lshift))
    assert tu.emit_to_string() == pat('+(x <<= y);')
    tu = ef(b, b.expr_unary_minus(x_assign_lshift))
    assert tu.emit_to_string() == pat('-(x <<= y);')
    tu = ef(b, b.expr_bitwise_not(x_assign_lshift))
    assert tu.emit_to_string() == pat('~(x <<= y);')
    tu = ef(b, b.expr_logical_not(x_assign_lshift))
    assert tu.emit_to_string() == pat('!(x <<= y);')
    tu = ef(b, b.expr_sizeof_expr(x_assign_lshift))
    assert tu.emit_to_string() == pat('sizeof(x <<= y);')
    tu = ef(b, b.expr_cast(tv, x_assign_lshift))
    assert tu.emit_to_string() == pat('(V)(x <<= y);')
    tu = ef(b, b.expr_times(x_assign_lshift, xa))
    assert tu.emit_to_string() == pat('(x <<= y) * a;')
    tu = ef(b, b.expr_divide(x_assign_lshift, xa))
    assert tu.emit_to_string() == pat('(x <<= y) / a;')
    tu = ef(b, b.expr_modulus(x_assign_lshift, xa))
    assert tu.emit_to_string() == pat('(x <<= y) % a;')
    tu = ef(b, b.expr_plus(x_assign_lshift, xa))
    assert tu.emit_to_string() == pat('(x <<= y) + a;')
    tu = ef(b, b.expr_minus(x_assign_lshift, xa))
    assert tu.emit_to_string() == pat('(x <<= y) - a;')
    tu = ef(b, b.expr_lshift(x_assign_lshift, xa))
    assert tu.emit_to_string() == pat('(x <<= y) << a;')
    tu = ef(b, b.expr_rshift(x_assign_lshift, xa))
    assert tu.emit_to_string() == pat('(x <<= y) >> a;')
    tu = ef(b, b.expr_cmp_lt(x_assign_lshift, xa))
    assert tu.emit_to_string() == pat('(x <<= y) < a;')
    tu = ef(b, b.expr_cmp_gt(x_assign_lshift, xa))
    assert tu.emit_to_string() == pat('(x <<= y) > a;')
    tu = ef(b, b.expr_cmp_le(x_assign_lshift, xa))
    assert tu.emit_to_string() == pat('(x <<= y) <= a;')
    tu = ef(b, b.expr_cmp_ge(x_assign_lshift, xa))
    assert tu.emit_to_string() == pat('(x <<= y) >= a;')
    tu = ef(b, b.expr_cmp_eq(x_assign_lshift, xa))
    assert tu.emit_to_string() == pat('(x <<= y) == a;')
    tu = ef(b, b.expr_cmp_ne(x_assign_lshift, xa))
    assert tu.emit_to_string() == pat('(x <<= y) != a;')
    tu = ef(b, b.expr_bitwise_and(x_assign_lshift, xa))
    assert tu.emit_to_string() == pat('(x <<= y) & a;')
    tu = ef(b, b.expr_bitwise_xor(x_assign_lshift, xa))
    assert tu.emit_to_string() == pat('(x <<= y) ^ a;')
    tu = ef(b, b.expr_bitwise_or(x_assign_lshift, xa))
    assert tu.emit_to_string() == pat('(x <<= y) | a;')
    tu = ef(b, b.expr_logical_and(x_assign_lshift, xa))
    assert tu.emit_to_string() == pat('(x <<= y) && a;')
    tu = ef(b, b.expr_logical_or(x_assign_lshift, xa))
    assert tu.emit_to_string() == pat('(x <<= y) || a;')
    tu = ef(b, b.expr_conditional(x_assign_lshift, xa, xb))
    assert tu.emit_to_string() == pat('(x <<= y) ? a : b;')
    tu = ef(b, b.expr_assign(x_assign_lshift, xa))
    assert tu.emit_to_string() == pat('(x <<= y) = a;')
    tu = ef(b, b.expr_assign_times(x_assign_lshift, xa))
    assert tu.emit_to_string() == pat('(x <<= y) *= a;')
    tu = ef(b, b.expr_assign_divide(x_assign_lshift, xa))
    assert tu.emit_to_string() == pat('(x <<= y) /= a;')
    tu = ef(b, b.expr_assign_modulus(x_assign_lshift, xa))
    assert tu.emit_to_string() == pat('(x <<= y) %= a;')
    tu = ef(b, b.expr_assign_plus(x_assign_lshift, xa))
    assert tu.emit_to_string() == pat('(x <<= y) += a;')
    tu = ef(b, b.expr_assign_minus(x_assign_lshift, xa))
    assert tu.emit_to_string() == pat('(x <<= y) -= a;')
    tu = ef(b, b.expr_assign_lshift(x_assign_lshift, xa))
    assert tu.emit_to_string() == pat('(x <<= y) <<= a;')
    tu = ef(b, b.expr_assign_rshift(x_assign_lshift, xa))
    assert tu.emit_to_string() == pat('(x <<= y) >>= a;')
    tu = ef(b, b.expr_assign_bitwise_and(x_assign_lshift, xa))
    assert tu.emit_to_string() == pat('(x <<= y) &= a;')
    tu = ef(b, b.expr_assign_bitwise_xor(x_assign_lshift, xa))
    assert tu.emit_to_string() == pat('(x <<= y) ^= a;')
    tu = ef(b, b.expr_assign_bitwise_or(x_assign_lshift, xa))
    assert tu.emit_to_string() == pat('(x <<= y) |= a;')
    tu = ef(b, b.expr_comma(x_assign_lshift, xa))
    assert tu.emit_to_string() == pat('x <<= y, a;')
    tu = ef(b, b.expr_index(xa, x_assign_lshift))
    assert tu.emit_to_string() == pat('a[x <<= y];')
    tu = ef(b, b.expr_call(xa, [x_assign_lshift]))
    assert tu.emit_to_string() == pat('a(x <<= y);')
    tu = ef(b, b.expr_times(xa, x_assign_lshift))
    assert tu.emit_to_string() == pat('a * (x <<= y);')
    tu = ef(b, b.expr_divide(xa, x_assign_lshift))
    assert tu.emit_to_string() == pat('a / (x <<= y);')
    tu = ef(b, b.expr_modulus(xa, x_assign_lshift))
    assert tu.emit_to_string() == pat('a % (x <<= y);')
    tu = ef(b, b.expr_plus(xa, x_assign_lshift))
    assert tu.emit_to_string() == pat('a + (x <<= y);')
    tu = ef(b, b.expr_minus(xa, x_assign_lshift))
    assert tu.emit_to_string() == pat('a - (x <<= y);')
    tu = ef(b, b.expr_lshift(xa, x_assign_lshift))
    assert tu.emit_to_string() == pat('a << (x <<= y);')
    tu = ef(b, b.expr_rshift(xa, x_assign_lshift))
    assert tu.emit_to_string() == pat('a >> (x <<= y);')
    tu = ef(b, b.expr_cmp_lt(xa, x_assign_lshift))
    assert tu.emit_to_string() == pat('a < (x <<= y);')
    tu = ef(b, b.expr_cmp_gt(xa, x_assign_lshift))
    assert tu.emit_to_string() == pat('a > (x <<= y);')
    tu = ef(b, b.expr_cmp_le(xa, x_assign_lshift))
    assert tu.emit_to_string() == pat('a <= (x <<= y);')
    tu = ef(b, b.expr_cmp_ge(xa, x_assign_lshift))
    assert tu.emit_to_string() == pat('a >= (x <<= y);')
    tu = ef(b, b.expr_cmp_eq(xa, x_assign_lshift))
    assert tu.emit_to_string() == pat('a == (x <<= y);')
    tu = ef(b, b.expr_cmp_ne(xa, x_assign_lshift))
    assert tu.emit_to_string() == pat('a != (x <<= y);')
    tu = ef(b, b.expr_bitwise_and(xa, x_assign_lshift))
    assert tu.emit_to_string() == pat('a & (x <<= y);')
    tu = ef(b, b.expr_bitwise_xor(xa, x_assign_lshift))
    assert tu.emit_to_string() == pat('a ^ (x <<= y);')
    tu = ef(b, b.expr_bitwise_or(xa, x_assign_lshift))
    assert tu.emit_to_string() == pat('a | (x <<= y);')
    tu = ef(b, b.expr_logical_and(xa, x_assign_lshift))
    assert tu.emit_to_string() == pat('a && (x <<= y);')
    tu = ef(b, b.expr_logical_or(xa, x_assign_lshift))
    assert tu.emit_to_string() == pat('a || (x <<= y);')
    tu = ef(b, b.expr_conditional(xa, x_assign_lshift, xb))
    assert tu.emit_to_string() == pat('a ? x <<= y : b;')
    tu = ef(b, b.expr_assign(xa, x_assign_lshift))
    assert tu.emit_to_string() == pat('a = x <<= y;')
    tu = ef(b, b.expr_assign_times(xa, x_assign_lshift))
    assert tu.emit_to_string() == pat('a *= x <<= y;')
    tu = ef(b, b.expr_assign_divide(xa, x_assign_lshift))
    assert tu.emit_to_string() == pat('a /= x <<= y;')
    tu = ef(b, b.expr_assign_modulus(xa, x_assign_lshift))
    assert tu.emit_to_string() == pat('a %= x <<= y;')
    tu = ef(b, b.expr_assign_plus(xa, x_assign_lshift))
    assert tu.emit_to_string() == pat('a += x <<= y;')
    tu = ef(b, b.expr_assign_minus(xa, x_assign_lshift))
    assert tu.emit_to_string() == pat('a -= x <<= y;')
    tu = ef(b, b.expr_assign_lshift(xa, x_assign_lshift))
    assert tu.emit_to_string() == pat('a <<= x <<= y;')
    tu = ef(b, b.expr_assign_rshift(xa, x_assign_lshift))
    assert tu.emit_to_string() == pat('a >>= x <<= y;')
    tu = ef(b, b.expr_assign_bitwise_and(xa, x_assign_lshift))
    assert tu.emit_to_string() == pat('a &= x <<= y;')
    tu = ef(b, b.expr_assign_bitwise_xor(xa, x_assign_lshift))
    assert tu.emit_to_string() == pat('a ^= x <<= y;')
    tu = ef(b, b.expr_assign_bitwise_or(xa, x_assign_lshift))
    assert tu.emit_to_string() == pat('a |= x <<= y;')
    tu = ef(b, b.expr_comma(xa, x_assign_lshift))
    assert tu.emit_to_string() == pat('a, x <<= y;')
    tu = ef(b, b.expr_conditional(xa, xb, x_assign_lshift))
    assert tu.emit_to_string() == pat('a ? b : (x <<= y);')

    tu = ef(b, b.expr_index(x_assign_rshift, xa))
    assert tu.emit_to_string() == pat('(x >>= y)[a];')
    tu = ef(b, b.expr_call(x_assign_rshift, [xa]))
    assert tu.emit_to_string() == pat('(x >>= y)(a);')
    tu = ef(b, b.expr_direct_member(x_assign_rshift, 'f'))
    assert tu.emit_to_string() == pat('(x >>= y).f;')
    tu = ef(b, b.expr_indirect_member(x_assign_rshift, 'g'))
    assert tu.emit_to_string() == pat('(x >>= y)->g;')
    tu = ef(b, b.expr_post_inc(x_assign_rshift))
    assert tu.emit_to_string() == pat('(x >>= y)++;')
    tu = ef(b, b.expr_post_dec(x_assign_rshift))
    assert tu.emit_to_string() == pat('(x >>= y)--;')
    tu = ef(b, b.expr_pre_inc(x_assign_rshift))
    assert tu.emit_to_string() == pat('++(x >>= y);')
    tu = ef(b, b.expr_pre_dec(x_assign_rshift))
    assert tu.emit_to_string() == pat('--(x >>= y);')
    tu = ef(b, b.expr_addressof(x_assign_rshift))
    assert tu.emit_to_string() == pat('&(x >>= y);')
    tu = ef(b, b.expr_deref(x_assign_rshift))
    assert tu.emit_to_string() == pat('*(x >>= y);')
    tu = ef(b, b.expr_unary_plus(x_assign_rshift))
    assert tu.emit_to_string() == pat('+(x >>= y);')
    tu = ef(b, b.expr_unary_minus(x_assign_rshift))
    assert tu.emit_to_string() == pat('-(x >>= y);')
    tu = ef(b, b.expr_bitwise_not(x_assign_rshift))
    assert tu.emit_to_string() == pat('~(x >>= y);')
    tu = ef(b, b.expr_logical_not(x_assign_rshift))
    assert tu.emit_to_string() == pat('!(x >>= y);')
    tu = ef(b, b.expr_sizeof_expr(x_assign_rshift))
    assert tu.emit_to_string() == pat('sizeof(x >>= y);')
    tu = ef(b, b.expr_cast(tv, x_assign_rshift))
    assert tu.emit_to_string() == pat('(V)(x >>= y);')
    tu = ef(b, b.expr_times(x_assign_rshift, xa))
    assert tu.emit_to_string() == pat('(x >>= y) * a;')
    tu = ef(b, b.expr_divide(x_assign_rshift, xa))
    assert tu.emit_to_string() == pat('(x >>= y) / a;')
    tu = ef(b, b.expr_modulus(x_assign_rshift, xa))
    assert tu.emit_to_string() == pat('(x >>= y) % a;')
    tu = ef(b, b.expr_plus(x_assign_rshift, xa))
    assert tu.emit_to_string() == pat('(x >>= y) + a;')
    tu = ef(b, b.expr_minus(x_assign_rshift, xa))
    assert tu.emit_to_string() == pat('(x >>= y) - a;')
    tu = ef(b, b.expr_lshift(x_assign_rshift, xa))
    assert tu.emit_to_string() == pat('(x >>= y) << a;')
    tu = ef(b, b.expr_rshift(x_assign_rshift, xa))
    assert tu.emit_to_string() == pat('(x >>= y) >> a;')
    tu = ef(b, b.expr_cmp_lt(x_assign_rshift, xa))
    assert tu.emit_to_string() == pat('(x >>= y) < a;')
    tu = ef(b, b.expr_cmp_gt(x_assign_rshift, xa))
    assert tu.emit_to_string() == pat('(x >>= y) > a;')
    tu = ef(b, b.expr_cmp_le(x_assign_rshift, xa))
    assert tu.emit_to_string() == pat('(x >>= y) <= a;')
    tu = ef(b, b.expr_cmp_ge(x_assign_rshift, xa))
    assert tu.emit_to_string() == pat('(x >>= y) >= a;')
    tu = ef(b, b.expr_cmp_eq(x_assign_rshift, xa))
    assert tu.emit_to_string() == pat('(x >>= y) == a;')
    tu = ef(b, b.expr_cmp_ne(x_assign_rshift, xa))
    assert tu.emit_to_string() == pat('(x >>= y) != a;')
    tu = ef(b, b.expr_bitwise_and(x_assign_rshift, xa))
    assert tu.emit_to_string() == pat('(x >>= y) & a;')
    tu = ef(b, b.expr_bitwise_xor(x_assign_rshift, xa))
    assert tu.emit_to_string() == pat('(x >>= y) ^ a;')
    tu = ef(b, b.expr_bitwise_or(x_assign_rshift, xa))
    assert tu.emit_to_string() == pat('(x >>= y) | a;')
    tu = ef(b, b.expr_logical_and(x_assign_rshift, xa))
    assert tu.emit_to_string() == pat('(x >>= y) && a;')
    tu = ef(b, b.expr_logical_or(x_assign_rshift, xa))
    assert tu.emit_to_string() == pat('(x >>= y) || a;')
    tu = ef(b, b.expr_conditional(x_assign_rshift, xa, xb))
    assert tu.emit_to_string() == pat('(x >>= y) ? a : b;')
    tu = ef(b, b.expr_assign(x_assign_rshift, xa))
    assert tu.emit_to_string() == pat('(x >>= y) = a;')
    tu = ef(b, b.expr_assign_times(x_assign_rshift, xa))
    assert tu.emit_to_string() == pat('(x >>= y) *= a;')
    tu = ef(b, b.expr_assign_divide(x_assign_rshift, xa))
    assert tu.emit_to_string() == pat('(x >>= y) /= a;')
    tu = ef(b, b.expr_assign_modulus(x_assign_rshift, xa))
    assert tu.emit_to_string() == pat('(x >>= y) %= a;')
    tu = ef(b, b.expr_assign_plus(x_assign_rshift, xa))
    assert tu.emit_to_string() == pat('(x >>= y) += a;')
    tu = ef(b, b.expr_assign_minus(x_assign_rshift, xa))
    assert tu.emit_to_string() == pat('(x >>= y) -= a;')
    tu = ef(b, b.expr_assign_lshift(x_assign_rshift, xa))
    assert tu.emit_to_string() == pat('(x >>= y) <<= a;')
    tu = ef(b, b.expr_assign_rshift(x_assign_rshift, xa))
    assert tu.emit_to_string() == pat('(x >>= y) >>= a;')
    tu = ef(b, b.expr_assign_bitwise_and(x_assign_rshift, xa))
    assert tu.emit_to_string() == pat('(x >>= y) &= a;')
    tu = ef(b, b.expr_assign_bitwise_xor(x_assign_rshift, xa))
    assert tu.emit_to_string() == pat('(x >>= y) ^= a;')
    tu = ef(b, b.expr_assign_bitwise_or(x_assign_rshift, xa))
    assert tu.emit_to_string() == pat('(x >>= y) |= a;')
    tu = ef(b, b.expr_comma(x_assign_rshift, xa))
    assert tu.emit_to_string() == pat('x >>= y, a;')
    tu = ef(b, b.expr_index(xa, x_assign_rshift))
    assert tu.emit_to_string() == pat('a[x >>= y];')
    tu = ef(b, b.expr_call(xa, [x_assign_rshift]))
    assert tu.emit_to_string() == pat('a(x >>= y);')
    tu = ef(b, b.expr_times(xa, x_assign_rshift))
    assert tu.emit_to_string() == pat('a * (x >>= y);')
    tu = ef(b, b.expr_divide(xa, x_assign_rshift))
    assert tu.emit_to_string() == pat('a / (x >>= y);')
    tu = ef(b, b.expr_modulus(xa, x_assign_rshift))
    assert tu.emit_to_string() == pat('a % (x >>= y);')
    tu = ef(b, b.expr_plus(xa, x_assign_rshift))
    assert tu.emit_to_string() == pat('a + (x >>= y);')
    tu = ef(b, b.expr_minus(xa, x_assign_rshift))
    assert tu.emit_to_string() == pat('a - (x >>= y);')
    tu = ef(b, b.expr_lshift(xa, x_assign_rshift))
    assert tu.emit_to_string() == pat('a << (x >>= y);')
    tu = ef(b, b.expr_rshift(xa, x_assign_rshift))
    assert tu.emit_to_string() == pat('a >> (x >>= y);')
    tu = ef(b, b.expr_cmp_lt(xa, x_assign_rshift))
    assert tu.emit_to_string() == pat('a < (x >>= y);')
    tu = ef(b, b.expr_cmp_gt(xa, x_assign_rshift))
    assert tu.emit_to_string() == pat('a > (x >>= y);')
    tu = ef(b, b.expr_cmp_le(xa, x_assign_rshift))
    assert tu.emit_to_string() == pat('a <= (x >>= y);')
    tu = ef(b, b.expr_cmp_ge(xa, x_assign_rshift))
    assert tu.emit_to_string() == pat('a >= (x >>= y);')
    tu = ef(b, b.expr_cmp_eq(xa, x_assign_rshift))
    assert tu.emit_to_string() == pat('a == (x >>= y);')
    tu = ef(b, b.expr_cmp_ne(xa, x_assign_rshift))
    assert tu.emit_to_string() == pat('a != (x >>= y);')
    tu = ef(b, b.expr_bitwise_and(xa, x_assign_rshift))
    assert tu.emit_to_string() == pat('a & (x >>= y);')
    tu = ef(b, b.expr_bitwise_xor(xa, x_assign_rshift))
    assert tu.emit_to_string() == pat('a ^ (x >>= y);')
    tu = ef(b, b.expr_bitwise_or(xa, x_assign_rshift))
    assert tu.emit_to_string() == pat('a | (x >>= y);')
    tu = ef(b, b.expr_logical_and(xa, x_assign_rshift))
    assert tu.emit_to_string() == pat('a && (x >>= y);')
    tu = ef(b, b.expr_logical_or(xa, x_assign_rshift))
    assert tu.emit_to_string() == pat('a || (x >>= y);')
    tu = ef(b, b.expr_conditional(xa, x_assign_rshift, xb))
    assert tu.emit_to_string() == pat('a ? x >>= y : b;')
    tu = ef(b, b.expr_assign(xa, x_assign_rshift))
    assert tu.emit_to_string() == pat('a = x >>= y;')
    tu = ef(b, b.expr_assign_times(xa, x_assign_rshift))
    assert tu.emit_to_string() == pat('a *= x >>= y;')
    tu = ef(b, b.expr_assign_divide(xa, x_assign_rshift))
    assert tu.emit_to_string() == pat('a /= x >>= y;')
    tu = ef(b, b.expr_assign_modulus(xa, x_assign_rshift))
    assert tu.emit_to_string() == pat('a %= x >>= y;')
    tu = ef(b, b.expr_assign_plus(xa, x_assign_rshift))
    assert tu.emit_to_string() == pat('a += x >>= y;')
    tu = ef(b, b.expr_assign_minus(xa, x_assign_rshift))
    assert tu.emit_to_string() == pat('a -= x >>= y;')
    tu = ef(b, b.expr_assign_lshift(xa, x_assign_rshift))
    assert tu.emit_to_string() == pat('a <<= x >>= y;')
    tu = ef(b, b.expr_assign_rshift(xa, x_assign_rshift))
    assert tu.emit_to_string() == pat('a >>= x >>= y;')
    tu = ef(b, b.expr_assign_bitwise_and(xa, x_assign_rshift))
    assert tu.emit_to_string() == pat('a &= x >>= y;')
    tu = ef(b, b.expr_assign_bitwise_xor(xa, x_assign_rshift))
    assert tu.emit_to_string() == pat('a ^= x >>= y;')
    tu = ef(b, b.expr_assign_bitwise_or(xa, x_assign_rshift))
    assert tu.emit_to_string() == pat('a |= x >>= y;')
    tu = ef(b, b.expr_comma(xa, x_assign_rshift))
    assert tu.emit_to_string() == pat('a, x >>= y;')
    tu = ef(b, b.expr_conditional(xa, xb, x_assign_rshift))
    assert tu.emit_to_string() == pat('a ? b : (x >>= y);')

    tu = ef(b, b.expr_index(x_assign_bitwise_and, xa))
    assert tu.emit_to_string() == pat('(x &= y)[a];')
    tu = ef(b, b.expr_call(x_assign_bitwise_and, [xa]))
    assert tu.emit_to_string() == pat('(x &= y)(a);')
    tu = ef(b, b.expr_direct_member(x_assign_bitwise_and, 'f'))
    assert tu.emit_to_string() == pat('(x &= y).f;')
    tu = ef(b, b.expr_indirect_member(x_assign_bitwise_and, 'g'))
    assert tu.emit_to_string() == pat('(x &= y)->g;')
    tu = ef(b, b.expr_post_inc(x_assign_bitwise_and))
    assert tu.emit_to_string() == pat('(x &= y)++;')
    tu = ef(b, b.expr_post_dec(x_assign_bitwise_and))
    assert tu.emit_to_string() == pat('(x &= y)--;')
    tu = ef(b, b.expr_pre_inc(x_assign_bitwise_and))
    assert tu.emit_to_string() == pat('++(x &= y);')
    tu = ef(b, b.expr_pre_dec(x_assign_bitwise_and))
    assert tu.emit_to_string() == pat('--(x &= y);')
    tu = ef(b, b.expr_addressof(x_assign_bitwise_and))
    assert tu.emit_to_string() == pat('&(x &= y);')
    tu = ef(b, b.expr_deref(x_assign_bitwise_and))
    assert tu.emit_to_string() == pat('*(x &= y);')
    tu = ef(b, b.expr_unary_plus(x_assign_bitwise_and))
    assert tu.emit_to_string() == pat('+(x &= y);')
    tu = ef(b, b.expr_unary_minus(x_assign_bitwise_and))
    assert tu.emit_to_string() == pat('-(x &= y);')
    tu = ef(b, b.expr_bitwise_not(x_assign_bitwise_and))
    assert tu.emit_to_string() == pat('~(x &= y);')
    tu = ef(b, b.expr_logical_not(x_assign_bitwise_and))
    assert tu.emit_to_string() == pat('!(x &= y);')
    tu = ef(b, b.expr_sizeof_expr(x_assign_bitwise_and))
    assert tu.emit_to_string() == pat('sizeof(x &= y);')
    tu = ef(b, b.expr_cast(tv, x_assign_bitwise_and))
    assert tu.emit_to_string() == pat('(V)(x &= y);')
    tu = ef(b, b.expr_times(x_assign_bitwise_and, xa))
    assert tu.emit_to_string() == pat('(x &= y) * a;')
    tu = ef(b, b.expr_divide(x_assign_bitwise_and, xa))
    assert tu.emit_to_string() == pat('(x &= y) / a;')
    tu = ef(b, b.expr_modulus(x_assign_bitwise_and, xa))
    assert tu.emit_to_string() == pat('(x &= y) % a;')
    tu = ef(b, b.expr_plus(x_assign_bitwise_and, xa))
    assert tu.emit_to_string() == pat('(x &= y) + a;')
    tu = ef(b, b.expr_minus(x_assign_bitwise_and, xa))
    assert tu.emit_to_string() == pat('(x &= y) - a;')
    tu = ef(b, b.expr_lshift(x_assign_bitwise_and, xa))
    assert tu.emit_to_string() == pat('(x &= y) << a;')
    tu = ef(b, b.expr_rshift(x_assign_bitwise_and, xa))
    assert tu.emit_to_string() == pat('(x &= y) >> a;')
    tu = ef(b, b.expr_cmp_lt(x_assign_bitwise_and, xa))
    assert tu.emit_to_string() == pat('(x &= y) < a;')
    tu = ef(b, b.expr_cmp_gt(x_assign_bitwise_and, xa))
    assert tu.emit_to_string() == pat('(x &= y) > a;')
    tu = ef(b, b.expr_cmp_le(x_assign_bitwise_and, xa))
    assert tu.emit_to_string() == pat('(x &= y) <= a;')
    tu = ef(b, b.expr_cmp_ge(x_assign_bitwise_and, xa))
    assert tu.emit_to_string() == pat('(x &= y) >= a;')
    tu = ef(b, b.expr_cmp_eq(x_assign_bitwise_and, xa))
    assert tu.emit_to_string() == pat('(x &= y) == a;')
    tu = ef(b, b.expr_cmp_ne(x_assign_bitwise_and, xa))
    assert tu.emit_to_string() == pat('(x &= y) != a;')
    tu = ef(b, b.expr_bitwise_and(x_assign_bitwise_and, xa))
    assert tu.emit_to_string() == pat('(x &= y) & a;')
    tu = ef(b, b.expr_bitwise_xor(x_assign_bitwise_and, xa))
    assert tu.emit_to_string() == pat('(x &= y) ^ a;')
    tu = ef(b, b.expr_bitwise_or(x_assign_bitwise_and, xa))
    assert tu.emit_to_string() == pat('(x &= y) | a;')
    tu = ef(b, b.expr_logical_and(x_assign_bitwise_and, xa))
    assert tu.emit_to_string() == pat('(x &= y) && a;')
    tu = ef(b, b.expr_logical_or(x_assign_bitwise_and, xa))
    assert tu.emit_to_string() == pat('(x &= y) || a;')
    tu = ef(b, b.expr_conditional(x_assign_bitwise_and, xa, xb))
    assert tu.emit_to_string() == pat('(x &= y) ? a : b;')
    tu = ef(b, b.expr_assign(x_assign_bitwise_and, xa))
    assert tu.emit_to_string() == pat('(x &= y) = a;')
    tu = ef(b, b.expr_assign_times(x_assign_bitwise_and, xa))
    assert tu.emit_to_string() == pat('(x &= y) *= a;')
    tu = ef(b, b.expr_assign_divide(x_assign_bitwise_and, xa))
    assert tu.emit_to_string() == pat('(x &= y) /= a;')
    tu = ef(b, b.expr_assign_modulus(x_assign_bitwise_and, xa))
    assert tu.emit_to_string() == pat('(x &= y) %= a;')
    tu = ef(b, b.expr_assign_plus(x_assign_bitwise_and, xa))
    assert tu.emit_to_string() == pat('(x &= y) += a;')
    tu = ef(b, b.expr_assign_minus(x_assign_bitwise_and, xa))
    assert tu.emit_to_string() == pat('(x &= y) -= a;')
    tu = ef(b, b.expr_assign_lshift(x_assign_bitwise_and, xa))
    assert tu.emit_to_string() == pat('(x &= y) <<= a;')
    tu = ef(b, b.expr_assign_rshift(x_assign_bitwise_and, xa))
    assert tu.emit_to_string() == pat('(x &= y) >>= a;')
    tu = ef(b, b.expr_assign_bitwise_and(x_assign_bitwise_and, xa))
    assert tu.emit_to_string() == pat('(x &= y) &= a;')
    tu = ef(b, b.expr_assign_bitwise_xor(x_assign_bitwise_and, xa))
    assert tu.emit_to_string() == pat('(x &= y) ^= a;')
    tu = ef(b, b.expr_assign_bitwise_or(x_assign_bitwise_and, xa))
    assert tu.emit_to_string() == pat('(x &= y) |= a;')
    tu = ef(b, b.expr_comma(x_assign_bitwise_and, xa))
    assert tu.emit_to_string() == pat('x &= y, a;')
    tu = ef(b, b.expr_index(xa, x_assign_bitwise_and))
    assert tu.emit_to_string() == pat('a[x &= y];')
    tu = ef(b, b.expr_call(xa, [x_assign_bitwise_and]))
    assert tu.emit_to_string() == pat('a(x &= y);')
    tu = ef(b, b.expr_times(xa, x_assign_bitwise_and))
    assert tu.emit_to_string() == pat('a * (x &= y);')
    tu = ef(b, b.expr_divide(xa, x_assign_bitwise_and))
    assert tu.emit_to_string() == pat('a / (x &= y);')
    tu = ef(b, b.expr_modulus(xa, x_assign_bitwise_and))
    assert tu.emit_to_string() == pat('a % (x &= y);')
    tu = ef(b, b.expr_plus(xa, x_assign_bitwise_and))
    assert tu.emit_to_string() == pat('a + (x &= y);')
    tu = ef(b, b.expr_minus(xa, x_assign_bitwise_and))
    assert tu.emit_to_string() == pat('a - (x &= y);')
    tu = ef(b, b.expr_lshift(xa, x_assign_bitwise_and))
    assert tu.emit_to_string() == pat('a << (x &= y);')
    tu = ef(b, b.expr_rshift(xa, x_assign_bitwise_and))
    assert tu.emit_to_string() == pat('a >> (x &= y);')
    tu = ef(b, b.expr_cmp_lt(xa, x_assign_bitwise_and))
    assert tu.emit_to_string() == pat('a < (x &= y);')
    tu = ef(b, b.expr_cmp_gt(xa, x_assign_bitwise_and))
    assert tu.emit_to_string() == pat('a > (x &= y);')
    tu = ef(b, b.expr_cmp_le(xa, x_assign_bitwise_and))
    assert tu.emit_to_string() == pat('a <= (x &= y);')
    tu = ef(b, b.expr_cmp_ge(xa, x_assign_bitwise_and))
    assert tu.emit_to_string() == pat('a >= (x &= y);')
    tu = ef(b, b.expr_cmp_eq(xa, x_assign_bitwise_and))
    assert tu.emit_to_string() == pat('a == (x &= y);')
    tu = ef(b, b.expr_cmp_ne(xa, x_assign_bitwise_and))
    assert tu.emit_to_string() == pat('a != (x &= y);')
    tu = ef(b, b.expr_bitwise_and(xa, x_assign_bitwise_and))
    assert tu.emit_to_string() == pat('a & (x &= y);')
    tu = ef(b, b.expr_bitwise_xor(xa, x_assign_bitwise_and))
    assert tu.emit_to_string() == pat('a ^ (x &= y);')
    tu = ef(b, b.expr_bitwise_or(xa, x_assign_bitwise_and))
    assert tu.emit_to_string() == pat('a | (x &= y);')
    tu = ef(b, b.expr_logical_and(xa, x_assign_bitwise_and))
    assert tu.emit_to_string() == pat('a && (x &= y);')
    tu = ef(b, b.expr_logical_or(xa, x_assign_bitwise_and))
    assert tu.emit_to_string() == pat('a || (x &= y);')
    tu = ef(b, b.expr_conditional(xa, x_assign_bitwise_and, xb))
    assert tu.emit_to_string() == pat('a ? x &= y : b;')
    tu = ef(b, b.expr_assign(xa, x_assign_bitwise_and))
    assert tu.emit_to_string() == pat('a = x &= y;')
    tu = ef(b, b.expr_assign_times(xa, x_assign_bitwise_and))
    assert tu.emit_to_string() == pat('a *= x &= y;')
    tu = ef(b, b.expr_assign_divide(xa, x_assign_bitwise_and))
    assert tu.emit_to_string() == pat('a /= x &= y;')
    tu = ef(b, b.expr_assign_modulus(xa, x_assign_bitwise_and))
    assert tu.emit_to_string() == pat('a %= x &= y;')
    tu = ef(b, b.expr_assign_plus(xa, x_assign_bitwise_and))
    assert tu.emit_to_string() == pat('a += x &= y;')
    tu = ef(b, b.expr_assign_minus(xa, x_assign_bitwise_and))
    assert tu.emit_to_string() == pat('a -= x &= y;')
    tu = ef(b, b.expr_assign_lshift(xa, x_assign_bitwise_and))
    assert tu.emit_to_string() == pat('a <<= x &= y;')
    tu = ef(b, b.expr_assign_rshift(xa, x_assign_bitwise_and))
    assert tu.emit_to_string() == pat('a >>= x &= y;')
    tu = ef(b, b.expr_assign_bitwise_and(xa, x_assign_bitwise_and))
    assert tu.emit_to_string() == pat('a &= x &= y;')
    tu = ef(b, b.expr_assign_bitwise_xor(xa, x_assign_bitwise_and))
    assert tu.emit_to_string() == pat('a ^= x &= y;')
    tu = ef(b, b.expr_assign_bitwise_or(xa, x_assign_bitwise_and))
    assert tu.emit_to_string() == pat('a |= x &= y;')
    tu = ef(b, b.expr_comma(xa, x_assign_bitwise_and))
    assert tu.emit_to_string() == pat('a, x &= y;')
    tu = ef(b, b.expr_conditional(xa, xb, x_assign_bitwise_and))
    assert tu.emit_to_string() == pat('a ? b : (x &= y);')

    tu = ef(b, b.expr_index(x_assign_bitwise_xor, xa))
    assert tu.emit_to_string() == pat('(x ^= y)[a];')
    tu = ef(b, b.expr_call(x_assign_bitwise_xor, [xa]))
    assert tu.emit_to_string() == pat('(x ^= y)(a);')
    tu = ef(b, b.expr_direct_member(x_assign_bitwise_xor, 'f'))
    assert tu.emit_to_string() == pat('(x ^= y).f;')
    tu = ef(b, b.expr_indirect_member(x_assign_bitwise_xor, 'g'))
    assert tu.emit_to_string() == pat('(x ^= y)->g;')
    tu = ef(b, b.expr_post_inc(x_assign_bitwise_xor))
    assert tu.emit_to_string() == pat('(x ^= y)++;')
    tu = ef(b, b.expr_post_dec(x_assign_bitwise_xor))
    assert tu.emit_to_string() == pat('(x ^= y)--;')
    tu = ef(b, b.expr_pre_inc(x_assign_bitwise_xor))
    assert tu.emit_to_string() == pat('++(x ^= y);')
    tu = ef(b, b.expr_pre_dec(x_assign_bitwise_xor))
    assert tu.emit_to_string() == pat('--(x ^= y);')
    tu = ef(b, b.expr_addressof(x_assign_bitwise_xor))
    assert tu.emit_to_string() == pat('&(x ^= y);')
    tu = ef(b, b.expr_deref(x_assign_bitwise_xor))
    assert tu.emit_to_string() == pat('*(x ^= y);')
    tu = ef(b, b.expr_unary_plus(x_assign_bitwise_xor))
    assert tu.emit_to_string() == pat('+(x ^= y);')
    tu = ef(b, b.expr_unary_minus(x_assign_bitwise_xor))
    assert tu.emit_to_string() == pat('-(x ^= y);')
    tu = ef(b, b.expr_bitwise_not(x_assign_bitwise_xor))
    assert tu.emit_to_string() == pat('~(x ^= y);')
    tu = ef(b, b.expr_logical_not(x_assign_bitwise_xor))
    assert tu.emit_to_string() == pat('!(x ^= y);')
    tu = ef(b, b.expr_sizeof_expr(x_assign_bitwise_xor))
    assert tu.emit_to_string() == pat('sizeof(x ^= y);')
    tu = ef(b, b.expr_cast(tv, x_assign_bitwise_xor))
    assert tu.emit_to_string() == pat('(V)(x ^= y);')
    tu = ef(b, b.expr_times(x_assign_bitwise_xor, xa))
    assert tu.emit_to_string() == pat('(x ^= y) * a;')
    tu = ef(b, b.expr_divide(x_assign_bitwise_xor, xa))
    assert tu.emit_to_string() == pat('(x ^= y) / a;')
    tu = ef(b, b.expr_modulus(x_assign_bitwise_xor, xa))
    assert tu.emit_to_string() == pat('(x ^= y) % a;')
    tu = ef(b, b.expr_plus(x_assign_bitwise_xor, xa))
    assert tu.emit_to_string() == pat('(x ^= y) + a;')
    tu = ef(b, b.expr_minus(x_assign_bitwise_xor, xa))
    assert tu.emit_to_string() == pat('(x ^= y) - a;')
    tu = ef(b, b.expr_lshift(x_assign_bitwise_xor, xa))
    assert tu.emit_to_string() == pat('(x ^= y) << a;')
    tu = ef(b, b.expr_rshift(x_assign_bitwise_xor, xa))
    assert tu.emit_to_string() == pat('(x ^= y) >> a;')
    tu = ef(b, b.expr_cmp_lt(x_assign_bitwise_xor, xa))
    assert tu.emit_to_string() == pat('(x ^= y) < a;')
    tu = ef(b, b.expr_cmp_gt(x_assign_bitwise_xor, xa))
    assert tu.emit_to_string() == pat('(x ^= y) > a;')
    tu = ef(b, b.expr_cmp_le(x_assign_bitwise_xor, xa))
    assert tu.emit_to_string() == pat('(x ^= y) <= a;')
    tu = ef(b, b.expr_cmp_ge(x_assign_bitwise_xor, xa))
    assert tu.emit_to_string() == pat('(x ^= y) >= a;')
    tu = ef(b, b.expr_cmp_eq(x_assign_bitwise_xor, xa))
    assert tu.emit_to_string() == pat('(x ^= y) == a;')
    tu = ef(b, b.expr_cmp_ne(x_assign_bitwise_xor, xa))
    assert tu.emit_to_string() == pat('(x ^= y) != a;')
    tu = ef(b, b.expr_bitwise_and(x_assign_bitwise_xor, xa))
    assert tu.emit_to_string() == pat('(x ^= y) & a;')
    tu = ef(b, b.expr_bitwise_xor(x_assign_bitwise_xor, xa))
    assert tu.emit_to_string() == pat('(x ^= y) ^ a;')
    tu = ef(b, b.expr_bitwise_or(x_assign_bitwise_xor, xa))
    assert tu.emit_to_string() == pat('(x ^= y) | a;')
    tu = ef(b, b.expr_logical_and(x_assign_bitwise_xor, xa))
    assert tu.emit_to_string() == pat('(x ^= y) && a;')
    tu = ef(b, b.expr_logical_or(x_assign_bitwise_xor, xa))
    assert tu.emit_to_string() == pat('(x ^= y) || a;')
    tu = ef(b, b.expr_conditional(x_assign_bitwise_xor, xa, xb))
    assert tu.emit_to_string() == pat('(x ^= y) ? a : b;')
    tu = ef(b, b.expr_assign(x_assign_bitwise_xor, xa))
    assert tu.emit_to_string() == pat('(x ^= y) = a;')
    tu = ef(b, b.expr_assign_times(x_assign_bitwise_xor, xa))
    assert tu.emit_to_string() == pat('(x ^= y) *= a;')
    tu = ef(b, b.expr_assign_divide(x_assign_bitwise_xor, xa))
    assert tu.emit_to_string() == pat('(x ^= y) /= a;')
    tu = ef(b, b.expr_assign_modulus(x_assign_bitwise_xor, xa))
    assert tu.emit_to_string() == pat('(x ^= y) %= a;')
    tu = ef(b, b.expr_assign_plus(x_assign_bitwise_xor, xa))
    assert tu.emit_to_string() == pat('(x ^= y) += a;')
    tu = ef(b, b.expr_assign_minus(x_assign_bitwise_xor, xa))
    assert tu.emit_to_string() == pat('(x ^= y) -= a;')
    tu = ef(b, b.expr_assign_lshift(x_assign_bitwise_xor, xa))
    assert tu.emit_to_string() == pat('(x ^= y) <<= a;')
    tu = ef(b, b.expr_assign_rshift(x_assign_bitwise_xor, xa))
    assert tu.emit_to_string() == pat('(x ^= y) >>= a;')
    tu = ef(b, b.expr_assign_bitwise_and(x_assign_bitwise_xor, xa))
    assert tu.emit_to_string() == pat('(x ^= y) &= a;')
    tu = ef(b, b.expr_assign_bitwise_xor(x_assign_bitwise_xor, xa))
    assert tu.emit_to_string() == pat('(x ^= y) ^= a;')
    tu = ef(b, b.expr_assign_bitwise_or(x_assign_bitwise_xor, xa))
    assert tu.emit_to_string() == pat('(x ^= y) |= a;')
    tu = ef(b, b.expr_comma(x_assign_bitwise_xor, xa))
    assert tu.emit_to_string() == pat('x ^= y, a;')
    tu = ef(b, b.expr_index(xa, x_assign_bitwise_xor))
    assert tu.emit_to_string() == pat('a[x ^= y];')
    tu = ef(b, b.expr_call(xa, [x_assign_bitwise_xor]))
    assert tu.emit_to_string() == pat('a(x ^= y);')
    tu = ef(b, b.expr_times(xa, x_assign_bitwise_xor))
    assert tu.emit_to_string() == pat('a * (x ^= y);')
    tu = ef(b, b.expr_divide(xa, x_assign_bitwise_xor))
    assert tu.emit_to_string() == pat('a / (x ^= y);')
    tu = ef(b, b.expr_modulus(xa, x_assign_bitwise_xor))
    assert tu.emit_to_string() == pat('a % (x ^= y);')
    tu = ef(b, b.expr_plus(xa, x_assign_bitwise_xor))
    assert tu.emit_to_string() == pat('a + (x ^= y);')
    tu = ef(b, b.expr_minus(xa, x_assign_bitwise_xor))
    assert tu.emit_to_string() == pat('a - (x ^= y);')
    tu = ef(b, b.expr_lshift(xa, x_assign_bitwise_xor))
    assert tu.emit_to_string() == pat('a << (x ^= y);')
    tu = ef(b, b.expr_rshift(xa, x_assign_bitwise_xor))
    assert tu.emit_to_string() == pat('a >> (x ^= y);')
    tu = ef(b, b.expr_cmp_lt(xa, x_assign_bitwise_xor))
    assert tu.emit_to_string() == pat('a < (x ^= y);')
    tu = ef(b, b.expr_cmp_gt(xa, x_assign_bitwise_xor))
    assert tu.emit_to_string() == pat('a > (x ^= y);')
    tu = ef(b, b.expr_cmp_le(xa, x_assign_bitwise_xor))
    assert tu.emit_to_string() == pat('a <= (x ^= y);')
    tu = ef(b, b.expr_cmp_ge(xa, x_assign_bitwise_xor))
    assert tu.emit_to_string() == pat('a >= (x ^= y);')
    tu = ef(b, b.expr_cmp_eq(xa, x_assign_bitwise_xor))
    assert tu.emit_to_string() == pat('a == (x ^= y);')
    tu = ef(b, b.expr_cmp_ne(xa, x_assign_bitwise_xor))
    assert tu.emit_to_string() == pat('a != (x ^= y);')
    tu = ef(b, b.expr_bitwise_and(xa, x_assign_bitwise_xor))
    assert tu.emit_to_string() == pat('a & (x ^= y);')
    tu = ef(b, b.expr_bitwise_xor(xa, x_assign_bitwise_xor))
    assert tu.emit_to_string() == pat('a ^ (x ^= y);')
    tu = ef(b, b.expr_bitwise_or(xa, x_assign_bitwise_xor))
    assert tu.emit_to_string() == pat('a | (x ^= y);')
    tu = ef(b, b.expr_logical_and(xa, x_assign_bitwise_xor))
    assert tu.emit_to_string() == pat('a && (x ^= y);')
    tu = ef(b, b.expr_logical_or(xa, x_assign_bitwise_xor))
    assert tu.emit_to_string() == pat('a || (x ^= y);')
    tu = ef(b, b.expr_conditional(xa, x_assign_bitwise_xor, xb))
    assert tu.emit_to_string() == pat('a ? x ^= y : b;')
    tu = ef(b, b.expr_assign(xa, x_assign_bitwise_xor))
    assert tu.emit_to_string() == pat('a = x ^= y;')
    tu = ef(b, b.expr_assign_times(xa, x_assign_bitwise_xor))
    assert tu.emit_to_string() == pat('a *= x ^= y;')
    tu = ef(b, b.expr_assign_divide(xa, x_assign_bitwise_xor))
    assert tu.emit_to_string() == pat('a /= x ^= y;')
    tu = ef(b, b.expr_assign_modulus(xa, x_assign_bitwise_xor))
    assert tu.emit_to_string() == pat('a %= x ^= y;')
    tu = ef(b, b.expr_assign_plus(xa, x_assign_bitwise_xor))
    assert tu.emit_to_string() == pat('a += x ^= y;')
    tu = ef(b, b.expr_assign_minus(xa, x_assign_bitwise_xor))
    assert tu.emit_to_string() == pat('a -= x ^= y;')
    tu = ef(b, b.expr_assign_lshift(xa, x_assign_bitwise_xor))
    assert tu.emit_to_string() == pat('a <<= x ^= y;')
    tu = ef(b, b.expr_assign_rshift(xa, x_assign_bitwise_xor))
    assert tu.emit_to_string() == pat('a >>= x ^= y;')
    tu = ef(b, b.expr_assign_bitwise_and(xa, x_assign_bitwise_xor))
    assert tu.emit_to_string() == pat('a &= x ^= y;')
    tu = ef(b, b.expr_assign_bitwise_xor(xa, x_assign_bitwise_xor))
    assert tu.emit_to_string() == pat('a ^= x ^= y;')
    tu = ef(b, b.expr_assign_bitwise_or(xa, x_assign_bitwise_xor))
    assert tu.emit_to_string() == pat('a |= x ^= y;')
    tu = ef(b, b.expr_comma(xa, x_assign_bitwise_xor))
    assert tu.emit_to_string() == pat('a, x ^= y;')
    tu = ef(b, b.expr_conditional(xa, xb, x_assign_bitwise_xor))
    assert tu.emit_to_string() == pat('a ? b : (x ^= y);')

    tu = ef(b, b.expr_index(x_assign_bitwise_or, xa))
    assert tu.emit_to_string() == pat('(x |= y)[a];')
    tu = ef(b, b.expr_call(x_assign_bitwise_or, [xa]))
    assert tu.emit_to_string() == pat('(x |= y)(a);')
    tu = ef(b, b.expr_direct_member(x_assign_bitwise_or, 'f'))
    assert tu.emit_to_string() == pat('(x |= y).f;')
    tu = ef(b, b.expr_indirect_member(x_assign_bitwise_or, 'g'))
    assert tu.emit_to_string() == pat('(x |= y)->g;')
    tu = ef(b, b.expr_post_inc(x_assign_bitwise_or))
    assert tu.emit_to_string() == pat('(x |= y)++;')
    tu = ef(b, b.expr_post_dec(x_assign_bitwise_or))
    assert tu.emit_to_string() == pat('(x |= y)--;')
    tu = ef(b, b.expr_pre_inc(x_assign_bitwise_or))
    assert tu.emit_to_string() == pat('++(x |= y);')
    tu = ef(b, b.expr_pre_dec(x_assign_bitwise_or))
    assert tu.emit_to_string() == pat('--(x |= y);')
    tu = ef(b, b.expr_addressof(x_assign_bitwise_or))
    assert tu.emit_to_string() == pat('&(x |= y);')
    tu = ef(b, b.expr_deref(x_assign_bitwise_or))
    assert tu.emit_to_string() == pat('*(x |= y);')
    tu = ef(b, b.expr_unary_plus(x_assign_bitwise_or))
    assert tu.emit_to_string() == pat('+(x |= y);')
    tu = ef(b, b.expr_unary_minus(x_assign_bitwise_or))
    assert tu.emit_to_string() == pat('-(x |= y);')
    tu = ef(b, b.expr_bitwise_not(x_assign_bitwise_or))
    assert tu.emit_to_string() == pat('~(x |= y);')
    tu = ef(b, b.expr_logical_not(x_assign_bitwise_or))
    assert tu.emit_to_string() == pat('!(x |= y);')
    tu = ef(b, b.expr_sizeof_expr(x_assign_bitwise_or))
    assert tu.emit_to_string() == pat('sizeof(x |= y);')
    tu = ef(b, b.expr_cast(tv, x_assign_bitwise_or))
    assert tu.emit_to_string() == pat('(V)(x |= y);')
    tu = ef(b, b.expr_times(x_assign_bitwise_or, xa))
    assert tu.emit_to_string() == pat('(x |= y) * a;')
    tu = ef(b, b.expr_divide(x_assign_bitwise_or, xa))
    assert tu.emit_to_string() == pat('(x |= y) / a;')
    tu = ef(b, b.expr_modulus(x_assign_bitwise_or, xa))
    assert tu.emit_to_string() == pat('(x |= y) % a;')
    tu = ef(b, b.expr_plus(x_assign_bitwise_or, xa))
    assert tu.emit_to_string() == pat('(x |= y) + a;')
    tu = ef(b, b.expr_minus(x_assign_bitwise_or, xa))
    assert tu.emit_to_string() == pat('(x |= y) - a;')
    tu = ef(b, b.expr_lshift(x_assign_bitwise_or, xa))
    assert tu.emit_to_string() == pat('(x |= y) << a;')
    tu = ef(b, b.expr_rshift(x_assign_bitwise_or, xa))
    assert tu.emit_to_string() == pat('(x |= y) >> a;')
    tu = ef(b, b.expr_cmp_lt(x_assign_bitwise_or, xa))
    assert tu.emit_to_string() == pat('(x |= y) < a;')
    tu = ef(b, b.expr_cmp_gt(x_assign_bitwise_or, xa))
    assert tu.emit_to_string() == pat('(x |= y) > a;')
    tu = ef(b, b.expr_cmp_le(x_assign_bitwise_or, xa))
    assert tu.emit_to_string() == pat('(x |= y) <= a;')
    tu = ef(b, b.expr_cmp_ge(x_assign_bitwise_or, xa))
    assert tu.emit_to_string() == pat('(x |= y) >= a;')
    tu = ef(b, b.expr_cmp_eq(x_assign_bitwise_or, xa))
    assert tu.emit_to_string() == pat('(x |= y) == a;')
    tu = ef(b, b.expr_cmp_ne(x_assign_bitwise_or, xa))
    assert tu.emit_to_string() == pat('(x |= y) != a;')
    tu = ef(b, b.expr_bitwise_and(x_assign_bitwise_or, xa))
    assert tu.emit_to_string() == pat('(x |= y) & a;')
    tu = ef(b, b.expr_bitwise_xor(x_assign_bitwise_or, xa))
    assert tu.emit_to_string() == pat('(x |= y) ^ a;')
    tu = ef(b, b.expr_bitwise_or(x_assign_bitwise_or, xa))
    assert tu.emit_to_string() == pat('(x |= y) | a;')
    tu = ef(b, b.expr_logical_and(x_assign_bitwise_or, xa))
    assert tu.emit_to_string() == pat('(x |= y) && a;')
    tu = ef(b, b.expr_logical_or(x_assign_bitwise_or, xa))
    assert tu.emit_to_string() == pat('(x |= y) || a;')
    tu = ef(b, b.expr_conditional(x_assign_bitwise_or, xa, xb))
    assert tu.emit_to_string() == pat('(x |= y) ? a : b;')
    tu = ef(b, b.expr_assign(x_assign_bitwise_or, xa))
    assert tu.emit_to_string() == pat('(x |= y) = a;')
    tu = ef(b, b.expr_assign_times(x_assign_bitwise_or, xa))
    assert tu.emit_to_string() == pat('(x |= y) *= a;')
    tu = ef(b, b.expr_assign_divide(x_assign_bitwise_or, xa))
    assert tu.emit_to_string() == pat('(x |= y) /= a;')
    tu = ef(b, b.expr_assign_modulus(x_assign_bitwise_or, xa))
    assert tu.emit_to_string() == pat('(x |= y) %= a;')
    tu = ef(b, b.expr_assign_plus(x_assign_bitwise_or, xa))
    assert tu.emit_to_string() == pat('(x |= y) += a;')
    tu = ef(b, b.expr_assign_minus(x_assign_bitwise_or, xa))
    assert tu.emit_to_string() == pat('(x |= y) -= a;')
    tu = ef(b, b.expr_assign_lshift(x_assign_bitwise_or, xa))
    assert tu.emit_to_string() == pat('(x |= y) <<= a;')
    tu = ef(b, b.expr_assign_rshift(x_assign_bitwise_or, xa))
    assert tu.emit_to_string() == pat('(x |= y) >>= a;')
    tu = ef(b, b.expr_assign_bitwise_and(x_assign_bitwise_or, xa))
    assert tu.emit_to_string() == pat('(x |= y) &= a;')
    tu = ef(b, b.expr_assign_bitwise_xor(x_assign_bitwise_or, xa))
    assert tu.emit_to_string() == pat('(x |= y) ^= a;')
    tu = ef(b, b.expr_assign_bitwise_or(x_assign_bitwise_or, xa))
    assert tu.emit_to_string() == pat('(x |= y) |= a;')
    tu = ef(b, b.expr_comma(x_assign_bitwise_or, xa))
    assert tu.emit_to_string() == pat('x |= y, a;')
    tu = ef(b, b.expr_index(xa, x_assign_bitwise_or))
    assert tu.emit_to_string() == pat('a[x |= y];')
    tu = ef(b, b.expr_call(xa, [x_assign_bitwise_or]))
    assert tu.emit_to_string() == pat('a(x |= y);')
    tu = ef(b, b.expr_times(xa, x_assign_bitwise_or))
    assert tu.emit_to_string() == pat('a * (x |= y);')
    tu = ef(b, b.expr_divide(xa, x_assign_bitwise_or))
    assert tu.emit_to_string() == pat('a / (x |= y);')
    tu = ef(b, b.expr_modulus(xa, x_assign_bitwise_or))
    assert tu.emit_to_string() == pat('a % (x |= y);')
    tu = ef(b, b.expr_plus(xa, x_assign_bitwise_or))
    assert tu.emit_to_string() == pat('a + (x |= y);')
    tu = ef(b, b.expr_minus(xa, x_assign_bitwise_or))
    assert tu.emit_to_string() == pat('a - (x |= y);')
    tu = ef(b, b.expr_lshift(xa, x_assign_bitwise_or))
    assert tu.emit_to_string() == pat('a << (x |= y);')
    tu = ef(b, b.expr_rshift(xa, x_assign_bitwise_or))
    assert tu.emit_to_string() == pat('a >> (x |= y);')
    tu = ef(b, b.expr_cmp_lt(xa, x_assign_bitwise_or))
    assert tu.emit_to_string() == pat('a < (x |= y);')
    tu = ef(b, b.expr_cmp_gt(xa, x_assign_bitwise_or))
    assert tu.emit_to_string() == pat('a > (x |= y);')
    tu = ef(b, b.expr_cmp_le(xa, x_assign_bitwise_or))
    assert tu.emit_to_string() == pat('a <= (x |= y);')
    tu = ef(b, b.expr_cmp_ge(xa, x_assign_bitwise_or))
    assert tu.emit_to_string() == pat('a >= (x |= y);')
    tu = ef(b, b.expr_cmp_eq(xa, x_assign_bitwise_or))
    assert tu.emit_to_string() == pat('a == (x |= y);')
    tu = ef(b, b.expr_cmp_ne(xa, x_assign_bitwise_or))
    assert tu.emit_to_string() == pat('a != (x |= y);')
    tu = ef(b, b.expr_bitwise_and(xa, x_assign_bitwise_or))
    assert tu.emit_to_string() == pat('a & (x |= y);')
    tu = ef(b, b.expr_bitwise_xor(xa, x_assign_bitwise_or))
    assert tu.emit_to_string() == pat('a ^ (x |= y);')
    tu = ef(b, b.expr_bitwise_or(xa, x_assign_bitwise_or))
    assert tu.emit_to_string() == pat('a | (x |= y);')
    tu = ef(b, b.expr_logical_and(xa, x_assign_bitwise_or))
    assert tu.emit_to_string() == pat('a && (x |= y);')
    tu = ef(b, b.expr_logical_or(xa, x_assign_bitwise_or))
    assert tu.emit_to_string() == pat('a || (x |= y);')
    tu = ef(b, b.expr_conditional(xa, x_assign_bitwise_or, xb))
    assert tu.emit_to_string() == pat('a ? x |= y : b;')
    tu = ef(b, b.expr_assign(xa, x_assign_bitwise_or))
    assert tu.emit_to_string() == pat('a = x |= y;')
    tu = ef(b, b.expr_assign_times(xa, x_assign_bitwise_or))
    assert tu.emit_to_string() == pat('a *= x |= y;')
    tu = ef(b, b.expr_assign_divide(xa, x_assign_bitwise_or))
    assert tu.emit_to_string() == pat('a /= x |= y;')
    tu = ef(b, b.expr_assign_modulus(xa, x_assign_bitwise_or))
    assert tu.emit_to_string() == pat('a %= x |= y;')
    tu = ef(b, b.expr_assign_plus(xa, x_assign_bitwise_or))
    assert tu.emit_to_string() == pat('a += x |= y;')
    tu = ef(b, b.expr_assign_minus(xa, x_assign_bitwise_or))
    assert tu.emit_to_string() == pat('a -= x |= y;')
    tu = ef(b, b.expr_assign_lshift(xa, x_assign_bitwise_or))
    assert tu.emit_to_string() == pat('a <<= x |= y;')
    tu = ef(b, b.expr_assign_rshift(xa, x_assign_bitwise_or))
    assert tu.emit_to_string() == pat('a >>= x |= y;')
    tu = ef(b, b.expr_assign_bitwise_and(xa, x_assign_bitwise_or))
    assert tu.emit_to_string() == pat('a &= x |= y;')
    tu = ef(b, b.expr_assign_bitwise_xor(xa, x_assign_bitwise_or))
    assert tu.emit_to_string() == pat('a ^= x |= y;')
    tu = ef(b, b.expr_assign_bitwise_or(xa, x_assign_bitwise_or))
    assert tu.emit_to_string() == pat('a |= x |= y;')
    tu = ef(b, b.expr_comma(xa, x_assign_bitwise_or))
    assert tu.emit_to_string() == pat('a, x |= y;')
    tu = ef(b, b.expr_conditional(xa, xb, x_assign_bitwise_or))
    assert tu.emit_to_string() == pat('a ? b : (x |= y);')

    tu = ef(b, b.expr_index(x_comma, xa))
    assert tu.emit_to_string() == pat('(x, y)[a];')
    tu = ef(b, b.expr_call(x_comma, [xa]))
    assert tu.emit_to_string() == pat('(x, y)(a);')
    tu = ef(b, b.expr_direct_member(x_comma, 'f'))
    assert tu.emit_to_string() == pat('(x, y).f;')
    tu = ef(b, b.expr_indirect_member(x_comma, 'g'))
    assert tu.emit_to_string() == pat('(x, y)->g;')
    tu = ef(b, b.expr_post_inc(x_comma))
    assert tu.emit_to_string() == pat('(x, y)++;')
    tu = ef(b, b.expr_post_dec(x_comma))
    assert tu.emit_to_string() == pat('(x, y)--;')
    tu = ef(b, b.expr_pre_inc(x_comma))
    assert tu.emit_to_string() == pat('++(x, y);')
    tu = ef(b, b.expr_pre_dec(x_comma))
    assert tu.emit_to_string() == pat('--(x, y);')
    tu = ef(b, b.expr_addressof(x_comma))
    assert tu.emit_to_string() == pat('&(x, y);')
    tu = ef(b, b.expr_deref(x_comma))
    assert tu.emit_to_string() == pat('*(x, y);')
    tu = ef(b, b.expr_unary_plus(x_comma))
    assert tu.emit_to_string() == pat('+(x, y);')
    tu = ef(b, b.expr_unary_minus(x_comma))
    assert tu.emit_to_string() == pat('-(x, y);')
    tu = ef(b, b.expr_bitwise_not(x_comma))
    assert tu.emit_to_string() == pat('~(x, y);')
    tu = ef(b, b.expr_logical_not(x_comma))
    assert tu.emit_to_string() == pat('!(x, y);')
    tu = ef(b, b.expr_sizeof_expr(x_comma))
    assert tu.emit_to_string() == pat('sizeof(x, y);')
    tu = ef(b, b.expr_cast(tv, x_comma))
    assert tu.emit_to_string() == pat('(V)(x, y);')
    tu = ef(b, b.expr_times(x_comma, xa))
    assert tu.emit_to_string() == pat('(x, y) * a;')
    tu = ef(b, b.expr_divide(x_comma, xa))
    assert tu.emit_to_string() == pat('(x, y) / a;')
    tu = ef(b, b.expr_modulus(x_comma, xa))
    assert tu.emit_to_string() == pat('(x, y) % a;')
    tu = ef(b, b.expr_plus(x_comma, xa))
    assert tu.emit_to_string() == pat('(x, y) + a;')
    tu = ef(b, b.expr_minus(x_comma, xa))
    assert tu.emit_to_string() == pat('(x, y) - a;')
    tu = ef(b, b.expr_lshift(x_comma, xa))
    assert tu.emit_to_string() == pat('(x, y) << a;')
    tu = ef(b, b.expr_rshift(x_comma, xa))
    assert tu.emit_to_string() == pat('(x, y) >> a;')
    tu = ef(b, b.expr_cmp_lt(x_comma, xa))
    assert tu.emit_to_string() == pat('(x, y) < a;')
    tu = ef(b, b.expr_cmp_gt(x_comma, xa))
    assert tu.emit_to_string() == pat('(x, y) > a;')
    tu = ef(b, b.expr_cmp_le(x_comma, xa))
    assert tu.emit_to_string() == pat('(x, y) <= a;')
    tu = ef(b, b.expr_cmp_ge(x_comma, xa))
    assert tu.emit_to_string() == pat('(x, y) >= a;')
    tu = ef(b, b.expr_cmp_eq(x_comma, xa))
    assert tu.emit_to_string() == pat('(x, y) == a;')
    tu = ef(b, b.expr_cmp_ne(x_comma, xa))
    assert tu.emit_to_string() == pat('(x, y) != a;')
    tu = ef(b, b.expr_bitwise_and(x_comma, xa))
    assert tu.emit_to_string() == pat('(x, y) & a;')
    tu = ef(b, b.expr_bitwise_xor(x_comma, xa))
    assert tu.emit_to_string() == pat('(x, y) ^ a;')
    tu = ef(b, b.expr_bitwise_or(x_comma, xa))
    assert tu.emit_to_string() == pat('(x, y) | a;')
    tu = ef(b, b.expr_logical_and(x_comma, xa))
    assert tu.emit_to_string() == pat('(x, y) && a;')
    tu = ef(b, b.expr_logical_or(x_comma, xa))
    assert tu.emit_to_string() == pat('(x, y) || a;')
    tu = ef(b, b.expr_conditional(x_comma, xa, xb))
    assert tu.emit_to_string() == pat('(x, y) ? a : b;')
    tu = ef(b, b.expr_assign(x_comma, xa))
    assert tu.emit_to_string() == pat('(x, y) = a;')
    tu = ef(b, b.expr_assign_times(x_comma, xa))
    assert tu.emit_to_string() == pat('(x, y) *= a;')
    tu = ef(b, b.expr_assign_divide(x_comma, xa))
    assert tu.emit_to_string() == pat('(x, y) /= a;')
    tu = ef(b, b.expr_assign_modulus(x_comma, xa))
    assert tu.emit_to_string() == pat('(x, y) %= a;')
    tu = ef(b, b.expr_assign_plus(x_comma, xa))
    assert tu.emit_to_string() == pat('(x, y) += a;')
    tu = ef(b, b.expr_assign_minus(x_comma, xa))
    assert tu.emit_to_string() == pat('(x, y) -= a;')
    tu = ef(b, b.expr_assign_lshift(x_comma, xa))
    assert tu.emit_to_string() == pat('(x, y) <<= a;')
    tu = ef(b, b.expr_assign_rshift(x_comma, xa))
    assert tu.emit_to_string() == pat('(x, y) >>= a;')
    tu = ef(b, b.expr_assign_bitwise_and(x_comma, xa))
    assert tu.emit_to_string() == pat('(x, y) &= a;')
    tu = ef(b, b.expr_assign_bitwise_xor(x_comma, xa))
    assert tu.emit_to_string() == pat('(x, y) ^= a;')
    tu = ef(b, b.expr_assign_bitwise_or(x_comma, xa))
    assert tu.emit_to_string() == pat('(x, y) |= a;')
    tu = ef(b, b.expr_comma(x_comma, xa))
    assert tu.emit_to_string() == pat('x, y, a;')
    tu = ef(b, b.expr_index(xa, x_comma))
    assert tu.emit_to_string() == pat('a[x, y];')
    tu = ef(b, b.expr_call(xa, [x_comma]))
    assert tu.emit_to_string() == pat('a((x, y));')
    tu = ef(b, b.expr_times(xa, x_comma))
    assert tu.emit_to_string() == pat('a * (x, y);')
    tu = ef(b, b.expr_divide(xa, x_comma))
    assert tu.emit_to_string() == pat('a / (x, y);')
    tu = ef(b, b.expr_modulus(xa, x_comma))
    assert tu.emit_to_string() == pat('a % (x, y);')
    tu = ef(b, b.expr_plus(xa, x_comma))
    assert tu.emit_to_string() == pat('a + (x, y);')
    tu = ef(b, b.expr_minus(xa, x_comma))
    assert tu.emit_to_string() == pat('a - (x, y);')
    tu = ef(b, b.expr_lshift(xa, x_comma))
    assert tu.emit_to_string() == pat('a << (x, y);')
    tu = ef(b, b.expr_rshift(xa, x_comma))
    assert tu.emit_to_string() == pat('a >> (x, y);')
    tu = ef(b, b.expr_cmp_lt(xa, x_comma))
    assert tu.emit_to_string() == pat('a < (x, y);')
    tu = ef(b, b.expr_cmp_gt(xa, x_comma))
    assert tu.emit_to_string() == pat('a > (x, y);')
    tu = ef(b, b.expr_cmp_le(xa, x_comma))
    assert tu.emit_to_string() == pat('a <= (x, y);')
    tu = ef(b, b.expr_cmp_ge(xa, x_comma))
    assert tu.emit_to_string() == pat('a >= (x, y);')
    tu = ef(b, b.expr_cmp_eq(xa, x_comma))
    assert tu.emit_to_string() == pat('a == (x, y);')
    tu = ef(b, b.expr_cmp_ne(xa, x_comma))
    assert tu.emit_to_string() == pat('a != (x, y);')
    tu = ef(b, b.expr_bitwise_and(xa, x_comma))
    assert tu.emit_to_string() == pat('a & (x, y);')
    tu = ef(b, b.expr_bitwise_xor(xa, x_comma))
    assert tu.emit_to_string() == pat('a ^ (x, y);')
    tu = ef(b, b.expr_bitwise_or(xa, x_comma))
    assert tu.emit_to_string() == pat('a | (x, y);')
    tu = ef(b, b.expr_logical_and(xa, x_comma))
    assert tu.emit_to_string() == pat('a && (x, y);')
    tu = ef(b, b.expr_logical_or(xa, x_comma))
    assert tu.emit_to_string() == pat('a || (x, y);')
    tu = ef(b, b.expr_conditional(xa, x_comma, xb))
    assert tu.emit_to_string() == pat('a ? x, y : b;')
    tu = ef(b, b.expr_assign(xa, x_comma))
    assert tu.emit_to_string() == pat('a = (x, y);')
    tu = ef(b, b.expr_assign_times(xa, x_comma))
    assert tu.emit_to_string() == pat('a *= (x, y);')
    tu = ef(b, b.expr_assign_divide(xa, x_comma))
    assert tu.emit_to_string() == pat('a /= (x, y);')
    tu = ef(b, b.expr_assign_modulus(xa, x_comma))
    assert tu.emit_to_string() == pat('a %= (x, y);')
    tu = ef(b, b.expr_assign_plus(xa, x_comma))
    assert tu.emit_to_string() == pat('a += (x, y);')
    tu = ef(b, b.expr_assign_minus(xa, x_comma))
    assert tu.emit_to_string() == pat('a -= (x, y);')
    tu = ef(b, b.expr_assign_lshift(xa, x_comma))
    assert tu.emit_to_string() == pat('a <<= (x, y);')
    tu = ef(b, b.expr_assign_rshift(xa, x_comma))
    assert tu.emit_to_string() == pat('a >>= (x, y);')
    tu = ef(b, b.expr_assign_bitwise_and(xa, x_comma))
    assert tu.emit_to_string() == pat('a &= (x, y);')
    tu = ef(b, b.expr_assign_bitwise_xor(xa, x_comma))
    assert tu.emit_to_string() == pat('a ^= (x, y);')
    tu = ef(b, b.expr_assign_bitwise_or(xa, x_comma))
    assert tu.emit_to_string() == pat('a |= (x, y);')
    tu = ef(b, b.expr_comma(xa, x_comma))
    assert tu.emit_to_string() == pat('a, (x, y);')
    tu = ef(b, b.expr_conditional(xa, xb, x_comma))
    assert tu.emit_to_string() == pat('a ? b : (x, y);')
