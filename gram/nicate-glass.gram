language nicate-glass

whitespace [\n\x20]+

keyword break
keyword case
keyword continue
keyword default
keyword do
keyword else
keyword enum
#keyword for
keyword fun
keyword goto
keyword if
keyword let
keyword return
keyword struct
keyword switch
keyword union
keyword while

atom comment \#[^\n]*
atom id [A-Za-z_][A-Za-z_0-9]*
atom decimal-floating-literal (([0-9]+\.|[0-9]*\.[0-9]+)([eE][-+]?[0-9]+)?|[0-9]+([eE][-+]?[0-9]+))[fFlL]?
atom hexadecimal-floating-literal 0[xX]([0-9a-fA-F]*\.[0-9a-fA-F]|[0-9a-fA-F]+\.?)(p[-+]?[0-9]+)[fFlL]?
atom decimal-literal [1-9][0-9]*
atom octal-literal 0[oO]?[0-7]*
atom hexadecimal-literal 0[xX][0-9a-fA-F]+
atom binary-literal 0[bB][01]+
atom character-literal \'([^\\']|\\.)*\'
atom string-literal \"([^\\"]|\\.)*\"

symbol '[' lbracket
symbol ']' rbracket
symbol '(' lparen
symbol ')' rparen
symbol '{' lbrace
symbol '}' rbrace
symbol '.' dot
symbol '...' ellipsis
symbol '->' arrow
symbol '++' incr
symbol '--' decr
symbol '&' ampersand
symbol '*' star
symbol '+' plus
symbol '-' minus
symbol '~' tilde
symbol '!' bang
symbol '/' slash
symbol '%' percent
symbol '<<' lshift
symbol '>>' rshift
symbol '<' lt
symbol '>' gt
symbol '<=' le
symbol '>=' ge
symbol '==' eq
symbol '!=' ne
symbol '^' caret
symbol '|' pipe
symbol '&&' logical-and
symbol '||' logical-or
#symbol '?' query
symbol ':' colon
symbol '=' be
symbol '*=' star-be
symbol '/=' slash-be
symbol '%=' percent-be
symbol '+=' plus-be
symbol '-=' minus-be
symbol '<<=' lshift-be
symbol '>>=' rshift-be
symbol '&=' ampersand-be
symbol '^=' caret-be
symbol '|=' pipe-be
symbol ',' comma
symbol ';' semicolon
symbol '@' at

start tu

tu:
    tu? stmt
attr:
    '@' id '('? expr-list= ')'=
stmt:
    attr-stmt
    noattr-stmt
attr-stmt:
    attr attr-stmt                                          #annotated-stmt
    union id maybe-struct-body                              #union-stmt
    struct id maybe-struct-body                             #struct-stmt
    enum id maybe-enum-body                                 #enum-stmt
    fun id fun-sig maybe-compound-stmt                      #fun-stmt
    let typed-id ';'                                        #declaration
    let maybe-typed-id '=' expr ';'                         #initialized-declaration
    ';'
noattr-stmt:
    comment
    assign ';'                                              #expr-stmt
    id ':' stmt                                             #labeled-stmt
    default ':' stmt                                        #default-stmt
    case expr ':' stmt                                      #case-stmt
    while '(' expr ')' compound-stmt                        #while-stmt
    do compound-stmt while '(' expr ')' ';'                 #do-stmt
    goto id ';'                                             #goto-stmt
    break ';'                                               #break-stmt
    continue ';'                                            #continue-stmt
    return expr? ';'                                        #return-stmt
    switch '(' expr ')' compound-stmt                       #switch-stmt
    if-or-compound-stmt
if-or-compound-stmt:
    compound-stmt
    if '(' expr ')' compound-stmt                           #if-stmt
    if '(' expr ')' compound-stmt else if-or-compound-stmt  #if-else-stmt
maybe-struct-body:
    ';'
    '{' typed-id-list? '}'                                  #struct-body
maybe-enum-body:
    ';'
    '{' enum-list? '}'                                      #enum-body
fun-sig:
    '(' typed-id-list? ')' '->' expr                        #fixed-fun-sig
    '(' typed-id-list ',' '...' ')' '->' expr               #variadic-fun-sig
maybe-compound-stmt:
    ';'
    compound-stmt
compound-stmt:
    '{' stmt-list? '}'
maybe-typed-id:
    typed-id
    id ':'                                                  #untyped-id
typed-id:
    id ':' expr
typed-id-list:
    typed-id-list? ','= typed-id
enumerator:
    id '='? expr=
enum-list:
    enum-list? ','= enumerator
expr-list:
    expr-list? ','= expr
stmt-list:
    stmt-list? stmt
assign:
    expr '=' assign                                         #simple-assign
    expr '*=' expr                                          #times-assign
    expr '/=' expr                                          #divide-assign
    expr '%=' expr                                          #modulo-assign
    expr '+=' expr                                          #plus-assign
    expr '-=' expr                                          #minus-assign
    expr '<<=' expr                                         #left-shift-assign
    expr '>>=' expr                                         #right-shift-assign
    expr '&=' expr                                          #bit-and-assign
    expr '^=' expr                                          #bit-xor-assign
    expr '|=' expr                                          #bit-or-assign
    expr
expr:
    logical-or-expr
mul-expr:
    unary-expr
    mul-expr '*' unary-expr                                 #times-expr
    mul-expr '/' unary-expr                                 #divide-expr
    mul-expr '%' unary-expr                                 #modulo-expr
add-expr:
    mul-expr
    add-expr '+' mul-expr                                   #plus-expr
    add-expr '-' mul-expr                                   #minus-expr
shift-expr:
    add-expr
    shift-expr '<<' add-expr                                #left-shift-expr
    shift-expr '>>' add-expr                                #right-shift-expr
cmp-expr:
    shift-expr
    shift-expr '<' shift-expr                               #lt-expr
    shift-expr '>' shift-expr                               #gt-expr
    shift-expr '<=' shift-expr                              #le-expr
    shift-expr '>=' shift-expr                              #ge-expr
    shift-expr '==' shift-expr                              #eq-expr
    shift-expr '!=' shift-expr                              #ne-expr
bitwise-and-expr:
    cmp-expr
    bitwise-and-expr '&' cmp-expr                           #bit-and-expr
bitwise-xor-expr:
    bitwise-and-expr
    bitwise-xor-expr '^' bitwise-and-expr                   #bit-xor-expr
bitwise-ior-expr:
    bitwise-xor-expr
    bitwise-ior-expr '|' bitwise-xor-expr                   #bit-ior-expr
logical-and-expr:
    bitwise-ior-expr
    logical-and-expr '&&' bitwise-ior-expr                  #log-and-expr
logical-or-expr:
    logical-and-expr
    logical-or-expr '||' logical-and-expr                   #log-or-expr
unary-expr:
    quasipostfix-expr
    '++' unary-expr                                         #pre-incr-expr
    '--' unary-expr                                         #pre-decr-expr
    '&' unary-expr                                          #addressof-expr
    '+' unary-expr                                          #unary-plus-expr
    '-' unary-expr                                          #unary-minus-expr
    '~' unary-expr                                          #bit-not-expr
    '!' unary-expr                                          #log-not-expr
quasipostfix-expr:
    postfix-expr
    quasipostfix-expr attr                                  #attr-expr
postfix-expr:
    primary-expr
    postfix-expr '[' expr-list? ']'                         #index-expr
    postfix-expr '(' expr-list? ')'                         #call-expr
    postfix-expr '.' id                                     #member-expr
    postfix-expr '++'                                       #post-incr-expr
    postfix-expr '--'                                       #post-decr-expr
primary-expr:
    id
    literal
# TODO decide whether to support `'(' expr-list? ')'`
    '(' assign ')'                                          #paren-expr
    '[' expr-list? ']'                                      #array-literal
literal:
    decimal-floating-literal
    hexadecimal-floating-literal
    decimal-literal
    octal-literal
    hexadecimal-literal
    binary-literal
    character-literal
    string-literal
