# Complete grammar for GNU C.
#
# See comments in gcc/c/c-parser.c in GCC source.
#
# It includes C11 and GNU extensions, but not ObjC, OMP or Cilk.
#
# Does not have unified comments or preprocessor directives.
#
# Slightly modified:
#   - To fix bugs and ambiguities in GCC's comments' grammar.
#   - To eliminate non-top-level rules that can be empty.
#   - To put some of the rules in a more useful form.
#
# If used for parsing, the caller must correctly specify:
#   - Whether each identifier is a typedef-name or not in a given scope.
#   - Whether _Atomic is followed by a left parenthesis or not.
#
# This grammar is used internally by nicate, despite its ugliness.

language gnu-c

# In C, comments can appear *anywhere*, so they are not preserved.
whitespace ([\t\n\v\f\r\x20]|(\/\/|\#)[^\n]*|\/\*(\**[^\/])*\*\/)+

keyword auto
keyword break
keyword case
keyword const
keyword continue
keyword default
keyword do
keyword else
keyword enum
keyword extern
keyword for
keyword goto
keyword if
keyword register
keyword return
keyword sizeof
keyword static
keyword struct
keyword switch
keyword typedef
keyword union
keyword volatile
keyword while

keyword char
keyword double
keyword float
keyword int
keyword long
keyword short
keyword signed
keyword unsigned
keyword void

keyword inline
keyword restrict
keyword _Static_assert
keyword _Thread_local
keyword _Noreturn
keyword _Bool
keyword _Complex
# Since we don't have shift-reduce conflict resolution yet,
# someone else needs to tell us.
# Note that _Atomic as a specifier is pointless, you can always
# modifier your code to use the qualifier.
keyword _Atomic_as_qualifier
keyword _Atomic_as_specifier
keyword _Alignas
keyword asm
keyword _Generic

keyword __extension__
keyword __thread
keyword __auto_type
#keyword __intN 0-3
keyword _Decimal32
keyword _Decimal64
keyword _Decimal128
keyword _Fract
keyword _Accum
keyword _Sat
keyword typeof
keyword __attribute__
keyword __label__
keyword __alignof__
keyword __real__
keyword __imag__
keyword __func__
keyword __FUNCTION__
keyword __PRETTY_FUNCTION__
keyword __builtin_va_arg
keyword __builtin_offsetof
keyword __builtin_choose_expr
keyword __builtin_types_compatible_p
keyword __builtin_complex
keyword __builtin_shuffle

atom identifier [A-Za-z_][A-Za-z_0-9]*
# Never generated by lexer, needs scope-aware lookup.
atom typedef-name
# Never generated by lexer, needs target-specific whitelist.
atom address-space

atom decimal-floating-constant (([0-9]+\.|[0-9]*\.[0-9]+)([eE][-+]?[0-9]+)?|[0-9]+([eE][-+]?[0-9]+))[fFlL]?
atom hexadecimal-floating-constant 0[xX]([0-9a-fA-F]*\.[0-9a-fA-F]|[0-9a-fA-F]+\.?)(p[-+]?[0-9]+)[fFlL]?
atom decimal-constant [1-9][0-9]*
atom octal-constant 0[0-7]*
atom hexadecimal-constant 0[xX][0-9a-fA-F]+
atom binary-constant 0[bB][01]+
atom character-constant \'([^\']|\\.)*\'
atom string-literal \"([^\"]|\\.)*\"

symbol '[' lbracket
symbol ']' rbracket
symbol '(' lparen
symbol ')' rparen
symbol '{' lbrace
symbol '}' rbrace
symbol '.' dot
symbol '...' ellipsis
symbol '->' arrow
symbol '++' incr
symbol '--' decr
symbol '&' ampersand
symbol '*' star
symbol '+' plus
symbol '-' minus
symbol '~' tilde
symbol '!' bang
symbol '/' slash
symbol '%' percent
symbol '<<' lshift
symbol '>>' rshift
symbol '<' lt
symbol '>' gt
symbol '<=' le
symbol '>=' ge
symbol '==' eq
symbol '!=' ne
symbol '^' caret
symbol '|' pipe
symbol '&&' logical-and
symbol '||' logical-or
symbol '?' query
symbol ':' colon
symbol '=' assign
symbol '*=' star-assign
symbol '/=' slash-assign
symbol '%=' percent-assign
symbol '+=' plus-assign
symbol '-=' minus-assign
symbol '<<=' lshift-assign
symbol '>>=' rshift-assign
symbol '&=' ampersand-assign
symbol '^=' caret-assign
symbol '|=' pipe-assign
symbol ',' comma
symbol ';' semicolon
# symbol '#' hash
# symbol '##' hash-hash

start translation-unit

translation-unit:
    external-declarations?

external-declarations:
    external-declarations? external-declaration

external-declaration:
    function-definition
    declaration
    static-assert-declaration
    asm-definition
    ';'
    __extension__ external-declaration                                      #extension-external-declaration
#    pragma
    init-declarator-list ';'                                                #implicit-int-declaration

declaration:
    declaration-specifiers init-declarator-list? ';'

function-definition:
    declarator declaration-list? compound-statement                         #implicit-int-function-definition
    nested-function-definition

declaration-list:
    declaration-list? declaration

init-declarator-list:
    init-declarator
    init-declarator-list ',' init-declarator                                #multi-init-declarator-list

init-declarator:
    declarator simple-asm-expr? attributes?                                 #uninitialized-declarator
    declarator simple-asm-expr? attributes? '=' initializer                 #initialized-declarator

nested-function-definition:
    declaration-specifiers declarator declaration-list? compound-statement

asm-definition:
    simple-asm-expr ';'

static-assert-declaration:
    _Static_assert '(' constant-expression ',' string-literal ')' ';'

# Require at least one non-attributes.
# Does *not* yet enforce the existence of any specifiers.
declaration-specifiers:
    attributes? head-declaration-specifiers                               #only-head-declaration-specifiers
    attributes? head-declaration-specifiers? tail-declaration-specifiers  #head-tail-declaration-specifiers

head-declaration-specifiers:
    head-declaration-specifiers? head-declaration-specifier attributes?
head-declaration-specifier:
    storage-class-specifier
    function-specifier
    alignment-specifier

# Existence of non-attributes in last part is deprecated
tail-declaration-specifiers:
    tail-declaration-specifiers? tail-declaration-specifier attributes? head-declaration-specifiers?
tail-declaration-specifier:
    type-specifier
    type-qualifier

storage-class-specifier:
    typedef
    extern
    static
    auto
    register
    _Thread_local
    __thread

function-specifier:
    inline
    _Noreturn

type-specifier:
    void
    char
    short
    int
    long
    float
    double
    signed
    unsigned
    _Bool
    _Complex
    struct-or-union-specifier
    enum-specifier
    typedef-name
    atomic-type-specifier
    typeof-specifier
    __auto_type
#    __intN 0-3
    _Decimal32
    _Decimal64
    _Decimal128
    _Fract
    _Accum
    _Sat

type-qualifier:
    const
    restrict
    volatile
    _Atomic_as_qualifier
    address-space

atomic-type-specifier:
    _Atomic_as_specifier '(' type-name ')'

enum-specifier:
    enum attributes? identifier? '{' enumerator-list ','? '}'               #full-enum-specifier
    enum attributes? identifier                                             #forward-enum-specifier

enumerator-list:
    enumerator
    enumerator-list ',' enumerator                                          #multi-enumerator-list

enumerator:
    enumeration-constant
    enumeration-constant '=' constant-expression                            #initialized-enumerator

enumeration-constant:
    identifier

struct-or-union-specifier:
    struct-or-union attributes? identifier? '{' struct-declaration-list? '}'    #full-struct-or-union-specifier
    struct-or-union attributes? identifier                                  #forward-struct-or-union-specifier

struct-or-union:
    struct
    union

struct-declaration-list:
    struct-declaration-list? struct-declaration

struct-declaration:
    specifier-qualifier-list struct-declarator-list? ';'                    #member-declaration
    static-assert-declaration
    __extension__ struct-declaration                                        #extension-struct-declaration
#    pragma (no semicolon)
    ';'

specifier-qualifier-list:
    attributes
    specifier-qualifier-list? type-specifier attributes?                    #sq-list-specifier
    specifier-qualifier-list? type-qualifier attributes?                    #sq-list-qualifier

struct-declarator-list:
    struct-declarator
    struct-declarator-list ',' attributes? struct-declarator                #multi-struct-declarator

struct-declarator:
    declarator attributes?                                                  #member-declarator
    declarator? ':' constant-expression attributes?                         #bitfield-declarator

typeof-specifier:
    typeof '(' expr-list ')'                                                #typeof-expr-specifier
    typeof '(' type-name ')'                                                #typeof-type-specifier

alignment-specifier:
    _Alignas '(' type-name ')'                                              #alignas-type-specifier
    _Alignas '(' constant-expression ')'                                    #alignas-expr-specifier


declarator:
    pointer? direct-declarator

direct-declarator:
    identifier
    '(' attributes? declarator ')'                                          #paren-direct-declarator
    direct-declarator array-declarator                                      #array-direct-declarator
    direct-declarator '(' parameter-type-list ')'                           #fun-direct-declarator
    direct-declarator '(' identifier-list? ')'                              #legacy-fun-direct-declarator
    direct-declarator '(' parameter-forward-declarations parameter-type-list? ')'   #forward-param-fun-direct-declarator


pointer:
    '*' type-qualifier-list? pointer?

type-qualifier-list:
    attributes
    type-qualifier-list? type-qualifier attributes?                         #q-list-qualifier

# TODO simplify
array-declarator:
    '[' type-qualifier-list? assignment-expression? ']'                     #simple-array-declarator
    '[' static type-qualifier-list? assignment-expression ']'               #static-array-declarator
    '[' type-qualifier-list static assignment-expression ']'                #reverse-static-array-declarator
    '[' type-qualifier-list? '*' ']'                                        #star-array-declarator

parameter-type-list:
    parameter-list
    parameter-list ',' '...'                                                #variadic-parameter-list

parameter-list:
    parameter-declaration
    parameter-list ',' parameter-declaration                                #multi-parameter-list

parameter-declaration:
    declaration-specifiers declarator                                       #concrete-parameter-declaration
    declaration-specifiers abstract-declarator?                             #abstract-parameter-declaration
#    pragma parameter-declaration

identifier-list:
    identifier
    identifier-list ',' identifier                                          #multi-identifier-list

abstract-declarator:
    direct-abstract-declarator
    pointer direct-abstract-declarator?                                    #pointer-abstract-declarator

direct-abstract-declarator:
    '(' attributes? abstract-declarator ')'                                 #paren-direct-abstract-declarator
    direct-abstract-declarator? array-declarator                            #array-direct-abstract-declarator
    direct-abstract-declarator? '(' parameter-type-list? ')'                #fun-direct-abstract-declarator
    direct-abstract-declarator? '(' parameter-forward-declarations parameter-type-list? ')' #forward-param-fun-direct-abstract-declarator

parameter-forward-declarations:
    parameter-forward-declarations? parameter-forward-declaration

parameter-forward-declaration:
    parameter-list ';'

asm-string-literal:
    string-literal

simple-asm-expr:
    asm '(' asm-string-literal ')'

attributes:
    attributes? attribute

attribute:
    __attribute__ '(' '(' attribute-list? ')' ')'

attribute-list:
    attrib
    attribute-list? ',' attrib?                                             #multi-attribute-list

attrib:
    any-word
    any-word '(' expr-list ')'                                              #attrib-with-arg

any-word:
    identifier
    storage-class-specifier
    type-specifier
    type-qualifier

type-name:
    specifier-qualifier-list abstract-declarator?

initializer:
    assignment-expression
    '{' initializer-list? '}'                                               #braced-initializer
    '{' initializer-list ',' '}'                                            #braced-initializer-comma


initializer-list:
    designated-initializer
    initializer-list ',' designated-initializer                             #multi-initializer-list

designated-initializer:
    designation? initializer

designation:
    designator-list '='                                                     #c99-designation
    array-designator
    identifier ':'                                                          #gnu-designation


designator-list:
    designator-list? designator

designator:
    array-designator
    '.' identifier                                                          #member-designator

array-designator:
    '[' constant-expression ']'                                             #array-element-designator
    '[' constant-expression '...' constant-expression ']'                   #array-range-designator


compound-statement:
    '{' label-declarations? block-item-list? '}'

block-item-list:
    block-item-list? block-item

block-item:
    nested-declaration
    statement
#    pragma

nested-declaration:
    declaration
    static-assert-declaration
    __extension__ nested-declaration                                        #extension-nested-declaration
    nested-function-definition

label-declarations:
    label-declarations? label-declaration

label-declaration:
    __label__ identifier-list ';'


labels:
    labels? label
label:
    identifier ':' attributes?                                              #named-label
    case constant-expression ':'                                            #case-label
    default ':'                                                             #default-label
    case constant-expression '...' constant-expression ':'                  #case-range-label

statement:
    labels? unlabeled-statement
unlabeled-statement:
    if-statement
    if-else-statement
    switch-statement
    while-statement
    for-statement
    unambiguous-statement

statement-except-if:
    labels? unlabeled-statement-except-if
unlabeled-statement-except-if:
    if-else-statement-except-if
    switch-statement-except-if
    while-statement-except-if
    for-statement-except-if
    unambiguous-statement

unambiguous-statement:
    compound-statement
    expression-statement
    do-statement
    goto identifier ';'                                                     #goto-statement
    continue ';'                                                            #continue-statement
    break ';'                                                               #break-statement
    return expr-list? ';'                                                   #return-statement
    goto '*' expr-list ';'                                                  #computed-goto-statement
    asm-statement

expression-statement:
    expr-list? ';'


condition:
    '(' expr-list ')'

if-statement:
    if condition statement
if-else-statement:
    if condition statement-except-if else statement
if-else-statement-except-if:
    if condition statement-except-if else statement-except-if


switch-statement:
    switch '(' expr-list ')' statement
switch-statement-except-if:
    switch '(' expr-list ')' statement-except-if

while-statement:
     while condition statement
while-statement-except-if:
     while condition statement-except-if

do-statement:
    do statement while condition ';'

for-statement:
    for '(' expr-list? ';' expr-list? ';' expr-list? ')' statement          #for-expr-statement
    for '(' nested-declaration expr-list? ';' expr-list? ')' statement      #for-decl-statement
for-statement-except-if:
    for '(' expr-list? ';' expr-list? ';' expr-list? ')' statement-except-if                                                                            #for-expr-statement-except-if
    for '(' nested-declaration expr-list? ';' expr-list? ')' statement-except-if                                                                        #for-decl-statement-except-if


asm-statement:
    asm type-qualifier? '(' asm-argument ')' ';'                            #asm-common-statement
    asm type-qualifier? goto '(' asm-goto-argument ')' ';'                  #asm-goto-statement

asm-argument:
    asm-string-literal
    asm-string-literal ':' asm-operands?                                    #asm-argument-out
    asm-string-literal ':' asm-operands? ':' asm-operands?                  #asm-argument-out-in
    asm-string-literal ':' asm-operands? ':' asm-operands? ':' asm-clobbers?                                                                            #asm-argument-out-in-clobber

asm-goto-argument:
    asm-string-literal ':' ':' asm-operands? ':' asm-clobbers? ':' asm-goto-operands

asm-operands:
    asm-operand
    asm-operands ',' asm-operand                                            #multi-asm-operands

asm-operand:
    asm-string-literal '(' expr-list ')'                                    #anonymous-asm-operand
    '[' identifier ']' asm-string-literal '(' expr-list ')'                 #named-asm-operand

asm-clobbers:
    asm-string-literal
    asm-clobbers ',' asm-string-literal                                     #multi-asm-clobbers

asm-goto-operands:
    identifier
    asm-goto-operands ',' identifier                                        #multi-asm-goto-operands


assignment-expression:
    conditional-expression
    conditional-expression '=' assignment-expression                        #simple-assignment-expression
    conditional-expression '*=' assignment-expression                       #times-assignment-expression
    conditional-expression '/=' assignment-expression                       #divide-assignment-expression
    conditional-expression '%=' assignment-expression                       #modulo-assignment-expression
    conditional-expression '+=' assignment-expression                       #plus-assignment-expression
    conditional-expression '-=' assignment-expression                       #minus-assignment-expression
    conditional-expression '<<=' assignment-expression                      #left-shift-assignment-expression
    conditional-expression '>>=' assignment-expression                      #right-shift-assignment-expression
    conditional-expression '&=' assignment-expression                       #bit-and-assignment-expression
    conditional-expression '^=' assignment-expression                       #bit-xor-assignment-expression
    conditional-expression '|=' assignment-expression                       #bit-ior-assignment-expression

conditional-expression:
    logical-or-expression
    logical-or-expression '?' expr-list? ':' conditional-expression         #ternary-expression


multiplicative-expression:
    maybe-cast-expression
    multiplicative-expression '*' maybe-cast-expression                     #times-expression
    multiplicative-expression '/' maybe-cast-expression                     #divide-expression
    multiplicative-expression '%' maybe-cast-expression                     #modulo-expression

additive-expression:
    multiplicative-expression
    additive-expression '+' multiplicative-expression                       #plus-expression
    additive-expression '-' multiplicative-expression                       #minus-expression

shift-expression:
    additive-expression
    shift-expression '<<' additive-expression                               #left-shift-expression
    shift-expression '>>' additive-expression                               #right-shift-expression

relational-expression:
    shift-expression
    relational-expression '<' shift-expression                              #lt-expression
    relational-expression '>' shift-expression                              #gt-expression
    relational-expression '<=' shift-expression                             #le-expression
    relational-expression '>=' shift-expression                             #ge-expression

equality-expression:
    relational-expression
    equality-expression '==' relational-expression                          #eq-expression
    equality-expression '!=' relational-expression                          #ne-expression

and-expression:
    equality-expression
    and-expression '&' equality-expression                                  #bit-and-expression

exclusive-or-expression:
    and-expression
    exclusive-or-expression '^' and-expression                              #bit-xor-expression

inclusive-or-expression:
    exclusive-or-expression
    inclusive-or-expression '|' exclusive-or-expression                     #bit-ior-expression

logical-and-expression:
    inclusive-or-expression
    logical-and-expression '&&' inclusive-or-expression                     #log-and-expression

logical-or-expression:
    logical-and-expression
    logical-or-expression '||' logical-and-expression                       #log-or-expression


maybe-cast-expression:
    no-cast-expression
    '(' type-name ')' maybe-cast-expression                                 #actual-cast-expression

no-cast-expression:
    postfix-expression
    '++' maybe-cast-expression                                              #pre-incr-expression
    '--' maybe-cast-expression                                              #pre-decr-expression
    '&' maybe-cast-expression                                               #addressof-expression
    '*' maybe-cast-expression                                               #deref-expression
    '+' maybe-cast-expression                                               #unary-plus-expression
    '-' maybe-cast-expression                                               #unary-minus-expression
    '~' maybe-cast-expression                                               #bit-not-expression
    '!' maybe-cast-expression                                               #log-not-expression
    __extension__ maybe-cast-expression                                     #extension-expression
    __real__ maybe-cast-expression                                          #real-expression
    __imag__ maybe-cast-expression                                          #imag-expression
    sizeof no-cast-expression                                               #sizeof-expression-expression
    sizeof '(' type-name ')'                                                #sizeof-type-expression
    __alignof__ no-cast-expression                                          #alignof-expression-expression
    __alignof__ '(' type-name ')'                                           #alignof-type-expression
    '&&' identifier                                                         #label-address-expression

generic-selection:
    _Generic '(' assignment-expression ',' generic-assoc-list ')'

generic-assoc-list:
    generic-association
    generic-assoc-list ',' generic-association                              #multi-generic-assoc-list

generic-association:
    type-name ':' assignment-expression                                     #type-generic-association
    default ':' assignment-expression                                       #default-generic-association


postfix-expression:
    primary-expression
    postfix-expression '[' expr-list ']'                                    #index-expression
    postfix-expression '(' expr-list? ')'                                   #call-expression
    postfix-expression '.' identifier                                       #direct-member-expression
    postfix-expression '->' identifier                                      #indirect-member-expression
    postfix-expression '++'                                                 #post-incr-expression
    postfix-expression '--'                                                 #post-decr-expression
    '(' type-name ')' '{' initializer-list? '}'                             #compound-literal
    '(' type-name ')' '{' initializer-list ',' '}'                          #compound-literal-comma

primary-expression:
    identifier
    constant
    string-literal
    '(' expr-list ')'                                                       #paren-expression
    generic-selection
    __func__
    __FUNCTION__
    __PRETTY_FUNCTION__
    '(' compound-statement ')'                                              #gnu-statement-expression
    __builtin_va_arg '(' assignment-expression ',' type-name ')'            #builtin-va-arg-expression
    __builtin_offsetof '(' type-name ',' offsetof-member-designator ')'     #builtin-offsetof-expression
    __builtin_choose_expr '(' assignment-expression ',' assignment-expression ',' assignment-expression ')' #builtin-choose-expr-expression
    __builtin_types_compatible_p '(' type-name ',' type-name ')'            #builtin-types-compatible-p-expression
    __builtin_complex '(' assignment-expression ',' assignment-expression ')'   #builtin-complex-expression
    __builtin_shuffle '(' assignment-expression ',' assignment-expression ')'   #builtin-simple-shuffle-expression
    __builtin_shuffle '(' assignment-expression ',' assignment-expression ',' assignment-expression ')' #builtin-mix-shuffle-expression

offsetof-member-designator:
    identifier
    offsetof-member-designator '.' identifier                               #named-member-offset-designator
    offsetof-member-designator '[' expr-list ']'                            #array-member-offset-designator


expr-list:
    assignment-expression
    expr-list ',' assignment-expression                                     #multi-expr-list


constant:
    floating-constant
    integer-constant
    character-constant
floating-constant:
    decimal-floating-constant
    hexadecimal-floating-constant
integer-constant:
    decimal-constant
    octal-constant
    hexadecimal-constant
    binary-constant

constant-expression:
    conditional-expression
