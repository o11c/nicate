# Complete grammar for GNU C.
#
# See comments in gcc/c/c-parser.c in GCC source.
#
# It includes C11 and GNU extensions, but not ObjC, OMP or Cilk.
#
# Does not have unified comments or preprocessor directives.
#
# Slightly modified:
#   - To fix bugs and ambiguities in GCC's comments' grammar.
#   - To eliminate non-top-level rules that can be empty.
#   - To put some of the rules in a more useful form.
#
# If used for parsing, the caller must correctly specify:
#   - Whether each identifier is a typedef-name or not in a given scope.
#   - Whether _Atomic is followed by a left parenthesis or not.
#
# This grammar is used internally by nicate, despite its ugliness.

language gnu-c

# In C, comments can appear *anywhere*, so they are not preserved.
whitespace ([\t\n\v\f\r\x20]|(\/\/|\#)[^\n]*|\/\*(\**[^\/])*\*\/)+

keyword auto
keyword break
keyword case
keyword const
keyword continue
keyword default
keyword do
keyword else
keyword enum
keyword extern
keyword for
keyword goto
keyword if
keyword register
keyword return
keyword sizeof
keyword static
keyword struct
keyword switch
keyword typedef
keyword union
keyword volatile
keyword while

keyword char
keyword double
keyword float
keyword int
keyword long
keyword short
keyword signed
keyword unsigned
keyword void

keyword inline
keyword restrict
keyword _Static_assert
keyword _Thread_local
keyword _Noreturn
keyword _Bool
keyword _Complex
# Since we don't have shift-reduce conflict resolution yet,
# someone else needs to tell us.
# Note that _Atomic as a specifier is pointless, you can always
# modifier your code to use the qualifier.
keyword _Atomic_as_qualifier
keyword _Atomic_as_specifier
keyword _Alignas
keyword asm
keyword _Generic

keyword __extension__
keyword __thread
keyword __auto_type
#keyword __intN 0-3
keyword _Decimal32
keyword _Decimal64
keyword _Decimal128
keyword _Fract
keyword _Accum
keyword _Sat
keyword typeof
keyword __attribute__
keyword __label__
keyword __alignof__
keyword __real__
keyword __imag__
keyword __func__
keyword __FUNCTION__
keyword __PRETTY_FUNCTION__
keyword __builtin_va_arg
keyword __builtin_offsetof
keyword __builtin_choose_expr
keyword __builtin_types_compatible_p
keyword __builtin_complex
keyword __builtin_shuffle

atom identifier [A-Za-z_][A-Za-z_0-9]*
# Never generated by lexer, needs scope-aware lookup.
atom typedef-name
# Never generated by lexer, needs target-specific whitelist.
atom address-space

atom decimal-floating-constant (([0-9]+\.|[0-9]*\.[0-9]+)([eE][-+]?[0-9]+)?|[0-9]+([eE][-+]?[0-9]+))[fFlL]?
atom hexadecimal-floating-constant 0[xX]([0-9a-fA-F]*\.[0-9a-fA-F]|[0-9a-fA-F]+\.?)(p[-+]?[0-9]+)[fFlL]?
atom decimal-constant [1-9][0-9]*
atom octal-constant 0[0-7]*
atom hexadecimal-constant 0[xX][0-9a-fA-F]+
atom binary-constant 0[bB][01]+
atom character-constant \'([^\']|\\.)*\'
atom string-literal \"([^\"]|\\.)*\"

symbol '[' lbracket
symbol ']' rbracket
symbol '(' lparen
symbol ')' rparen
symbol '{' lbrace
symbol '}' rbrace
symbol '.' dot
symbol '...' ellipsis
symbol '->' arrow
symbol '++' incr
symbol '--' decr
symbol '&' ampersand
symbol '*' star
symbol '+' plus
symbol '-' minus
symbol '~' tilde
symbol '!' bang
symbol '/' slash
symbol '%' percent
symbol '<<' lshift
symbol '>>' rshift
symbol '<' lt
symbol '>' gt
symbol '<=' le
symbol '>=' ge
symbol '==' eq
symbol '!=' ne
symbol '^' caret
symbol '|' pipe
symbol '&&' logical-and
symbol '||' logical-or
symbol '?' query
symbol ':' colon
symbol '=' assign
symbol '*=' star-assign
symbol '/=' slash-assign
symbol '%=' percent-assign
symbol '+=' plus-assign
symbol '-=' minus-assign
symbol '<<=' lshift-assign
symbol '>>=' rshift-assign
symbol '&=' ampersand-assign
symbol '^=' caret-assign
symbol '|=' pipe-assign
symbol ',' comma
symbol ';' semicolon
# symbol '#' hash
# symbol '##' hash-hash

start translation-unit

translation-unit:
    external-declarations?

external-declarations:
    external-declaration
    external-declarations external-declaration

external-declaration:
    function-definition
    declaration
    asm-definition
    ';'
    __extension__ external-declaration
#    pragma
    init-declarator-list ';'

declaration:
    declaration-specifiers init-declarator-list? ';'
    static-assert-declaration

function-definition:
    declarator declaration-list? compound-statement
    nested-function-definition

declaration-list:
    declaration
    declaration-list declaration

init-declarator-list:
    init-declarator
    init-declarator-list ',' init-declarator

init-declarator:
    declarator
    declarator simple-asm-expr
    declarator simple-asm-expr? attributes
    declarator simple-asm-expr? attributes? '=' initializer

nested-function-definition:
    declaration-specifiers declarator declaration-list? compound-statement

asm-definition:
    simple-asm-expr ';'

static-assert-declaration:
    static-assert-declaration-no-semi ';'

static-assert-declaration-no-semi:
    _Static_assert '(' constant-expression ',' string-literal ')'

# Require at least one non-attributes.
# Does *not* yet enforce the existence of any specifiers.
declaration-specifiers:
    head-declaration-specifiers
    attributes head-declaration-specifiers
    head-declaration-specifiers-or-attributes tail-declaration-specifiers
    tail-declaration-specifiers

head-declaration-specifiers-or-attributes:
    attributes
    head-declaration-specifiers
    attributes head-declaration-specifiers
head-declaration-specifiers:
    head-declaration-specifiers? head-declaration-specifier attributes?
head-declaration-specifier:
    storage-class-specifier
    function-specifier
    alignment-specifier

# Existence of non-attributes in last part is deprecated
tail-declaration-specifiers:
    tail-declaration-specifier
    tail-declaration-specifier head-declaration-specifiers-or-attributes
    tail-declaration-specifiers tail-declaration-specifier
    tail-declaration-specifiers tail-declaration-specifier head-declaration-specifiers-or-attributes
tail-declaration-specifier:
    type-specifier
    type-qualifier

storage-class-specifier:
    typedef
    extern
    static
    auto
    register
    _Thread_local
    __thread

function-specifier:
    inline
    _Noreturn

type-specifier:
    void
    char
    short
    int
    long
    float
    double
    signed
    unsigned
    _Bool
    _Complex
    struct-or-union-specifier
    enum-specifier
    typedef-name
    atomic-type-specifier
    typeof-specifier
    __auto_type
#    __intN 0-3
    _Decimal32
    _Decimal64
    _Decimal128
    _Fract
    _Accum
    _Sat

type-qualifier:
    const
    restrict
    volatile
    _Atomic_as_qualifier
    address-space

atomic-type-specifier:
    _Atomic_as_specifier '(' type-name ')'

enum-specifier:
    enum attributes? identifier? '{' enumerator-list '}'
    enum attributes? identifier? '{' enumerator-list ',' '}'
    enum attributes? identifier

enumerator-list:
    enumerator
    enumerator-list ',' enumerator

enumerator:
    enumeration-constant
    enumeration-constant '=' constant-expression

enumeration-constant:
    identifier

struct-or-union-specifier:
    struct-or-union attributes? identifier? '{' struct-contents? '}'
    struct-or-union attributes? identifier

struct-or-union:
    struct
    union

struct-contents:
    struct-declaration-list
    struct-declaration-list? struct-declaration

struct-declaration-list:
    struct-declaration ';'
    struct-declaration-list struct-declaration ';'
    struct-declaration-list ';'
    ';'
#    pragma
#    struct-declaration-list pragma

struct-declaration:
    specifier-qualifier-list struct-declarator-list
    static-assert-declaration-no-semi
    __extension__ struct-declaration
    specifier-qualifier-list

# TODO fix this properly
specifier-qualifier-list:
    attributes
    type-specifier
    specifier-qualifier-list type-specifier
    specifier-qualifier-list? type-specifier attributes
    specifier-qualifier-list? type-qualifier attributes?

struct-declarator-list:
    struct-declarator
    struct-declarator-list ',' attributes? struct-declarator

struct-declarator:
    declarator
    declarator attributes
    declarator? ':' constant-expression attributes?

typeof-specifier:
    typeof '(' expr-list ')'
    typeof '(' type-name ')'

alignment-specifier:
    _Alignas '(' type-name ')'
    _Alignas '(' constant-expression ')'


declarator:
    direct-declarator
    pointer direct-declarator

direct-declarator:
    identifier
    '(' attributes? declarator ')'
    direct-declarator array-declarator
    direct-declarator '(' parameter-type-list ')'
    direct-declarator '(' identifier-list? ')'
    direct-declarator '(' parameter-forward-declarations parameter-type-list? ')'


pointer:
    '*' type-qualifier-list?
    '*' type-qualifier-list? pointer

type-qualifier-list:
    attributes
    type-qualifier-list? type-qualifier attributes?

array-declarator:
    '[' type-qualifier-list? assignment-expression? ']'
    '[' static type-qualifier-list? assignment-expression ']'
    '[' type-qualifier-list static assignment-expression ']'
    '[' type-qualifier-list? '*' ']'

parameter-type-list:
    parameter-list
    parameter-list ',' '...'

parameter-list:
    parameter-declaration
    parameter-list ',' parameter-declaration

parameter-declaration:
    declaration-specifiers declarator
    declaration-specifiers abstract-declarator?
#    pragma parameter-declaration

identifier-list:
    identifier
    identifier-list ',' identifier

abstract-declarator:
    pointer
    direct-abstract-declarator
    pointer direct-abstract-declarator

direct-abstract-declarator:
    '(' attributes? abstract-declarator ')'
    direct-abstract-declarator? array-declarator
    direct-abstract-declarator? '(' parameter-type-list? ')'
    direct-abstract-declarator? '(' parameter-forward-declarations parameter-type-list? ')'

parameter-forward-declarations:
    parameter-list ';'
    parameter-forward-declarations parameter-list ';'

asm-string-literal:
    string-literal

simple-asm-expr:
    asm '(' asm-string-literal ')'

attributes:
    attributes? attribute

attribute:
    __attribute__ '(' '(' attribute-list? ')' ')'

attribute-list:
    attrib
    attribute-list? ',' attrib?

attrib:
    any-word
    any-word '(' expr-list ')'

any-word:
    identifier
    storage-class-specifier
    type-specifier
    type-qualifier

type-name:
    specifier-qualifier-list abstract-declarator?

initializer:
    assignment-expression
    '{' initializer-list? '}'
    '{' initializer-list ',' '}'


initializer-list:
    initializer
    designation initializer
    initializer-list ',' designation? initializer

designation:
    designator-list '='
    array-designator
    identifier ':'


designator-list:
    designator
    designator-list designator

designator:
    array-designator
    '.' identifier

array-designator:
    '[' constant-expression ']'
    '[' constant-expression '...' constant-expression ']'


compound-statement:
    '{' label-declarations? block-item-list? '}'

block-item-list:
    block-item
    block-item-list block-item

block-item:
    nested-declaration
    statement
#    pragma

nested-declaration:
    declaration
    __extension__ nested-declaration
    nested-function-definition

label-declarations:
    label-declaration
    label-declarations label-declaration

label-declaration:
    __label__ identifier-list ';'


labels:
    labels? label
label:
    identifier ':' attributes?
    case constant-expression ':'
    default ':'
    case constant-expression '...' constant-expression ':'

statement:
    unlabeled-statement
    labels unlabeled-statement
unlabeled-statement:
    compound-statement
    expression-statement
    if-statement
    if-else-statement
    switch-statement
    while-statement
    do-statement
    for-statement
    goto identifier ';'
    continue ';'
    break ';'
    return expr-list? ';'
    goto '*' expr-list ';'
    asm-statement

statement-except-if:
    unlabeled-statement-except-if
    labels unlabeled-statement-except-if
unlabeled-statement-except-if:
    compound-statement
    expression-statement
    if-else-statement-except-if
    switch-statement-except-if
    while-statement-except-if
    do-statement
    for-statement-except-if
    goto identifier ';'
    continue ';'
    break ';'
    return expr-list? ';'
    goto '*' expr-list ';'
    asm-statement

expression-statement:
    expr-list? ';'


condition:
    '(' expr-list ')'

if-statement:
    if condition statement
if-else-statement:
    if condition statement-except-if else statement
if-else-statement-except-if:
    if condition statement-except-if else statement-except-if


switch-statement:
    switch '(' expr-list ')' statement
switch-statement-except-if:
    switch '(' expr-list ')' statement-except-if

while-statement:
     while condition statement
while-statement-except-if:
     while condition statement-except-if

do-statement:
    do statement while condition ';'

for-statement:
    for '(' expr-list? ';' expr-list? ';' expr-list? ')' statement
    for '(' nested-declaration expr-list? ';' expr-list? ')' statement
for-statement-except-if:
    for '(' expr-list? ';' expr-list? ';' expr-list? ')' statement-except-if
    for '(' nested-declaration expr-list? ';' expr-list? ')' statement-except-if


asm-statement:
    asm type-qualifier? '(' asm-argument ')' ';'
    asm type-qualifier? goto '(' asm-goto-argument ')' ';'

asm-argument:
    asm-string-literal
    asm-string-literal ':' asm-operands?
    asm-string-literal ':' asm-operands? ':' asm-operands?
    asm-string-literal ':' asm-operands? ':' asm-operands? ':' asm-clobbers?

asm-goto-argument:
    asm-string-literal ':' ':' asm-operands? ':' asm-clobbers? ':' asm-goto-operands

asm-operands:
    asm-operand
    asm-operands ',' asm-operand

asm-operand:
    asm-string-literal '(' expr-list ')'
    '[' identifier ']' asm-string-literal '(' expr-list ')'

asm-clobbers:
    asm-string-literal
    asm-clobbers ',' asm-string-literal

asm-goto-operands:
    identifier
    asm-goto-operands ',' identifier


assignment-expression:
    conditional-expression
    conditional-expression assignment-operator assignment-expression

assignment-operator:
    '='
    '*='
    '/='
    '%='
    '+='
    '-='
    '<<='
    '>>='
    '&='
    '^='
    '|='

conditional-expression:
    logical-or-expression
    logical-or-expression '?' expr-list? ':' conditional-expression


multiplicative-expression:
    cast-expression
    multiplicative-expression '*' cast-expression
    multiplicative-expression '/' cast-expression
    multiplicative-expression '%' cast-expression

additive-expression:
    multiplicative-expression
    additive-expression '+' multiplicative-expression
    additive-expression '-' multiplicative-expression

shift-expression:
    additive-expression
    shift-expression '<<' additive-expression
    shift-expression '>>' additive-expression

relational-expression:
    shift-expression
    relational-expression '<' shift-expression
    relational-expression '>' shift-expression
    relational-expression '<=' shift-expression
    relational-expression '>=' shift-expression

equality-expression:
    relational-expression
    equality-expression '==' relational-expression
    equality-expression '!=' relational-expression

and-expression:
    equality-expression
    and-expression '&' equality-expression

exclusive-or-expression:
    and-expression
    exclusive-or-expression '^' and-expression

inclusive-or-expression:
    exclusive-or-expression
    inclusive-or-expression '|' exclusive-or-expression

logical-and-expression:
    inclusive-or-expression
    logical-and-expression '&&' inclusive-or-expression

logical-or-expression:
    logical-and-expression
    logical-or-expression '||' logical-and-expression


cast-expression:
    unary-expression
    '(' type-name ')' cast-expression

unary-expression:
    postfix-expression
    '++' cast-expression
    '--' cast-expression
    '&' cast-expression
    '*' cast-expression
    '+' cast-expression
    '-' cast-expression
    '~' cast-expression
    '!' cast-expression
    __extension__ cast-expression
    __real__ cast-expression
    __imag__ cast-expression
    sizeof unary-expression
    sizeof '(' type-name ')'
    __alignof__ unary-expression
    __alignof__ '(' type-name ')'
    '&&' identifier

generic-selection:
    _Generic '(' assignment-expression ',' generic-assoc-list ')'

generic-assoc-list:
    generic-association
    generic-assoc-list ',' generic-association

generic-association:
    type-name ':' assignment-expression
    default ':' assignment-expression


postfix-expression:
    primary-expression
    postfix-expression '[' expr-list ']'
    postfix-expression '(' expr-list? ')'
    postfix-expression '.' identifier
    postfix-expression '->' identifier
    postfix-expression '++'
    postfix-expression '--'
    '(' type-name ')' '{' initializer-list '}'
    '(' type-name ')' '{' initializer-list ',' '}'

primary-expression:
    identifier
    constant
    string-literal
    '(' expr-list ')'
    generic-selection
    __func__
    __FUNCTION__
    __PRETTY_FUNCTION__
    '(' compound-statement ')'
    __builtin_va_arg '(' assignment-expression ',' type-name ')'
    __builtin_offsetof '(' type-name ',' offsetof-member-designator ')'
    __builtin_choose_expr '(' assignment-expression ',' assignment-expression ',' assignment-expression ')'
    __builtin_types_compatible_p '(' type-name ',' type-name ')'
    __builtin_complex '(' assignment-expression ',' assignment-expression ')'
    __builtin_shuffle '(' assignment-expression ',' assignment-expression ')'
    __builtin_shuffle '(' assignment-expression ',' assignment-expression ',' assignment-expression ')'

offsetof-member-designator:
    identifier
    offsetof-member-designator '.' identifier
    offsetof-member-designator '[' expr-list ']'


expr-list:
    assignment-expression
    expr-list ',' assignment-expression


constant:
    floating-constant
    integer-constant
    character-constant
floating-constant:
    decimal-floating-constant
    hexadecimal-floating-constant
integer-constant:
    decimal-constant
    octal-constant
    hexadecimal-constant
    binary-constant

constant-expression:
    conditional-expression
